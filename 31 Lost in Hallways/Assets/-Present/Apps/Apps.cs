using System.Collections;
using System.Collections.Generic;
using System.IO;
using System;
using UnityEngine.Networking;
using UnityEngine;

//네트워크 정보를 처리하기 위한 클래스
public class Apps
{
	public class _tagData
	{
		public bool						AutoUpdate						= true;
		public bool						AutoLogin						= true;

		public string					httpConnect						= null;
		public string					httpConnectAuthenticode			= null;
		public string					httpAccount						= null;
		public string					httpLogin						= null;
		public string					httpScore						= null;
		public string					httpPurchase					= null;
		public string					httpGetCash						= null;
		public string					httpStorageIn					= null;
		public string					httpStorageOut					= null;
		public string					httpMarketLogin					= null;
		public string					httpMemorize					= null;
		public string					httpGetMemorize					= null;
		public string					httpLocalizeRegister			= null;
		public string					httpLocalizeLogin				= null;
		public string					httpUpdate						= null;
		public string					httpRank						= null;
		public string					httpLoadRank					= null;
		public string					httpVersion						= null;
		public string					httpBuy							= null;
		public string					httpGetPlatformInfo				= null;
		public string					httpSendFriends					= null;
		public string					httpLoadFriend					= null;
		public string					httpPoint						= null;
		public string					httpCash						= null;
		public string					httpDownload					= null;

		public AppsHttpProtocol			http							= null;
		public bool						bConnect						= false;
		public bool						bLogin							= false;
		public bool						bMarket							= false;
		public bool						bPacketEventLog					= false;
		public bool						bLog							= false;

		public List<AppsItemListener>	AppsItemListeners				= new List<AppsItemListener>();
		public AppsLanguage				languageModule					= (null);

		public float					Version;
	};
	public static _tagData _data = new _tagData();

	private static AppsEventListener eventListener = null;

	public static event Action							onConnectFailed		= null;
	public static event Action<UnityWebRequest>			onProtocolError		= null;
	public static event Action<string, AppsParameter>	onReceive			= null;
	public static event Action<AppsParameter>			onConnect			= null;
	public static event Action<AppsParameter>			onUpdateEnd			= null;
	public static event Action<AppsParameter>			onLogin				= null;
	public static event Action<AppsParameter>			onLoginEnd			= null;
	public static event Action<AppsParameter>			onFriend			= null;
	public static event Action<AppsParameter>			onMemorize			= null;
	public static event Action<AppsParameter>			onStorage			= null;
	public static event Action<AppsParameter>			onBuy				= null;
	public static event Action<AppsParameter>			onFailed			= null;
	public static event Action<AppsParameter>			onEcho				= null;
	public static event Action<AppsParameter>			onItemState			= null;
	public static event Action<AppsParameter>			onVersion			= null;
	public static event Action<AppsParameter>			onClientMessage		= null;
	public static event Action<AppsParameter>			onDebugMessage		= null;
	public static event Action<AppsParameter>			onPlatformInfo		= null;
	public static event Action<AppsParameter>			onLevel				= null;
	public static event Action<AppsParameter>			onExp				= null;
	public static event Action<AppsParameter>			onPoint				= null;
	public static event Action<AppsParameter>			onCash				= null;
	public static event Action<AppsParameter>			onTime				= null;

	public static bool isUpdateEnd = false;

	//서버에 연결하기 위한 함수
	public static void Connect( AppsEventListener eventListener )
	{
		if( eventListener==null ) return;

		Apps.eventListener = eventListener;

		{
			if( !eventListener.ServerAddr.StartsWith("http://") && !eventListener.ServerAddr.StartsWith("https://") )
			{
				eventListener.ServerAddr = "https://"+eventListener.ServerAddr;
			}

			if( !eventListener.ServerAddr.EndsWith("/") )
			{
				eventListener.ServerAddr += "/";
			}

			//서버 루트 URL을 얻음
			eventListener.ServerRoot = GetRoot(eventListener.ServerAddr);
		}

		Data().httpConnect				= eventListener.ServerAddr+"Connect.php";
		Data().httpConnectAuthenticode	= eventListener.ServerAddr+"ConnectAuthenticode.php";
		Data().httpAccount				= eventListener.ServerAddr+"Account.php";
		Data().httpLogin				= eventListener.ServerAddr+"Login.php";
		Data().httpScore				= eventListener.ServerAddr+"Score.php";
		Data().httpPurchase				= eventListener.ServerAddr+"Purchase.php";
		Data().httpGetCash				= eventListener.ServerAddr+"GetCash.php";
		Data().httpStorageIn			= eventListener.ServerAddr+"StorageIn.php";
		Data().httpStorageOut			= eventListener.ServerAddr+"StorageOut.php";
		Data().httpMarketLogin			= eventListener.ServerAddr+"MarketLogin.php";
		Data().httpMemorize				= eventListener.ServerAddr+"Memorize.php";
		Data().httpGetMemorize			= eventListener.ServerAddr+"GetMemorize.php";
		Data().httpLocalizeRegister		= eventListener.ServerAddr+"LocalizeRegister.php";
		Data().httpLocalizeLogin		= eventListener.ServerAddr+"LocalizeLogin.php";
		Data().httpRank					= eventListener.ServerAddr+"Rank.php";
		Data().httpLoadRank				= eventListener.ServerAddr+"LoadRank.php";
		Data().httpVersion				= eventListener.ServerAddr+"Version.php";
		Data().httpBuy					= eventListener.ServerAddr+"Buy.php";
		Data().httpGetPlatformInfo		= eventListener.ServerAddr+"GetPlatformInfo.php";
		Data().httpSendFriends			= eventListener.ServerAddr+"SendFriends.php";
		Data().httpLoadFriend			= eventListener.ServerAddr+"LoadFriend.php";
		Data().httpPoint				= eventListener.ServerAddr+"Point.php";
		Data().httpCash					= eventListener.ServerAddr+"Cash.php";

		if( (AppsFunc.EncodeBit[0])==(0) && (AppsFunc.EncodeBit[1])==(0) && (AppsFunc.EncodeBit[2])==(0) && (AppsFunc.EncodeBit[3])==(0) )
		{
			AppsFunc.InitEncodeBit( (243), (126), (135), (39) );
		}

		InitializeHttpProtocol( eventListener.Transform() );
		Connect();
	}

	//서버에 연결하기 위한 함수
	public static void Connect()
	{
		AppsHTTPPost post = new AppsHTTPPost();
		{
			post.Register( "app", AppsFunc.encode(GetEventListener().AppName) );
			post.Register( "Platform", Application.platform.ToString() );
		}
		Data().http.Post( Data().httpConnect, post );
	}

	//패킷을 수신받기 위한 함수
	public static void Receive( AppsParameter col )
	{
		if( col==null ) return;

		string compile = col.Get( "Compile" );

		if( Data().bPacketEventLog )
		{
			Debug.LogWarning( col );
		}

		if( onReceive!=null ) onReceive( compile, col );

		//---------------------------------------------------------------------------------------------------------------------------
		// 연결인증 (ConnectAuthenticode)
		//---------------------------------------------------------------------------------------------------------------------------
		if( AppsFunc.IsEquals((compile), "ConnectAuthenticode") )
		{
			AppsHTTPPost    post    = new AppsHTTPPost();
			{
				post.Register( "Authenticode", AppsFunc.encode(col.Get("Authenticode")) );
				Data().http.Post( (Data().httpConnectAuthenticode), (post) );
			}
			return;
		}

		//---------------------------------------------------------------------------------------------------------------------------
		// 연결 완료 (ConnectOK)
		//---------------------------------------------------------------------------------------------------------------------------
		if( AppsFunc.IsEquals((compile), "ConnectOK") )
		{
			//-----------------------------------------------------------------------------------------------------------------------
			// -
			//-----------------------------------------------------------------------------------------------------------------------
			if( Data().AutoUpdate )
			{
				Apps.Version();
			}

			//-----------------------------------------------------------------------------------------------------------------------
			// -
			//-----------------------------------------------------------------------------------------------------------------------
			(Data().bConnect)  = (true);
			if( (onConnect)!=(null) ) onConnect( col );

			//-----------------------------------------------------------------------------------------------------------------------
			// -
			//-----------------------------------------------------------------------------------------------------------------------
			return;
		}

		//---------------------------------------------------------------------------------------------------------------------------
		// 버전 확인 (Veresion)
		//---------------------------------------------------------------------------------------------------------------------------
		if( AppsFunc.IsEquals((compile), "Version") )
		{
			//-----------------------------------------------------------------------------------------------------------------------
			// -
			//-----------------------------------------------------------------------------------------------------------------------
			Version( col );

			//-----------------------------------------------------------------------------------------------------------------------
			// -
			//-----------------------------------------------------------------------------------------------------------------------
			return;
		}

		//업데이트 시간 동기화 (UpdateTime)
		if( AppsFunc.IsEquals( compile, "UpdateTime") )
		{
			UpdateTime( Convert.ToInt32(col.Get("UpdateTime")) );

#if UNITY_EDITOR
			if( col.Request()!=null && col.GetInt("LastTime")<=(0) )
			{
				Debug.Log("로컬 업데이트 정보를 갱신했습니다.");

				Library.CreateDirectory(Application.streamingAssetsPath);
				string filepath = Application.streamingAssetsPath+"/Update.json";
				File.WriteAllText( filepath, col.Request().GetDownloadHandler().text );
			}
#endif
			return;
		}

		//업데이트 정보 전송이 종료됨 (UpdateEnd)
		if( compile=="UpdateEnd" )
		{
			if( !Library.IsUrl(col.GetUrl()) )
			{
				Update( LoadUpdateTime() );
			}
			else
			{
				isUpdateEnd = true;

				if( Data().AutoLogin )
				{
					LocalizeLogin();
				}

				if( onUpdateEnd!=null )
				{
					onUpdateEnd( col );
				}
			}

			return;
		}

		//---------------------------------------------------------------------------------------------------------------------------
		// 로그인 완료 (Login)
		//---------------------------------------------------------------------------------------------------------------------------
		if( AppsFunc.IsEquals( (compile), "Login" ) )
		{
			//-----------------------------------------------------------------------------------------------------------------------
			// -
			//-----------------------------------------------------------------------------------------------------------------------
			if( (onLogin)!=(null) )
			{
				onLogin( col );
			}

			//-----------------------------------------------------------------------------------------------------------------------
			// -
			//-----------------------------------------------------------------------------------------------------------------------
			return;
		}

		//---------------------------------------------------------------------------------------------------------------------------
		// 로그인 종료 (LoginEnd)
		//---------------------------------------------------------------------------------------------------------------------------
		if( AppsFunc.IsEquals( (compile), "LoginEnd" ) )
		{
			//-----------------------------------------------------------------------------------------------------------------------
			// -
			//-----------------------------------------------------------------------------------------------------------------------
			(Data().bLogin)	= (true);

			//-----------------------------------------------------------------------------------------------------------------------
			// -
			//-----------------------------------------------------------------------------------------------------------------------
			if( (onLoginEnd)!=(null) )
			{
				onLoginEnd( col );
			}

			//-----------------------------------------------------------------------------------------------------------------------
			// -
			//-----------------------------------------------------------------------------------------------------------------------
			return;
		}

		//---------------------------------------------------------------------------------------------------------------------------
		// 로그인 완료 (LoginOK)
		//---------------------------------------------------------------------------------------------------------------------------
		if( AppsFunc.IsEquals( (compile), "SetMarket" ) )
		{
			(Data().bMarket)    = (true);
			return;
		}

		//---------------------------------------------------------------------------------------------------------------------------
		// 친구 정보 (onFriend)
		//---------------------------------------------------------------------------------------------------------------------------
		if( AppsFunc.IsEquals( (compile), "Friend" ) )
		{
			if( (onFriend)!=(null) ) onFriend( col );
			return;
		}

		//---------------------------------------------------------------------------------------------------------------------------
		// 레벨
		//---------------------------------------------------------------------------------------------------------------------------
		if( AppsFunc.IsEquals( (compile), "Level" ) )
		{
			if( (onLevel)!=(null) ) onLevel( col );
			return;
		}

		//---------------------------------------------------------------------------------------------------------------------------
		// 경험치
		//---------------------------------------------------------------------------------------------------------------------------
		if( AppsFunc.IsEquals( (compile), "Exp" ) )
		{
			if( (onExp)!=(null) ) onExp( col );
			return;
		}

		//---------------------------------------------------------------------------------------------------------------------------
		// 캐쉬 정보 (onCash)
		//---------------------------------------------------------------------------------------------------------------------------
		if( AppsFunc.IsEquals( (compile), "Cash" ) )
		{
			if( (onCash)!=(null) ) onCash( col );
			return;
		}

		//---------------------------------------------------------------------------------------------------------------------------
		// 포인트
		//---------------------------------------------------------------------------------------------------------------------------
		if( AppsFunc.IsEquals( (compile), "Point" ) )
		{
			if( (onPoint)!=(null) ) onPoint( col );
			return;
		}

		//---------------------------------------------------------------------------------------------------------------------------
		// 저장소 (onMemorize)
		//---------------------------------------------------------------------------------------------------------------------------
		if( AppsFunc.IsEquals( (compile), "Memorize" ) )
		{
			if( (onMemorize)!=(null) ) onMemorize( col );
			return;
		}

		//---------------------------------------------------------------------------------------------------------------------------
		// 입고 (onStorageIn)
		//---------------------------------------------------------------------------------------------------------------------------
		if( AppsFunc.IsEquals( (compile), "Storage" ) )
		{
			if( (onStorage)!=(null) ) onStorage( col );
			return;
		}

		//---------------------------------------------------------------------------------------------------------------------------
		// 구매 (onBuy)
		//---------------------------------------------------------------------------------------------------------------------------
		if( AppsFunc.IsEquals( (compile), "Buy" ) )
		{
			if( (onBuy)!=(null) ) onBuy( col );
			return;
		}

		//---------------------------------------------------------------------------------------------------------------------------
		// 임의 아이디를 등록함 (LocalizeRegister)
		//---------------------------------------------------------------------------------------------------------------------------
		if( AppsFunc.IsEquals( (compile), "LocalizeRegister" ) )
		{
			LocalizeUpdate( col.Get("id") );
			return;
		}

		//---------------------------------------------------------------------------------------------------------------------------
		// 임의 아이디를 찾을 수 없음 (LocalizeIDNotFound)
		//---------------------------------------------------------------------------------------------------------------------------
		if( AppsFunc.IsEquals( (compile), "LocalizeIDNotFound" ) )
		{
			LocalizeRegister();
			return;
		}

		//---------------------------------------------------------------------------------------------------------------------------
		// 실패함 (Failed)
		//---------------------------------------------------------------------------------------------------------------------------
		if( AppsFunc.IsEquals( (compile), "Failed" ) )
		{
			if( (onFailed)!=(null) ) onFailed( col );
			return;
		}

		//메세지 출력
		if( AppsFunc.IsEquals( compile, "Echo" ) )
		{
			if( onEcho!=null ) onEcho( col );
			return;
		}

		//아이템 정보를 전송받음
		if( AppsFunc.IsEquals( compile, "ItemState" ) )
		{
#if UNITY_EDITOR
			Debug.Log(col);
#endif

			if( eventItemState(col) ) return;
			if( onItemState!=null ) onItemState( col );
			return;
		}

		//---------------------------------------------------------------------------------------------------------------------------
		// 언어 정보를 전송받음
		//---------------------------------------------------------------------------------------------------------------------------
		if( AppsFunc.IsEquals((compile), "Language") )
		{
			onLanguage( col );
			return;
		}

		//---------------------------------------------------------------------------------------------------------------------------
		// 클라이언트 메세지를 전송받음
		//---------------------------------------------------------------------------------------------------------------------------
		if( AppsFunc.IsEquals((compile), "ClientMessage") )
		{
			if( (onClientMessage)!=(null) ) onClientMessage( col );
			return;
		}

		//---------------------------------------------------------------------------------------------------------------------------
		// 디버깅 메세지를 전송받음
		//---------------------------------------------------------------------------------------------------------------------------
		if( AppsFunc.IsEquals((compile), "DebugMessage") )
		{
			if( (onDebugMessage)!=(null) ) onDebugMessage( col );
			return;
		}

		//---------------------------------------------------------------------------------------------------------------------------
		// 플랫폼 정보를 전송받음
		//---------------------------------------------------------------------------------------------------------------------------
		if( AppsFunc.IsEquals((compile), "PlatformInfo") )
		{
			if( (onPlatformInfo)!=(null) ) onPlatformInfo( col );
			return;
		}

		//---------------------------------------------------------------------------------------------------------------------------
		// 시간 정보 (onTime)
		//---------------------------------------------------------------------------------------------------------------------------
		if( AppsFunc.IsEquals((compile), "Time") )
		{
			if( (onTime)!=(null) ) onTime( col );
			return;
		}

		//---------------------------------------------------------------------------------------------------------------------------
		// -
		//---------------------------------------------------------------------------------------------------------------------------
	}

	// HTTP 프로토콜을 초기화 하기 위한 함수
	public static void InitializeHttpProtocol( Transform transform )
	{
		if( transform==null ) return;

		if( Data().http==null )
		{
			if( transform.GetComponent(typeof(AppsHttpProtocol)) )
			{
				Data().http = transform.GetComponent(typeof(AppsHttpProtocol)) as AppsHttpProtocol;
			}
			else
			{
				Data().http = transform.gameObject.AddComponent(typeof(AppsHttpProtocol)) as AppsHttpProtocol;
			}
		}
	}

	//-------------------------------------------------------------------------------------------------------------------------------
	// 로그를 설정하기 위한 함수
	//-------------------------------------------------------------------------------------------------------------------------------
	public static void SetLog( bool log )
	{
		//---------------------------------------------------------------------------------------------------------------------------
		// -
		//---------------------------------------------------------------------------------------------------------------------------
		(Data().bLog)      = (log);

		//---------------------------------------------------------------------------------------------------------------------------
		// -
		//---------------------------------------------------------------------------------------------------------------------------
	}

	//-------------------------------------------------------------------------------------------------------------------------------
	// 패킷 이벤트 로그를 설정하기 위한 함수
	//-------------------------------------------------------------------------------------------------------------------------------
	public static void SetPacketEventLog( bool value )
	{
		//---------------------------------------------------------------------------------------------------------------------------
		// -
		//---------------------------------------------------------------------------------------------------------------------------
		(Data().bPacketEventLog)   = (value);

		//---------------------------------------------------------------------------------------------------------------------------
		// -
		//---------------------------------------------------------------------------------------------------------------------------
	}

	//-------------------------------------------------------------------------------------------------------------------------------
	// 로그인을 처리하기 위한 함수
	//-------------------------------------------------------------------------------------------------------------------------------
	public static void Login( APPS_LINKAGE linkage, string id, string name, bool integrate=(true) )
	{
		//---------------------------------------------------------------------------------------------------------------------------
		// -
		//---------------------------------------------------------------------------------------------------------------------------
		Login( (linkage.ToString()), (id), (name), (integrate) );

		//---------------------------------------------------------------------------------------------------------------------------
		// -
		//---------------------------------------------------------------------------------------------------------------------------
	}

	//-------------------------------------------------------------------------------------------------------------------------------
	// 로그인을 처리하기 위한 함수
	//-------------------------------------------------------------------------------------------------------------------------------
	public static void Login( string linkage, string id, string name, bool integrate=(true) )
	{
		//---------------------------------------------------------------------------------------------------------------------------
		// -
		//---------------------------------------------------------------------------------------------------------------------------
		if( (linkage)==(null) ) return;
		if( (id)==(null) ) return;
		if( (name)==(null) ) (name) = (id);

		//---------------------------------------------------------------------------------------------------------------------------
		// -
		//---------------------------------------------------------------------------------------------------------------------------
		Hashtable   hash        = new Hashtable();
		{
			hash.Add( "linkage",    (linkage) );
			hash.Add( "id",         (id) );
			hash.Add( "name",       (name) );
			hash.Add( "language",   (Application.systemLanguage.ToString()) );
			hash.Add( "integrate",  (integrate.ToString()) );
		}

		//---------------------------------------------------------------------------------------------------------------------------
		// -
		//---------------------------------------------------------------------------------------------------------------------------
		AppsHTTPPost    post    = new AppsHTTPPost();
		{
			post.Register( "hash", AppsFunc.encode(SemsJSONExtensions.toJson(hash)) );
		}
		Data().http.Post( (Data().httpLogin), (post) );

		//---------------------------------------------------------------------------------------------------------------------------
		// -
		//---------------------------------------------------------------------------------------------------------------------------
	}

	//-------------------------------------------------------------------------------------------------------------------------------
	// 서버에 연결되어 있는지 확인하기 위한 함수
	//-------------------------------------------------------------------------------------------------------------------------------
	public static bool IsConnect()
	{
		//---------------------------------------------------------------------------------------------------------------------------
		// -
		//---------------------------------------------------------------------------------------------------------------------------
		return (Data().bConnect);

		//---------------------------------------------------------------------------------------------------------------------------
		// -
		//---------------------------------------------------------------------------------------------------------------------------
	}

	//-------------------------------------------------------------------------------------------------------------------------------
	// 로그인되어 있는지 확인하기 위한 함수
	//-------------------------------------------------------------------------------------------------------------------------------
	public static bool IsLogin()
	{
		//---------------------------------------------------------------------------------------------------------------------------
		// -
		//---------------------------------------------------------------------------------------------------------------------------
		return (Data().bLogin);

		//---------------------------------------------------------------------------------------------------------------------------
		// -
		//---------------------------------------------------------------------------------------------------------------------------
	}

	//-------------------------------------------------------------------------------------------------------------------------------
	// 마켓에 로그인되어 있는지 확인하기 위한 함수
	//-------------------------------------------------------------------------------------------------------------------------------
	public static bool IsMarketLogin()
	{
		//---------------------------------------------------------------------------------------------------------------------------
		// -
		//---------------------------------------------------------------------------------------------------------------------------
		return (Data().bMarket);

		//---------------------------------------------------------------------------------------------------------------------------
		// -
		//---------------------------------------------------------------------------------------------------------------------------
	}

	//-------------------------------------------------------------------------------------------------------------------------------
	// 체크인되어 있는지 확인하기 위한 함수
	//-------------------------------------------------------------------------------------------------------------------------------
	public static bool IsCheckIn()
	{
		//---------------------------------------------------------------------------------------------------------------------------
		// -
		//---------------------------------------------------------------------------------------------------------------------------
		if( IsLogin() || IsMarketLogin() )
		{
			return true;
		}

		//---------------------------------------------------------------------------------------------------------------------------
		// -
		//---------------------------------------------------------------------------------------------------------------------------
		return false;
	}

	//-------------------------------------------------------------------------------------------------------------------------------
	// 자동 업데이트를 설정하기 위한 함수
	//-------------------------------------------------------------------------------------------------------------------------------
	public static void SetAutoUpdate( bool autoUpdate )
	{
		//---------------------------------------------------------------------------------------------------------------------------
		// -
		//---------------------------------------------------------------------------------------------------------------------------
		(Data().AutoUpdate)	= (autoUpdate);

		//---------------------------------------------------------------------------------------------------------------------------
		// -
		//---------------------------------------------------------------------------------------------------------------------------
	}

	//-------------------------------------------------------------------------------------------------------------------------------
	// 자동 로그인을 설정하기 위한 함수
	//-------------------------------------------------------------------------------------------------------------------------------
	public static void SetAutoLogin( bool autoLogin )
	{
		//---------------------------------------------------------------------------------------------------------------------------
		// -
		//---------------------------------------------------------------------------------------------------------------------------
		(Data().AutoLogin)	= (autoLogin);

		//---------------------------------------------------------------------------------------------------------------------------
		// -
		//---------------------------------------------------------------------------------------------------------------------------
	}

	//-------------------------------------------------------------------------------------------------------------------------------
	// 점수 정보를 처리하기 위한 함수
	//-------------------------------------------------------------------------------------------------------------------------------
	public static void Score( int score )
	{
		//---------------------------------------------------------------------------------------------------------------------------
		// -
		//---------------------------------------------------------------------------------------------------------------------------
		AppsHTTPPost    post    = new AppsHTTPPost();
		{
			post.Register( "score",     AppsFunc.encode(score.ToString()) );
		}
		Data().http.Post( (Data().httpScore), (post) );

		//---------------------------------------------------------------------------------------------------------------------------
		// -
		//---------------------------------------------------------------------------------------------------------------------------
	}

	//-------------------------------------------------------------------------------------------------------------------------------
	// 아이템 구매를 처리하기 위한 함수
	//-------------------------------------------------------------------------------------------------------------------------------
	public static void Purchase( APPS_LINKAGE market, string marketId, string purchase, string receipt, APPS_PURCHASE_TYPE type, APPS_CURRENCY currency, float price )
	{
		//---------------------------------------------------------------------------------------------------------------------------
		// -
		//---------------------------------------------------------------------------------------------------------------------------
//		if( (marketId)==(null) ) return;			//(NULL)값을 허용함
		if( (purchase)==(null) ) return;
//		if( (receipt)==(null) ) return;		//(NULL)값을 허용함

		//---------------------------------------------------------------------------------------------------------------------------
		// -
		//---------------------------------------------------------------------------------------------------------------------------
		AppsHTTPPost    post    = new AppsHTTPPost();
		{
			post.Register( "market",    AppsFunc.encode(market.ToString()) );
			post.Register( "marketId",	AppsFunc.encode(marketId) );
			post.Register( "purchase",  AppsFunc.encode(purchase) );
			post.Register( "receipt",	AppsFunc.encode(receipt) );
			post.Register( "type",      AppsFunc.encode(type.ToString()) );
			post.Register( "currency",  AppsFunc.encode(currency.ToString()) );
			post.Register( "price",     AppsFunc.encode(price.ToString()) );
			post.Register( "language",  AppsFunc.encode(Application.systemLanguage.ToString()) );
		}
		Data().http.Post( (Data().httpPurchase), (post) );

		//---------------------------------------------------------------------------------------------------------------------------
		// -
		//---------------------------------------------------------------------------------------------------------------------------
	}

	//-------------------------------------------------------------------------------------------------------------------------------
	// 캐쉬 정보를 얻기 위한 함수
	//-------------------------------------------------------------------------------------------------------------------------------
	public static void GetCash()
	{
		//---------------------------------------------------------------------------------------------------------------------------
		// -
		//---------------------------------------------------------------------------------------------------------------------------
		AppsHTTPPost    post    = new AppsHTTPPost();
		Data().http.Post( (Data().httpGetCash), (post) );

		//---------------------------------------------------------------------------------------------------------------------------
		// -
		//---------------------------------------------------------------------------------------------------------------------------
	}

	//-------------------------------------------------------------------------------------------------------------------------------
	// 인벤토리를 입고하기 위한 함수
	//-------------------------------------------------------------------------------------------------------------------------------
	public static void StorageIn( string instance, string item, int count )
	{
		//---------------------------------------------------------------------------------------------------------------------------
		// -
		//---------------------------------------------------------------------------------------------------------------------------
		if( (instance)==(null) ) (instance) = "";
		if( (item)==(null) ) return;
		if( (count)<(1) ) return;

		//---------------------------------------------------------------------------------------------------------------------------
		// -
		//---------------------------------------------------------------------------------------------------------------------------
		AppsHTTPPost    post    = new AppsHTTPPost();
		{
			post.Register( "instance",  AppsFunc.encode(instance.ToString()) );
			post.Register( "item",      AppsFunc.encode(item.ToString()) );
			post.Register( "count",     AppsFunc.encode(count.ToString()) );
		}
		Data().http.Post( (Data().httpStorageIn), (post) );

		//---------------------------------------------------------------------------------------------------------------------------
		// -
		//---------------------------------------------------------------------------------------------------------------------------
	}

	//-------------------------------------------------------------------------------------------------------------------------------
	// 인벤토리를 입고하기 위한 함수
	//-------------------------------------------------------------------------------------------------------------------------------
	public static void StorageOut( string instance, string item, int count )
	{
		//---------------------------------------------------------------------------------------------------------------------------
		// -
		//---------------------------------------------------------------------------------------------------------------------------
		if( (instance)==(null) ) (instance) = "";
		if( (item)==(null) ) return;
		if( (count)<(1) ) return;

		//---------------------------------------------------------------------------------------------------------------------------
		// -
		//---------------------------------------------------------------------------------------------------------------------------
		AppsHTTPPost    post    = new AppsHTTPPost();
		{
			post.Register( "instance",  AppsFunc.encode(instance.ToString()) );
			post.Register( "item",      AppsFunc.encode(item.ToString()) );
			post.Register( "count",     AppsFunc.encode(count.ToString()) );
		}
		Data().http.Post( (Data().httpStorageOut), (post) );

		//---------------------------------------------------------------------------------------------------------------------------
		// -
		//---------------------------------------------------------------------------------------------------------------------------
	}

	//-------------------------------------------------------------------------------------------------------------------------------
	// 마켓 정보를 처리하기 위한 함수
	//-------------------------------------------------------------------------------------------------------------------------------
	public static void MarketLogin( APPS_LINKAGE market, string id )
	{
		//---------------------------------------------------------------------------------------------------------------------------
		// -
		//---------------------------------------------------------------------------------------------------------------------------
		if( (market)==(APPS_LINKAGE.NOTHING) ) return;
		if( (id)==(null) ) return;

		//---------------------------------------------------------------------------------------------------------------------------
		// -
		//---------------------------------------------------------------------------------------------------------------------------
		AppsHTTPPost    post    = new AppsHTTPPost();
		{
			post.Register( "market",    AppsFunc.encode(market.ToString()) );
			post.Register( "id",        AppsFunc.encode(id.ToString()) );
			post.Register( "language",  AppsFunc.encode(Application.systemLanguage.ToString()) );
		}
		Data().http.Post( (Data().httpMarketLogin), (post) );
	
		//---------------------------------------------------------------------------------------------------------------------------
		// -
		//---------------------------------------------------------------------------------------------------------------------------
	}

	//-------------------------------------------------------------------------------------------------------------------------------
	// 메모리를 기억하기 위한 함수
	//-------------------------------------------------------------------------------------------------------------------------------
	public static void Memorize( string column, string value )
	{
		//---------------------------------------------------------------------------------------------------------------------------
		// -
		//---------------------------------------------------------------------------------------------------------------------------
		if( (column)==(null) ) return;
		if( (value)==(null) ) (value) = "";

		//---------------------------------------------------------------------------------------------------------------------------
		// -
		//---------------------------------------------------------------------------------------------------------------------------
		AppsHTTPPost    post    = new AppsHTTPPost();
		{
			post.Register( "column",	AppsFunc.encode(column) );
			post.Register( "value",		AppsFunc.encode(Func.Urlencode(value)) );
		}
		Data().http.Post( (Data().httpMemorize), (post) );

		//---------------------------------------------------------------------------------------------------------------------------
		// -
		//---------------------------------------------------------------------------------------------------------------------------
	}

	//-------------------------------------------------------------------------------------------------------------------------------
	// 메모리를 기억하기 위한 함수
	//-------------------------------------------------------------------------------------------------------------------------------
	public static void GetMemorize( string column )
	{
		//---------------------------------------------------------------------------------------------------------------------------
		// -
		//---------------------------------------------------------------------------------------------------------------------------
		if( (column)==(null) ) return;

		//---------------------------------------------------------------------------------------------------------------------------
		// -
		//---------------------------------------------------------------------------------------------------------------------------
		AppsHTTPPost    post    = new AppsHTTPPost();
		{
			post.Register( "column",    AppsFunc.encode(column.ToString()) );
		}
		Data().http.Post( (Data().httpGetMemorize), (post) );

		//---------------------------------------------------------------------------------------------------------------------------
		// -
		//---------------------------------------------------------------------------------------------------------------------------
	}

	//패킷을 처리하기 하기 위한 함수
	public static void _Request( string file, AppsHTTPPost post=null )
	{
		if( !Library.Is(file) ) return;
//      if( post==null ) return; //(NULL)값을 허용함

		Data().http.Post( GetEventListener().ServerAddr+file+".php", post );
	}

	//패킷을 처리하기 하기 위한 함수
	public static void Request( string file, AppsHTTPPost post=null )
	{
		if( !Library.Is(file) ) return;
//      if( post==null ) return; //(NULL)값을 허용함

		Data().http.Post( GetEventListener().ServerRoot+GetEventListener().Root+"/"+file+".php", post );
	}

	//루트 경로를 얻기 위한 함수
	static string GetRoot( string address )
	{
		if( !Library.Is(address) ) return null;

		if( address.StartsWith("https://") )
		{
			string[] explode = address.Replace("https://", "").Split( '/' );

			if( explode.Length>0 )
			{
				return "https://"+explode[0]+"/";
			}
		}
		else
		{
			string[] explode = address.Replace("http://", "").Split( '/' );

			if( explode.Length>0 )
			{
				return "http://"+explode[0]+"/";
			}
		}

		return null;
	}

	//-------------------------------------------------------------------------------------------------------------------------------
	// 임의 로그인 아이디의 파일 경로를 얻기 위한 함수
	//-------------------------------------------------------------------------------------------------------------------------------
	static string GetLocalizeFilePath()
	{
		//---------------------------------------------------------------------------------------------------------------------------
		// -
		//---------------------------------------------------------------------------------------------------------------------------
		return (Application.persistentDataPath)+"/localize.id";

		//---------------------------------------------------------------------------------------------------------------------------
		// -
		//---------------------------------------------------------------------------------------------------------------------------
	}

	//-------------------------------------------------------------------------------------------------------------------------------
	// 마지막 업데이트 시간을 얻기 위한 함수
	//-------------------------------------------------------------------------------------------------------------------------------
	static string GetLastUpdateTimeFilePath()
	{
		//---------------------------------------------------------------------------------------------------------------------------
		// -
		//---------------------------------------------------------------------------------------------------------------------------
		return (Application.persistentDataPath)+"/LastUpdate";

		//---------------------------------------------------------------------------------------------------------------------------
		// -
		//---------------------------------------------------------------------------------------------------------------------------
	}

	//-------------------------------------------------------------------------------------------------------------------------------
	// 마지막 업데이트 시간을 얻기 위한 함수
	//-------------------------------------------------------------------------------------------------------------------------------
	static string GetSetupVersionFilePath()
	{
		//---------------------------------------------------------------------------------------------------------------------------
		// -
		//---------------------------------------------------------------------------------------------------------------------------
		return (Application.persistentDataPath)+"/setupVersion";

		//---------------------------------------------------------------------------------------------------------------------------
		// -
		//---------------------------------------------------------------------------------------------------------------------------
	}

	//-------------------------------------------------------------------------------------------------------------------------------
	// 마지막 업데이트 시간을 얻기 위한 함수
	//-------------------------------------------------------------------------------------------------------------------------------
	static string GetVersionFilePath()
	{
		//---------------------------------------------------------------------------------------------------------------------------
		// -
		//---------------------------------------------------------------------------------------------------------------------------
		return (Application.persistentDataPath)+"/version";

		//---------------------------------------------------------------------------------------------------------------------------
		// -
		//---------------------------------------------------------------------------------------------------------------------------
	}

	//-------------------------------------------------------------------------------------------------------------------------------
	// 임의 로그인을 처리하기 위한 함수
	//-------------------------------------------------------------------------------------------------------------------------------
	public static void LocalizeLogin()
	{
		//---------------------------------------------------------------------------------------------------------------------------
		// -
		//---------------------------------------------------------------------------------------------------------------------------
		if( IsLogin() )
		{
			Debug.LogWarning( "이미 로그인되어 있습니다." );
			return;
		}

		//---------------------------------------------------------------------------------------------------------------------------
		// -
		//---------------------------------------------------------------------------------------------------------------------------
		string      filepath    = GetLocalizeFilePath();

		//---------------------------------------------------------------------------------------------------------------------------
		// -
		//---------------------------------------------------------------------------------------------------------------------------
		if( File.Exists(filepath) )
		{
			//-----------------------------------------------------------------------------------------------------------------------
			// -
			//-----------------------------------------------------------------------------------------------------------------------
			LocalizeLogin( LoadLocalizeID(filepath) );

			//-----------------------------------------------------------------------------------------------------------------------
			// -
			//-----------------------------------------------------------------------------------------------------------------------
		}
		else
		{
			//-----------------------------------------------------------------------------------------------------------------------
			// -
			//-----------------------------------------------------------------------------------------------------------------------
			LocalizeRegister();

			//-----------------------------------------------------------------------------------------------------------------------
			// -
			//-----------------------------------------------------------------------------------------------------------------------
		}

		//---------------------------------------------------------------------------------------------------------------------------
		// -
		//---------------------------------------------------------------------------------------------------------------------------
	}

	//-------------------------------------------------------------------------------------------------------------------------------
	// 아이디 정보를 업데이트 하기 위한 함수
	//-------------------------------------------------------------------------------------------------------------------------------
	static string LoadLocalizeID( string filepath )
	{
		//---------------------------------------------------------------------------------------------------------------------------
		// -
		//---------------------------------------------------------------------------------------------------------------------------
		if( (filepath)==(null) ) (filepath) = GetLocalizeFilePath();
		if( (filepath)==(null) ) return (null);
		
		//---------------------------------------------------------------------------------------------------------------------------
		// -
		//---------------------------------------------------------------------------------------------------------------------------
		string          id  = (null);

		//---------------------------------------------------------------------------------------------------------------------------
		// -
		//---------------------------------------------------------------------------------------------------------------------------
		StreamReader    streamReader    = File.OpenText( filepath );
		if( (streamReader)!=(null) )
		{
			(id)        = streamReader.ReadToEnd();
		}
		streamReader.Close();

		//---------------------------------------------------------------------------------------------------------------------------
		// -
		//---------------------------------------------------------------------------------------------------------------------------
		return (id);
	}

	//-------------------------------------------------------------------------------------------------------------------------------
	// 아이디 정보를 업데이트 하기 위한 함수
	//-------------------------------------------------------------------------------------------------------------------------------
	static void LocalizeUpdate( string id )
	{
		//---------------------------------------------------------------------------------------------------------------------------
		// -
		//---------------------------------------------------------------------------------------------------------------------------
		if( (id)==(null) ) return;
		
		//---------------------------------------------------------------------------------------------------------------------------
		// -
		//---------------------------------------------------------------------------------------------------------------------------
		AppsFunc.Log( "(LocalizeRegister : "+(id)+")" );

		//---------------------------------------------------------------------------------------------------------------------------
		// -
		//---------------------------------------------------------------------------------------------------------------------------
		StreamWriter    streamWriter    = File.CreateText( GetLocalizeFilePath() );
		if( (streamWriter)!=(null) )
		{
			streamWriter.Write(id);
		}
		streamWriter.Close();

		//---------------------------------------------------------------------------------------------------------------------------
		// -
		//---------------------------------------------------------------------------------------------------------------------------
	}

	//-------------------------------------------------------------------------------------------------------------------------------
	// 메모리를 기억하기 위한 함수
	//-------------------------------------------------------------------------------------------------------------------------------
	static void LocalizeRegister()
	{
		//---------------------------------------------------------------------------------------------------------------------------
		// -
		//---------------------------------------------------------------------------------------------------------------------------
		Data().http.Post( Data().httpLocalizeRegister );

		//---------------------------------------------------------------------------------------------------------------------------
		// -
		//---------------------------------------------------------------------------------------------------------------------------
	}

	//-------------------------------------------------------------------------------------------------------------------------------
	// 메모리를 기억하기 위한 함수
	//-------------------------------------------------------------------------------------------------------------------------------
	static void LocalizeLogin( string id )
	{
		//---------------------------------------------------------------------------------------------------------------------------
		// -
		//---------------------------------------------------------------------------------------------------------------------------
		if( (id)==(null) ) return;

		//---------------------------------------------------------------------------------------------------------------------------
		// -
		//---------------------------------------------------------------------------------------------------------------------------
		AppsHTTPPost    post    = new AppsHTTPPost();
		{
			post.Register( "id", AppsFunc.encode(id) );
		}
		Data().http.Post( (Data().httpLocalizeLogin), (post) );

		//---------------------------------------------------------------------------------------------------------------------------
		// -
		//---------------------------------------------------------------------------------------------------------------------------
	}

	//업데이트 정보를 요청하기 위한 함수
	public static void Update( ulong LastUpdateTime )
	{
		AppsHTTPPost post = new AppsHTTPPost();
		{
			post.Register( "LastTime", AppsFunc.encode(LastUpdateTime.ToString()) );
		}
		_Request( "Update", post );
	}

	//-------------------------------------------------------------------------------------------------------------------------------
	// 업데이트 시간을 기록하기 위한 함수
	//-------------------------------------------------------------------------------------------------------------------------------
	static void UpdateTime( int UpdateTime )
	{
		//---------------------------------------------------------------------------------------------------------------------------
		// -
		//---------------------------------------------------------------------------------------------------------------------------
		AppsFunc.Log( "(LastUpdate : "+(UpdateTime)+")" );

		//---------------------------------------------------------------------------------------------------------------------------
		// -
		//---------------------------------------------------------------------------------------------------------------------------
		StreamWriter    streamWriter    = File.CreateText( GetLastUpdateTimeFilePath() );
		if( (streamWriter)!=(null) )
		{
			streamWriter.Write(UpdateTime);
		}
		streamWriter.Close();

		//---------------------------------------------------------------------------------------------------------------------------
		// -
		//---------------------------------------------------------------------------------------------------------------------------
	}

	//-------------------------------------------------------------------------------------------------------------------------------
	// 아이템 정보를 얻기 위한 함수
	//-------------------------------------------------------------------------------------------------------------------------------
	public static void Rank( string division, int Score, float fTime )
	{
		//---------------------------------------------------------------------------------------------------------------------------
		// -
		//---------------------------------------------------------------------------------------------------------------------------
		if( (division)==(null) ) return;

		//---------------------------------------------------------------------------------------------------------------------------
		// -
		//---------------------------------------------------------------------------------------------------------------------------
		int     Time            = (int)(fTime);

		int     milliSecond     = (int)( ((fTime) - ((int)fTime)) * (60) );

		//---------------------------------------------------------------------------------------------------------------------------
		// -
		//---------------------------------------------------------------------------------------------------------------------------
		AppsHTTPPost    post    = new AppsHTTPPost();
		{
			post.Register( "division", (division) );
			post.Register( "score", (Score.ToString()) );
			post.Register( "time", (Time.ToString()) );
			post.Register( "milliSecond", (milliSecond.ToString()) );
		}
		Data().http.Post( (Data().httpRank), (post) );

		//---------------------------------------------------------------------------------------------------------------------------
		// -
		//---------------------------------------------------------------------------------------------------------------------------
	}

	//-------------------------------------------------------------------------------------------------------------------------------
	// 아이템 정보를 얻기 위한 함수
	//-------------------------------------------------------------------------------------------------------------------------------
	public static void LoadRank( string division )
	{
		//---------------------------------------------------------------------------------------------------------------------------
		// -
		//---------------------------------------------------------------------------------------------------------------------------
		AppsHTTPPost    post    = new AppsHTTPPost();
		post.Register( "division", (division) );
		Data().http.Post( (Data().httpLoadRank), (post) );

		//---------------------------------------------------------------------------------------------------------------------------
		// -
		//---------------------------------------------------------------------------------------------------------------------------
	}

	//-------------------------------------------------------------------------------------------------------------------------------
	// 버전을 확인하기 위한 함수
	//-------------------------------------------------------------------------------------------------------------------------------
	public static void Version()
	{
		//---------------------------------------------------------------------------------------------------------------------------
		// -
		//---------------------------------------------------------------------------------------------------------------------------
		Data().http.Post( Data().httpVersion );

		//---------------------------------------------------------------------------------------------------------------------------
		// -
		//---------------------------------------------------------------------------------------------------------------------------
	}

	//-------------------------------------------------------------------------------------------------------------------------------
	// 업데이트 시간을 불러오기 위한 함수
	//-------------------------------------------------------------------------------------------------------------------------------
	static float LoadVersion()
	{
		//---------------------------------------------------------------------------------------------------------------------------
		// -
		//---------------------------------------------------------------------------------------------------------------------------
		if( !File.Exists(GetVersionFilePath()) ) return (0);

		//---------------------------------------------------------------------------------------------------------------------------
		// -
		//---------------------------------------------------------------------------------------------------------------------------
		float	version		= (0);

		//---------------------------------------------------------------------------------------------------------------------------
		// -
		//---------------------------------------------------------------------------------------------------------------------------
		StreamReader streamReader = File.OpenText( GetVersionFilePath() );
		if( (streamReader)!=(null) )
		{
			string value = streamReader.ReadToEnd();
			if( !Library.Is(value) )
			{
				(version) = (0);
			}
			else
			{
				(version) = Convert.ToSingle( value );
			}
		}
		streamReader.Close();

		//---------------------------------------------------------------------------------------------------------------------------
		// -
		//---------------------------------------------------------------------------------------------------------------------------
		return (version);
	}

	//-------------------------------------------------------------------------------------------------------------------------------
	// 버전 정보를 저장하기 위한 함수
	//-------------------------------------------------------------------------------------------------------------------------------
	static void SaveVersion( string version )
	{
		//---------------------------------------------------------------------------------------------------------------------------
		// -
		//---------------------------------------------------------------------------------------------------------------------------
		if( (version)==(null) ) return;

		//---------------------------------------------------------------------------------------------------------------------------
		// -
		//---------------------------------------------------------------------------------------------------------------------------
		StreamWriter    streamWriter    = File.CreateText( GetVersionFilePath() );
		if( (streamWriter)!=(null) )
		{
			streamWriter.Write(version);
		}
		streamWriter.Close();

		//---------------------------------------------------------------------------------------------------------------------------
		// -
		//---------------------------------------------------------------------------------------------------------------------------
	}

	//-------------------------------------------------------------------------------------------------------------------------------
	// 업데이트 시간을 불러오기 위한 함수
	//-------------------------------------------------------------------------------------------------------------------------------
	static string LoadSetupVersion()
	{
		//---------------------------------------------------------------------------------------------------------------------------
		// -
		//---------------------------------------------------------------------------------------------------------------------------
		if( !File.Exists(GetSetupVersionFilePath()) ) return (null);

		//---------------------------------------------------------------------------------------------------------------------------
		// -
		//---------------------------------------------------------------------------------------------------------------------------
		string          version         = (null);

		//---------------------------------------------------------------------------------------------------------------------------
		// -
		//---------------------------------------------------------------------------------------------------------------------------
		StreamReader    streamReader    = File.OpenText( GetSetupVersionFilePath() );
		if( (streamReader)!=(null) )
		{
			(version)   = streamReader.ReadToEnd();
		}
		streamReader.Close();

		//---------------------------------------------------------------------------------------------------------------------------
		// -
		//---------------------------------------------------------------------------------------------------------------------------
		return (version);
	}

	//-------------------------------------------------------------------------------------------------------------------------------
	// 버전 정보를 저장하기 위한 함수
	//-------------------------------------------------------------------------------------------------------------------------------
	static void SaveSetupVersion( string version )
	{
		//---------------------------------------------------------------------------------------------------------------------------
		// -
		//---------------------------------------------------------------------------------------------------------------------------
		if( (version)==(null) ) return;

		//---------------------------------------------------------------------------------------------------------------------------
		// -
		//---------------------------------------------------------------------------------------------------------------------------
		StreamWriter    streamWriter    = File.CreateText( GetSetupVersionFilePath() );
		if( (streamWriter)!=(null) )
		{
			streamWriter.Write(version);
		}
		streamWriter.Close();

		//---------------------------------------------------------------------------------------------------------------------------
		// -
		//---------------------------------------------------------------------------------------------------------------------------
	}

	//버전 정보를 전송받음
	static void Version( AppsParameter col )
	{
		if( col==null ) return;

		//캐시에서 정보를 불러옴
		AppsItemListenersLoad();

		if( Platform.IsRuntime() && LoadUpdateTime()<=0f )
		{
			//로컬 업데이트
			LocalUpdate();
		}
		else
		if( Platform.IsEditor() && IsNotUpdateJson() )
		{
			//로컬 업데이트 파일이 없으므로,
			//서버에 전체 업데이트를 요청함
			SaveVersion(col.Get("Version"));
			Apps.Update( 0 );
		}
		else
		if( GetEventListener().fVersion>=col.GetFloat("Version") && LoadVersion()!=col.GetFloat("Version") )
		{
			//어플리케이션 버전이 다를 경우,
			//로컬 패치로만 업데이트될 것이므로,
			//서버를 통한 전체 업데이트는 진행하지 않음
			SaveVersion(col.Get("Version"));

			//로컬 업데이트
			LocalUpdate();
		}
		else
		if( Platform.IsRuntime() && File.GetLastWriteTime(Application.dataPath).ToString()!=LoadSetupVersion() )
		{
			//새로 설치된 앱,
			//로컬 패치로만 업데이트될 것이므로,
			//서버를 통한 전체 업데이트는 진행하지 않음	
			SaveSetupVersion( File.GetLastWriteTime(Application.dataPath).ToString() );

			//로컬 업데이트
			LocalUpdate();
		}
		else
		{
			Apps.Update( LoadUpdateTime() );
		}

		//버전이 다릅니다.
		if( GetEventListener().fVersion!=col.GetFloat("Version") )
		{
			if( onVersion!=null ) onVersion( col );
		}
	}

	//로컬 업데이트 파일을 확인하기 위한 함수
	public static bool IsNotUpdateJson()
	{
		if( !Library.IsFile(Application.streamingAssetsPath+"/Update.json") )
		{
			return true;
		}

		return false;
	}

	//웹 서버 연결에 실패했을 때 반응하기 위한 함수
	public static bool HttpError( UnityWebRequest www )
	{
		if( www==null ) return false;

		if( www.url==Data().httpConnect )
		{
			if( onConnectFailed!=null )
			{
				onConnectFailed();
				return true;
			}
		}

		return false;
	}

	//올바르지 않은 웹 프로토콜 통신일 때 반응하기 위한 함수
	public static void ProtocolError( UnityWebRequest www )
	{
		if( www==null ) return;

		if( onProtocolError!=null )
		{
			onProtocolError( www );
		}
	}

	public static void AutoUpdate( bool value )
	{
		Data().AutoUpdate = value;
	}

	//아이템 정보를 처리하기 위한 함수
	public static bool eventItemState( AppsParameter col )
	{
		if( col==null ) return false;

		string ClassName = col.Get("class");
		string TypeName = col.Get("type");

		//타입이 지정된 인터페이스가 있을 경우, 개별 인터페이스에 입력함
		foreach( AppsItemListener listener in Data().AppsItemListeners )
		{
			if( listener.GetClassName()==ClassName && Library.Is(listener.GetTypeName()) && listener.GetTypeName()==TypeName )
			{
				listener.onItemState( col );
				return true;
			}
		}

		//타입이 지정되어 있지 않은 경우, 통합 인터페이스에 입력함
		foreach( AppsItemListener listener in Data().AppsItemListeners )
		{
			if( listener.GetClassName()==ClassName )
			{
				listener.onItemState( col );
				return true;
			}
		}

#if UNITY_EDITOR
		Debug.Log("이벤트 인터페이스를 찾을 수 없습니다. :"+col);
#endif

		return false;
	}

	//-------------------------------------------------------------------------------------------------------------------------------
	// 언어 정보를 처리하기 위한 함수
	//-------------------------------------------------------------------------------------------------------------------------------
	public static void onLanguage( AppsParameter col )
	{
		//---------------------------------------------------------------------------------------------------------------------------
		// -
		//---------------------------------------------------------------------------------------------------------------------------
		if( (col)==(null) ) return;

		//---------------------------------------------------------------------------------------------------------------------------
		// -
		//---------------------------------------------------------------------------------------------------------------------------
		if( (Data().languageModule)!=(null) )
		{
			Data().languageModule.onUpdate( col );
		}

		//---------------------------------------------------------------------------------------------------------------------------
		// -
		//---------------------------------------------------------------------------------------------------------------------------
		Debug.LogWarning( col );

		//---------------------------------------------------------------------------------------------------------------------------
		// -
		//---------------------------------------------------------------------------------------------------------------------------
	}

	//-------------------------------------------------------------------------------------------------------------------------------
	// 다국어 언어 리스터너의 정보를 등록하기 위한 함수
	//-------------------------------------------------------------------------------------------------------------------------------
	public static void AddListener( AppsLanguage listener )
	{
		//---------------------------------------------------------------------------------------------------------------------------
		// -
		//---------------------------------------------------------------------------------------------------------------------------
		if( (listener)==(null) ) return;

		//---------------------------------------------------------------------------------------------------------------------------
		// -
		//---------------------------------------------------------------------------------------------------------------------------
		(Data().languageModule)   = (listener);

		//---------------------------------------------------------------------------------------------------------------------------
		// -
		//---------------------------------------------------------------------------------------------------------------------------
	}

	//벤트 객체를 등록하기 위한 함수
	public static void AddListener( AppsItemListener listener )
	{
		if( listener==null ) return;

		if( !Data().AppsItemListeners.Contains(listener) )
		{
			Data().AppsItemListeners.Add( listener );
		}
	}

	//-------------------------------------------------------------------------------------------------------------------------------
	// 애셋번들 이벤트 리스터너의 정보를 등록하기 위한 함수
	//-------------------------------------------------------------------------------------------------------------------------------
	public static void Buy( string id, int count=(1) )
	{
		//---------------------------------------------------------------------------------------------------------------------------
		// -
		//---------------------------------------------------------------------------------------------------------------------------
		if( (id)==(null) ) return;
		if( (count)<=(0) ) return;

		//---------------------------------------------------------------------------------------------------------------------------
		// -
		//---------------------------------------------------------------------------------------------------------------------------
		AppsHTTPPost post = new AppsHTTPPost();
		{
			post.Register( "item", AppsFunc.encode(id) );
			post.Register( "count", (count) );
		}
		Data().http.Post( (Data().httpBuy), (post) );

		//---------------------------------------------------------------------------------------------------------------------------
		// -
		//---------------------------------------------------------------------------------------------------------------------------
	}

	//-------------------------------------------------------------------------------------------------------------------------------
	// 애셋번들 이벤트 리스터너의 정보를 등록하기 위한 함수
	//-------------------------------------------------------------------------------------------------------------------------------
	public static void GetPlatformInfo()
	{
		//---------------------------------------------------------------------------------------------------------------------------
		// -
		//---------------------------------------------------------------------------------------------------------------------------
		Data().http.Post( Data().httpGetPlatformInfo );

		//---------------------------------------------------------------------------------------------------------------------------
		// -
		//---------------------------------------------------------------------------------------------------------------------------
	}

	//-------------------------------------------------------------------------------------------------------------------------------
	// 친구 리스트를 전송하기 위한 함수
	//-------------------------------------------------------------------------------------------------------------------------------
	public static void SendFriends( APPS_LINKAGE linkage, string friends )
	{
		//---------------------------------------------------------------------------------------------------------------------------
		// -
		//---------------------------------------------------------------------------------------------------------------------------
		if( (friends)==(null) ) return;

		//---------------------------------------------------------------------------------------------------------------------------
		// -
		//---------------------------------------------------------------------------------------------------------------------------
		AppsHTTPPost    post    = new AppsHTTPPost();
		{
			post.Register( "linkage", (linkage.ToString()) );
			post.Register( "friends", (friends) );
		}
		Data().http.Post( (Data().httpSendFriends), (post) );

		//---------------------------------------------------------------------------------------------------------------------------
		// -
		//---------------------------------------------------------------------------------------------------------------------------
	}

	//-------------------------------------------------------------------------------------------------------------------------------
	// 친구 리스트를 정보를 전송하기 위한 함수
	//-------------------------------------------------------------------------------------------------------------------------------
	public static void LoadFriend()
	{
		//---------------------------------------------------------------------------------------------------------------------------
		// -
		//---------------------------------------------------------------------------------------------------------------------------
		Data().http.Post( Data().httpLoadFriend );

		//---------------------------------------------------------------------------------------------------------------------------
		// -
		//---------------------------------------------------------------------------------------------------------------------------
	}

	//-------------------------------------------------------------------------------------------------------------------------------
	// 포인트를 입력하기 위한 함수
	//-------------------------------------------------------------------------------------------------------------------------------
	public static void Point( int point )
	{
		//---------------------------------------------------------------------------------------------------------------------------
		// -
		//---------------------------------------------------------------------------------------------------------------------------
		if( (point)==(0) ) return;

		//---------------------------------------------------------------------------------------------------------------------------
		// -
		//---------------------------------------------------------------------------------------------------------------------------
		AppsHTTPPost    post    = new AppsHTTPPost();
		{
			post.Register( "point", (point.ToString()) );
		}
		Data().http.Post( (Data().httpPoint), (post) );

		//---------------------------------------------------------------------------------------------------------------------------
		// -
		//---------------------------------------------------------------------------------------------------------------------------
	}

	//포인트를 입력하기 위한 함수
	public static void Cash( int cash )
	{
		if( cash==0 ) return;

		AppsHTTPPost post = new AppsHTTPPost();
		{
			post.Register( "cash", cash );
		}
		Data().http.Post( Data().httpCash, post );
	}

	//플레이어 정보를 불러오기 위한 함수
	public static void LoadStorage()
	{
		_Request("LoadStorage");
	}

	//업데이트 시간을 불러오기 위한 함수
	public static ulong LoadUpdateTime()
	{
		if( !Library.IsFile(GetLastUpdateTimeFilePath()) ) return 0;

		ulong UpdateTime = 0;

		StreamReader streamReader = File.OpenText( GetLastUpdateTimeFilePath() );
		if( streamReader!=null )
		{
			string value = streamReader.ReadToEnd();
			if( Library.IsNumber(value) )
			{
				UpdateTime = ulong.Parse(value);
			}
		}
		streamReader.Close();

		return UpdateTime;
	}

	//로컬 업데이트를 처리하기 위한 함수
	public static void LocalUpdate()
	{
#if UNITY_EDITOR
		Debug.Log("로컬 업데이트를 실행합니다. : "+Data().Version);
#endif

		if( !Library.IsFile(GetVersionFilePath()) )
		{
			//버전 파일이 없으면 새로 생성함
			SaveVersion(Data().Version.ToString());
		}

		DownloadInterface.ON( Application.streamingAssetsPath+"/Update.json", funcLocalUpdate );
	}

	static void funcLocalUpdate( object wParam=null, object lParam=null )
	{
		if( lParam==null || lParam.GetType()!=typeof(DownloadProtocol) ) return;

		DownloadProtocol http = lParam as DownloadProtocol;
		if( http!=null )
		{
			Data().http.Receive( http.text );
		}
	}

	//다운로드를 기록하기 위한 함수
	public static void Download( string url )
	{
		if( !Library.Is(url) ) return;

		AppsHTTPPost post = new AppsHTTPPost();
		{
			post.Register( "url",			UnityWebRequest.EscapeURL(url) );
			post.Register( "processTime",	Time.time );
		}
		_Request( Data().httpDownload, post );
	}

	public static void AppsItemListenersLoad()
	{
		foreach( AppsItemListener listerner in Data().AppsItemListeners )
		{
			listerner.LoadCaches();
		}
	}

	public static void AppsItemListenersInitialize()
	{
		foreach( AppsItemListener listerner in Data().AppsItemListeners )
		{
			listerner.OnInitialize();
		}

		eventListener.OnInitialize();
	}

	public static _tagData Data()
	{
		return _data;
	}

	public static tagAppsItem FindAppsItem( string id )
	{
		if( !Library.Is(id) ) return null;

		foreach( AppsItemListener listerner in GetAppsItemListeners() )
		{
			foreach( tagAppsItem appsitem in listerner.GetAppsItems() )
			{
				if( appsitem.id==id )
				{
					return appsitem;
				}
			}
		}

		return null;
	}

	//객체 정보를 확인하기 위한 함수
	public static bool Is( tagAppsItem appsitem )
	{
		if( appsitem==null ) return false;

		if( Library.Is(appsitem.id) )
		{
			return true;
		}

		return false;
	}

	public static List<AppsItemListener> GetAppsItemListeners()
	{
		return Data().AppsItemListeners;
	}

	public static AppsEventListener GetEventListener()
	{
		return eventListener;
	}

	//인디게이터를 설정하기 위한 함수
	public static void Indigator( bool option=true, string description=null )
	{
		if( !Library.Is(description) ) return;

		if( option )
		{
			IndigatorInterface.ON( GetEventListener(), description );
		}
		else
		{
			IndigatorInterface.OFF( GetEventListener() );
		}
	}
}