using UnityEngine;
using System.Collections;

//-----------------------------------------------------------------------------------------------------------------------------------
// 인터페이스 위치를 정렬하기 위한 함수
//-----------------------------------------------------------------------------------------------------------------------------------
public class objAlign : MonoBehaviour
{
	//-------------------------------------------------------------------------------------------------------------------------------
	// -
	//-------------------------------------------------------------------------------------------------------------------------------
	[System.Serializable]
	public class tagData
	{
		//---------------------------------------------------------------------------------------------------------------------------
		// -
		//---------------------------------------------------------------------------------------------------------------------------
		public Transform		transform			= (null);
		public RectTransform	rectTransform		= (null);
		public RectTransform	source				= (null);

		//---------------------------------------------------------------------------------------------------------------------------
		// -
		//---------------------------------------------------------------------------------------------------------------------------
		public ALIGN			Pivot				= (ALIGN.CENTER);
		public bool				WidthStretch;
		public bool				HeightStretch;

		//---------------------------------------------------------------------------------------------------------------------------
		// -
		//---------------------------------------------------------------------------------------------------------------------------
		public float			HMargin				= (0);
		public float			VMargin				= (0);

		//---------------------------------------------------------------------------------------------------------------------------
		// -
		//---------------------------------------------------------------------------------------------------------------------------
	};
	public tagData		data		= new tagData();

	//-------------------------------------------------------------------------------------------------------------------------------
	// -
	//-------------------------------------------------------------------------------------------------------------------------------
	protected CApp		app			= (null);
	protected CPlay		play		= (null);

	//-------------------------------------------------------------------------------------------------------------------------------
	// -
	//-------------------------------------------------------------------------------------------------------------------------------
	void Awake()
	{
		//---------------------------------------------------------------------------------------------------------------------------
		// -
		//---------------------------------------------------------------------------------------------------------------------------
		(data.transform)		= (transform);
		(data.rectTransform)	= (GetComponent(typeof(RectTransform)) as RectTransform);
		if( (data.source)==(null) ) (data.source) = (GetComponent(typeof(RectTransform)) as RectTransform);

		//---------------------------------------------------------------------------------------------------------------------------
		// -
		//---------------------------------------------------------------------------------------------------------------------------
	}

	//-------------------------------------------------------------------------------------------------------------------------------
	// -
	//-------------------------------------------------------------------------------------------------------------------------------
	public void Start()
	{
		//---------------------------------------------------------------------------------------------------------------------------
		// -
		//---------------------------------------------------------------------------------------------------------------------------
		(this.app)		= (CApp.This);
		(this.play)		= (CPlay.This);

		//---------------------------------------------------------------------------------------------------------------------------
		// -
		//---------------------------------------------------------------------------------------------------------------------------
		if( (this.app)==(null) ) return;

		//---------------------------------------------------------------------------------------------------------------------------
		// -
		//---------------------------------------------------------------------------------------------------------------------------
		if( enabled )
		{
			//-----------------------------------------------------------------------------------------------------------------------
			// -
			//-----------------------------------------------------------------------------------------------------------------------
			Align();

			//-----------------------------------------------------------------------------------------------------------------------
			// -
			//-----------------------------------------------------------------------------------------------------------------------
			Enable( false );

			//-----------------------------------------------------------------------------------------------------------------------
			// -
			//-----------------------------------------------------------------------------------------------------------------------
			objSlide	slide	= (GetComponent(typeof(objSlide)) as objSlide);
			if( (slide)!=(null) )
			{
				slide.Start();
			}

			/*
			//-----------------------------------------------------------------------------------------------------------------------
			// -
			//-----------------------------------------------------------------------------------------------------------------------
			if( Func.GetAndroidOSVersion()<(10) )
			{
				Component.Destroy( this );
			}
			*/

			//-----------------------------------------------------------------------------------------------------------------------
			// -
			//-----------------------------------------------------------------------------------------------------------------------
		}

		//---------------------------------------------------------------------------------------------------------------------------
		// -
		//---------------------------------------------------------------------------------------------------------------------------
	}

	//-------------------------------------------------------------------------------------------------------------------------------
	// -
	//-------------------------------------------------------------------------------------------------------------------------------
	void Update()
	{
		//---------------------------------------------------------------------------------------------------------------------------
		// -
		//---------------------------------------------------------------------------------------------------------------------------
		Align();

		//---------------------------------------------------------------------------------------------------------------------------
		// -
		//---------------------------------------------------------------------------------------------------------------------------
		Enable( false );

		//---------------------------------------------------------------------------------------------------------------------------
		// -
		//---------------------------------------------------------------------------------------------------------------------------
	}

	//-------------------------------------------------------------------------------------------------------------------------------
	// 위치를 정렬하기 위한 함수
	//-------------------------------------------------------------------------------------------------------------------------------
	public void Align()
	{
		//---------------------------------------------------------------------------------------------------------------------------
		// -
		//---------------------------------------------------------------------------------------------------------------------------
		if( (this.app)==(null) )
		{
			Start();
			return;
		}

		//---------------------------------------------------------------------------------------------------------------------------
		// -
		//---------------------------------------------------------------------------------------------------------------------------
//		if( data.WidthStretch )		(_RectTransform().sizeDelta)	= new Vector2( play.uiCanvas.Width(), (_RectTransform().sizeDelta.y) );
//		if( data.HeightStretch )	(_RectTransform().sizeDelta)	= new Vector2( (_RectTransform().sizeDelta.x), play.uiCanvas.Height() );
		if( data.WidthStretch )		(_RectTransform().sizeDelta)	= new Vector2( tagSystem.GetScreenWidth(), (_RectTransform().sizeDelta.y) );
		if( data.HeightStretch )	(_RectTransform().sizeDelta)	= new Vector2( (_RectTransform().sizeDelta.x), tagSystem.GetScreenHeight() );

		//---------------------------------------------------------------------------------------------------------------------------
		// -
		//---------------------------------------------------------------------------------------------------------------------------
		switch( data.Pivot )
		{
			//-----------------------------------------------------------------------------------------------------------------------
			// CENTER
			//-----------------------------------------------------------------------------------------------------------------------
			case (ALIGN.CENTER):
				(_RectTransform().anchoredPosition)		= new Vector3( HMargin(), VMargin(), (Transform().localPosition.z) );
				break;

			//-----------------------------------------------------------------------------------------------------------------------
			// RIGHT
			//-----------------------------------------------------------------------------------------------------------------------
			case (ALIGN.RIGHT):
				(_RectTransform().anchoredPosition)		= new Vector3( Right()-HMargin(), VMargin(), (Transform().localPosition.z) );
				break;

			//-----------------------------------------------------------------------------------------------------------------------
			// LEFT
			//-----------------------------------------------------------------------------------------------------------------------
			case (ALIGN.LEFT):
				(_RectTransform().anchoredPosition)		= new Vector3( Left()+HMargin(), VMargin(), (Transform().localPosition.z) );
				break;

			//-----------------------------------------------------------------------------------------------------------------------
			// TOP
			//-----------------------------------------------------------------------------------------------------------------------
			case (ALIGN.TOP):
				(_RectTransform().anchoredPosition)		= new Vector3( HMargin(), Top()-VMargin(), (Transform().localPosition.z) );
				break;

			//-----------------------------------------------------------------------------------------------------------------------
			// BOTTOM
			//-----------------------------------------------------------------------------------------------------------------------
			case (ALIGN.BOTTOM):
				(_RectTransform().anchoredPosition)		= new Vector3( HMargin(), Bottom()+VMargin(), (Transform().localPosition.z) );
				break;

			//-----------------------------------------------------------------------------------------------------------------------
			// LEFT_TOP
			//-----------------------------------------------------------------------------------------------------------------------
			case (ALIGN.LEFT_TOP):
				(_RectTransform().anchoredPosition)		= new Vector3( Left()+HMargin(), Top()-VMargin(), (Transform().localPosition.z) );
				break;

			//-----------------------------------------------------------------------------------------------------------------------
			// LEFT_BOTTOM
			//-----------------------------------------------------------------------------------------------------------------------
			case (ALIGN.LEFT_BOTTOM):
				(_RectTransform().anchoredPosition)		= new Vector3( Left()+HMargin(), Bottom()+VMargin(), (Transform().localPosition.z) );
				break;

			//-----------------------------------------------------------------------------------------------------------------------
			// RIGHT_TOP
			//-----------------------------------------------------------------------------------------------------------------------
			case (ALIGN.RIGHT_TOP):
				(_RectTransform().anchoredPosition)		= new Vector3( Right()-HMargin(), Top()-VMargin(), (Transform().localPosition.z) );
				break;

			//-----------------------------------------------------------------------------------------------------------------------
			// RIGHT_BOTTOM
			//-----------------------------------------------------------------------------------------------------------------------
			case (ALIGN.RIGHT_BOTTOM):
				(_RectTransform().anchoredPosition)		= new Vector3( Right()-HMargin(), Bottom()+VMargin(), (Transform().localPosition.z) );
				break;

			//-----------------------------------------------------------------------------------------------------------------------
			// -
			//-----------------------------------------------------------------------------------------------------------------------
		}

		//---------------------------------------------------------------------------------------------------------------------------
		// -
		//---------------------------------------------------------------------------------------------------------------------------
	}

	//-------------------------------------------------------------------------------------------------------------------------------
	// 좌측 좌표를 얻기 위한 함수
	//-------------------------------------------------------------------------------------------------------------------------------
	float Left()
	{
		//---------------------------------------------------------------------------------------------------------------------------
		// -
		//---------------------------------------------------------------------------------------------------------------------------
		float	value		= -play.uiCanvas.Width()/(2) + (Width()*(data.source.pivot.x));

		//---------------------------------------------------------------------------------------------------------------------------
		// -
		//---------------------------------------------------------------------------------------------------------------------------
		if( (data.source)!=_RectTransform() )
		{
			return (value) - ((data.source.localPosition.x) * Mathf.Abs(Transform().localScale.x));
		}

		//---------------------------------------------------------------------------------------------------------------------------
		// -
		//---------------------------------------------------------------------------------------------------------------------------
		return (value);
	}

	//-------------------------------------------------------------------------------------------------------------------------------
	// 상단 좌표를 얻기 위한 함수
	//-------------------------------------------------------------------------------------------------------------------------------
	float Top()
	{
		//---------------------------------------------------------------------------------------------------------------------------
		// -
		//---------------------------------------------------------------------------------------------------------------------------
		float value = play.uiCanvas.Height()/(2) - (Height()*(1-data.source.pivot.y));

		//---------------------------------------------------------------------------------------------------------------------------
		// -
		//---------------------------------------------------------------------------------------------------------------------------
		if( (data.source)!=_RectTransform() )
		{
			return (value) - ((data.source.localPosition.y) * Mathf.Abs(Transform().localScale.y));
		}

		//---------------------------------------------------------------------------------------------------------------------------
		// -
		//---------------------------------------------------------------------------------------------------------------------------
		return (value);
	}

	//-------------------------------------------------------------------------------------------------------------------------------
	// 우측 좌표를 얻기 위한 함수
	//-------------------------------------------------------------------------------------------------------------------------------
	float Right()
	{
		//---------------------------------------------------------------------------------------------------------------------------
		// -
		//---------------------------------------------------------------------------------------------------------------------------
		float	value		= play.uiCanvas.Width()/(2) - (Width()*(1-data.source.pivot.x));

		//---------------------------------------------------------------------------------------------------------------------------
		// -
		//---------------------------------------------------------------------------------------------------------------------------
		if( (data.source)!=_RectTransform() )
		{
			return (value) - ((data.source.localPosition.x) * Mathf.Abs(Transform().localScale.x));
		}

		//---------------------------------------------------------------------------------------------------------------------------
		// -
		//---------------------------------------------------------------------------------------------------------------------------
		return (value);
	}

	//-------------------------------------------------------------------------------------------------------------------------------
	// 하단 좌표를 얻기 위한 함수
	//-------------------------------------------------------------------------------------------------------------------------------
	float Bottom()
	{
		//---------------------------------------------------------------------------------------------------------------------------
		// -
		//---------------------------------------------------------------------------------------------------------------------------
		float	value		= -play.uiCanvas.Height()/(2) + (Height()*(data.source.pivot.y));

		//---------------------------------------------------------------------------------------------------------------------------
		// -
		//---------------------------------------------------------------------------------------------------------------------------
		if( (data.source)!=_RectTransform() )
		{
			return (value) - ((data.source.localPosition.y)* Mathf.Abs(Transform().localScale.y));
		}

		//---------------------------------------------------------------------------------------------------------------------------
		// -
		//---------------------------------------------------------------------------------------------------------------------------
		return (value);
	}

	//-------------------------------------------------------------------------------------------------------------------------------
	// 가로 너비를 얻기 위한 함수
	//-------------------------------------------------------------------------------------------------------------------------------
	public float Width()
	{
		//---------------------------------------------------------------------------------------------------------------------------
		// -
		//---------------------------------------------------------------------------------------------------------------------------
		if( (data.source)!=_RectTransform() )
		{
			return Mathf.Abs((data.source.sizeDelta.x) * (data.source.localScale.x) * (Transform().localScale.x));
		}

		//---------------------------------------------------------------------------------------------------------------------------
		// -
		//---------------------------------------------------------------------------------------------------------------------------
		return Mathf.Abs((data.source.sizeDelta.x) * (data.source.localScale.x));
	}

	//-------------------------------------------------------------------------------------------------------------------------------
	// 세로 높이를 얻기 위한 함수
	//-------------------------------------------------------------------------------------------------------------------------------
	public float Height()
	{
		//---------------------------------------------------------------------------------------------------------------------------
		// -
		//---------------------------------------------------------------------------------------------------------------------------
		if( (data.source)!=_RectTransform() )
		{
			return Mathf.Abs((data.source.sizeDelta.y) * (data.source.localScale.y) * (Transform().localScale.y));
		}

		//---------------------------------------------------------------------------------------------------------------------------
		// -
		//---------------------------------------------------------------------------------------------------------------------------
		return Mathf.Abs((data.source.sizeDelta.y) * (data.source.localScale.y));
	}

	//-------------------------------------------------------------------------------------------------------------------------------
	// 트랜스폼 객체를 얻기 위한 함수
	//-------------------------------------------------------------------------------------------------------------------------------
	public Transform Transform()
	{
		//---------------------------------------------------------------------------------------------------------------------------
		// -
		//---------------------------------------------------------------------------------------------------------------------------
		return (data.transform);

		//---------------------------------------------------------------------------------------------------------------------------
		// -
		//---------------------------------------------------------------------------------------------------------------------------
	}

	//-------------------------------------------------------------------------------------------------------------------------------
	// 트랜스폼 객체를 얻기 위한 함수
	//-------------------------------------------------------------------------------------------------------------------------------
	public RectTransform _RectTransform()
	{
		//---------------------------------------------------------------------------------------------------------------------------
		// -
		//---------------------------------------------------------------------------------------------------------------------------
		return (data.rectTransform);

		//---------------------------------------------------------------------------------------------------------------------------
		// -
		//---------------------------------------------------------------------------------------------------------------------------
	}

	//-------------------------------------------------------------------------------------------------------------------------------
	// -
	//-------------------------------------------------------------------------------------------------------------------------------
	public float HMargin()
	{
		//---------------------------------------------------------------------------------------------------------------------------
		// -
		//---------------------------------------------------------------------------------------------------------------------------
		return (data.HMargin);

		//---------------------------------------------------------------------------------------------------------------------------
		// -
		//---------------------------------------------------------------------------------------------------------------------------
	}

	//-------------------------------------------------------------------------------------------------------------------------------
	// -
	//-------------------------------------------------------------------------------------------------------------------------------
	public float VMargin()
	{
		//---------------------------------------------------------------------------------------------------------------------------
		// 스크롤 뷰의 자식 객체일 경우,
		// 네비게이션 바에 대한 위치 이동을 하지 않음
		//---------------------------------------------------------------------------------------------------------------------------
		if( NativeScreen.IsNavigationBar() && app.ViewNavigationBar.Is() && !(data.HeightStretch) && GetComponentInParent(typeof(UnityEngine.UI.ScrollRect))==(null) )
		{
			//-----------------------------------------------------------------------------------------------------------------------
			// -
			//-----------------------------------------------------------------------------------------------------------------------
			bool	isParentAlign	= (false);
			if( (Transform().parent)!=(null) )
			{
				Component[]		parentArray		= Transform().parent.GetComponentsInParent(typeof(objAlign));
				foreach( objAlign parentAlign in parentArray )
				{
					if( !(parentAlign.data.HeightStretch) )
					{
						//부모 객체가 이미 네비게이션 바로 인한 위치 이동을 하는 경우,
						//위치 이동을 하지 않음
						(isParentAlign)		= (true);
					}
				}
			}

			//-----------------------------------------------------------------------------------------------------------------------
			// -
			//-----------------------------------------------------------------------------------------------------------------------
			if( !(isParentAlign) )
			{
				//-------------------------------------------------------------------------------------------------------------------
				// 현지 화면 높이가 Native 화면 높이와 다를 경우, 객체 위치를 조정함
				//-------------------------------------------------------------------------------------------------------------------
				switch( data.Pivot )
				{
					//---------------------------------------------------------------------------------------------------------------
					// -
					//---------------------------------------------------------------------------------------------------------------
					case (ALIGN.BOTTOM):
					case (ALIGN.LEFT_BOTTOM):
					case (ALIGN.RIGHT_BOTTOM):
					case (ALIGN.NOTHING):
					case (ALIGN.CENTER):
					case (ALIGN.LEFT):
					case (ALIGN.RIGHT):
						return (data.VMargin);// + (NativeScreen.NavigationBarHeight)*tagSystem.GetScreenSize();

					//---------------------------------------------------------------------------------------------------------------
					// -
					//---------------------------------------------------------------------------------------------------------------
				}

				//-------------------------------------------------------------------------------------------------------------------
				// -
				//-------------------------------------------------------------------------------------------------------------------
			}

			//-----------------------------------------------------------------------------------------------------------------------
			// -
			//-----------------------------------------------------------------------------------------------------------------------
		}

		//---------------------------------------------------------------------------------------------------------------------------
		// -
		//---------------------------------------------------------------------------------------------------------------------------
		return (data.VMargin);
	}

	//-------------------------------------------------------------------------------------------------------------------------------
	// 활성화를 설정하기 위한 함수
	//-------------------------------------------------------------------------------------------------------------------------------
	public void Enable( bool enable=(true) )
	{
		//---------------------------------------------------------------------------------------------------------------------------
		// -
		//---------------------------------------------------------------------------------------------------------------------------
		if( (enabled)!=(enable) )
		{
			(enabled)	= (enable);
		}

		//---------------------------------------------------------------------------------------------------------------------------
		// -
		//---------------------------------------------------------------------------------------------------------------------------
	}

	//-------------------------------------------------------------------------------------------------------------------------------
	// 작업이 대기중인지 확인하기 위한 함수
	//-------------------------------------------------------------------------------------------------------------------------------
	public bool IsWait()
	{
		//---------------------------------------------------------------------------------------------------------------------------
		// -
		//---------------------------------------------------------------------------------------------------------------------------
		return (enabled);

		//---------------------------------------------------------------------------------------------------------------------------
		// -
		//---------------------------------------------------------------------------------------------------------------------------
	}

	//-------------------------------------------------------------------------------------------------------------------------------
	// -
	//-------------------------------------------------------------------------------------------------------------------------------
}

//-----------------------------------------------------------------------------------------------------------------------------------
// -
//-----------------------------------------------------------------------------------------------------------------------------------