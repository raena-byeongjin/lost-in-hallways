using UnityEngine;
using UnityEngine.UI;
using System.Collections;
using System.Collections.Generic;
using System;

//패널 정보를 처리하기 위한 클래스
public class ViewPanel : FrameworkBehaviour
{
	//-------------------------------------------------------------------------------------------------------------------------------
	// -
	//-------------------------------------------------------------------------------------------------------------------------------
	public class _tagData
	{
		//---------------------------------------------------------------------------------------------------------------------------
		// -
		//---------------------------------------------------------------------------------------------------------------------------
		public CanvasBehaviour		canvas					= (null);
		public objPanel				_panel					= (null);

		//---------------------------------------------------------------------------------------------------------------------------
		// -
		//---------------------------------------------------------------------------------------------------------------------------
		public float				ActiveTime				= (0);
		public tagFocus				_Lock					= new tagFocus();

		//---------------------------------------------------------------------------------------------------------------------------
		// -
		//---------------------------------------------------------------------------------------------------------------------------
		public objScrollView		scrollView				= (null);
		public Vector2				scrollValue				= new Vector2();
		public bool					allowScrollRestore		= (false);

		//---------------------------------------------------------------------------------------------------------------------------
		// -
		//---------------------------------------------------------------------------------------------------------------------------
		public List<tagCallback>	Callbacks				= new List<tagCallback>();
		public tagHistory			history					= (null);

		//---------------------------------------------------------------------------------------------------------------------------
		// -
		//---------------------------------------------------------------------------------------------------------------------------
		public tagSoundStatic		sound					= (null);
		public List<GameObject>		OutObjects				= new List<GameObject>();

		//---------------------------------------------------------------------------------------------------------------------------
		// -
		//---------------------------------------------------------------------------------------------------------------------------
	};
	public _tagData	_data = new _tagData();

	protected override void Awake()
	{
		base.Awake();
		Enable( false );
	}

	//-------------------------------------------------------------------------------------------------------------------------------
	// 인터페이스를 활성화 하기 위한 함수
	//-------------------------------------------------------------------------------------------------------------------------------
	public bool ON( _tagData data )
	{
		//---------------------------------------------------------------------------------------------------------------------------
		// -
		//---------------------------------------------------------------------------------------------------------------------------
//		if( (data)==(null) ) return false;	//(NULL)값을 허용함

		//---------------------------------------------------------------------------------------------------------------------------
		// -
		//---------------------------------------------------------------------------------------------------------------------------
		if( IsLoad() )
		{
			//-----------------------------------------------------------------------------------------------------------------------
			// -
			//-----------------------------------------------------------------------------------------------------------------------
			if( !IsActive() )
			{
				Active();
			}

			//-----------------------------------------------------------------------------------------------------------------------
			// -
			//-----------------------------------------------------------------------------------------------------------------------
			Fore();
			SlideReset();

			//-----------------------------------------------------------------------------------------------------------------------
			// -
			//-----------------------------------------------------------------------------------------------------------------------
			if( IsForeBack() && Panel()!=(null) && Panel().ForeBack()!=(null) )
			{
				ForeBack();
			}

			//-----------------------------------------------------------------------------------------------------------------------
			// -
			//-----------------------------------------------------------------------------------------------------------------------
			return false;
		}

		//---------------------------------------------------------------------------------------------------------------------------
		// -
		//---------------------------------------------------------------------------------------------------------------------------
		if( (data)!=(null) )
		{
			(data.sound)	= (_data.sound);
			(_data)			= (data);
		}

	    //---------------------------------------------------------------------------------------------------------------------------
        // -
	    //---------------------------------------------------------------------------------------------------------------------------
		if( !Is() )
		{
			(Data().ActiveTime)		= (Time.unscaledTime);
		}

	    //---------------------------------------------------------------------------------------------------------------------------
        // -
	    //---------------------------------------------------------------------------------------------------------------------------
		if( Panel()==(null) )
		{
			Loader();
		}

	    //---------------------------------------------------------------------------------------------------------------------------
        // -
	    //---------------------------------------------------------------------------------------------------------------------------
		if( (app)!=(null) )
		{
			app.Panel.Register( Panel() );
		}

		CanvasBehaviour canvasbehaviour = Transform().GetComponentInParent(typeof(CanvasBehaviour)) as CanvasBehaviour;
		if( canvasbehaviour!=null )
		{
			canvasbehaviour.Register( Panel() );
		}

	    //---------------------------------------------------------------------------------------------------------------------------
        // -
	    //---------------------------------------------------------------------------------------------------------------------------
		if( Panel()!=(null) )
		{
			//-----------------------------------------------------------------------------------------------------------------------
			// -
			//-----------------------------------------------------------------------------------------------------------------------
			Panel()._ON();

			//-----------------------------------------------------------------------------------------------------------------------
			// -
			//-----------------------------------------------------------------------------------------------------------------------
			if( Panel().ReciveComponent()!=(null) )
			{
				Panel().ReciveComponent().ONNAVIGATION();
				Panel().ReciveComponent().ONFORE();
			}

			//-----------------------------------------------------------------------------------------------------------------------
			// -
			//-----------------------------------------------------------------------------------------------------------------------
		}

	    //---------------------------------------------------------------------------------------------------------------------------
        // -
	    //---------------------------------------------------------------------------------------------------------------------------
		if( Panel()!=(null) )
		{
			Component[] comArray = Panel().GetComponentsInChildren(typeof(objAlign));
			foreach( objAlign align in comArray )
			{
				align.Start();
			}
		}

		//---------------------------------------------------------------------------------------------------------------------------
		// -
		//---------------------------------------------------------------------------------------------------------------------------
		Enable( true );

		//---------------------------------------------------------------------------------------------------------------------------
		// -
		//---------------------------------------------------------------------------------------------------------------------------
		Data()._Lock.Reset();

		//---------------------------------------------------------------------------------------------------------------------------
		// -
		//---------------------------------------------------------------------------------------------------------------------------
		SlideReset();

		//---------------------------------------------------------------------------------------------------------------------------
		// -
		//---------------------------------------------------------------------------------------------------------------------------
		if( Panel().IsAllowSound() )
		{
			if( Apps.Is(Data().sound) )
			{
				app.MessageQueue.ONAndSkip( (funcSound), Data().sound );
			}
			else
			{
				app.MessageQueue.ONAndSkip( (funcSound), (SOUND.POPUP) );
			}
		}

		//---------------------------------------------------------------------------------------------------------------------------
		// -
		//---------------------------------------------------------------------------------------------------------------------------
		return true;
	}

	//-------------------------------------------------------------------------------------------------------------------------------
	// 인터페이스를 활성화 하기 위한 함수
	//-------------------------------------------------------------------------------------------------------------------------------
	public virtual bool ON()
	{
		//---------------------------------------------------------------------------------------------------------------------------
		// -
		//---------------------------------------------------------------------------------------------------------------------------
		if( !Is() )
		{
			//-----------------------------------------------------------------------------------------------------------------------
			// -
			//-----------------------------------------------------------------------------------------------------------------------
			if( Is(true) )
			{
//				Debug.Log( "인터페이스가 비활성화 되어있습니다. : "+(this), (this) );
			}
			else
			{
				Debug.Log( "활성화 함수가 설정되지 않았습니다. : "+(this), (this) );
			}

			//-----------------------------------------------------------------------------------------------------------------------
			// -
			//-----------------------------------------------------------------------------------------------------------------------
			return false;
		}

		//---------------------------------------------------------------------------------------------------------------------------
		// -
		//---------------------------------------------------------------------------------------------------------------------------
		return true;
	}

	//-------------------------------------------------------------------------------------------------------------------------------
	// 인터페이스를 활성화 하기 위한 함수
	//-------------------------------------------------------------------------------------------------------------------------------
	public virtual bool ONAndScrollRestore()
	{
		//---------------------------------------------------------------------------------------------------------------------------
		// -
		//---------------------------------------------------------------------------------------------------------------------------
		if( ON() )
		{
			ScrollView_ScrollRestore();
			return true;
		}

		//---------------------------------------------------------------------------------------------------------------------------
		// -
		//---------------------------------------------------------------------------------------------------------------------------
		return false;
	}

	//-------------------------------------------------------------------------------------------------------------------------------
	// 인터페이스를 비활성화 하기 위한 함수
	//-------------------------------------------------------------------------------------------------------------------------------
    public virtual bool OFF()
    {
	    //---------------------------------------------------------------------------------------------------------------------------
	    // -
	    //---------------------------------------------------------------------------------------------------------------------------
//		if( Panel()==(null) ) return false;
		if( !Is(true) ) return false;

	    //---------------------------------------------------------------------------------------------------------------------------
	    // 스크롤 뷰의 값을 기억함
	    //---------------------------------------------------------------------------------------------------------------------------
		ScrollView_ScrollMemorize();

	    //---------------------------------------------------------------------------------------------------------------------------
	    // -
	    //---------------------------------------------------------------------------------------------------------------------------
		if( Panel()!=(null) )
		{
			//-----------------------------------------------------------------------------------------------------------------------
			// -
			//-----------------------------------------------------------------------------------------------------------------------
			if( true )
			{
				//-------------------------------------------------------------------------------------------------------------------
				// -
				//-------------------------------------------------------------------------------------------------------------------
				foreach( GameObject obj in Data().OutObjects )
				{
					Func.Destroy(obj);
				}

				//-------------------------------------------------------------------------------------------------------------------
				// -
				//-------------------------------------------------------------------------------------------------------------------
				Data().OutObjects.Clear();

				//-------------------------------------------------------------------------------------------------------------------
				// -
				//-------------------------------------------------------------------------------------------------------------------
			}

			//-----------------------------------------------------------------------------------------------------------------------
			// -
			//-----------------------------------------------------------------------------------------------------------------------
			if( (this)!=(app.ViewIndigator) && app.ViewIndigator.Is(this) )
			{
				app.ViewIndigator.OFF( this );
			}

			//-----------------------------------------------------------------------------------------------------------------------
			// -
			//-----------------------------------------------------------------------------------------------------------------------
			bool historyRelease = (false);
			if( app.History.Is(this) )
			{
				app.History.OFF( this );
				(historyRelease) = (true);
			}

			//-----------------------------------------------------------------------------------------------------------------------
			// -
			//-----------------------------------------------------------------------------------------------------------------------
			app.History.Inactives().Remove( this );

			//-----------------------------------------------------------------------------------------------------------------------
			// -
			//-----------------------------------------------------------------------------------------------------------------------
//			tagHistory history = app.History.GetForeHistory();
			ViewPanel _prev = app.Panel.GetFore();
			if( (_prev)!=(null) && (_prev)==(app.ViewIndigator) )
			{
				(_prev) = (null);
			}

			//-----------------------------------------------------------------------------------------------------------------------
			// 주의, 자기 자신을 해제하려고 할 경우, 무한 재귀될 수 있음
			//-----------------------------------------------------------------------------------------------------------------------
			if( (this)!=(app.ViewNavigation) && app.ViewNavigation.Is(this) )
			{
				//-------------------------------------------------------------------------------------------------------------------
				// -
				//-------------------------------------------------------------------------------------------------------------------
				List<ViewPanel> ForePanels = new List<ViewPanel>();
				tagHistory history = app.History.GetForeHistory();
				if( (history)!=(null) )
				{
					bool skip = (false);
					foreach( objPanel panel0 in app.Panel.GetList() )
					{
						//-----------------------------------------------------------------------------------------------------------
						// -
						//-----------------------------------------------------------------------------------------------------------
						if( panel0.ReciveComponent()==(this) ) continue;
						if( panel0.ForeBack()==(null) && !app.History.Is(panel0.ReciveComponent()) ) continue;

						//-----------------------------------------------------------------------------------------------------------
						// -
						//-----------------------------------------------------------------------------------------------------------
						if( skip )
						{
							ForePanels.Add(panel0.ReciveComponent());
						}
						else
						if( (history.panel)==panel0.ReciveComponent() )
						{
							(skip) = (true);
						}

						//-----------------------------------------------------------------------------------------------------------
						// -
						//-----------------------------------------------------------------------------------------------------------
					}
				}

				//-------------------------------------------------------------------------------------------------------------------
				// -
				//-------------------------------------------------------------------------------------------------------------------
				app.ViewNavigation.OFF( this );

				//-------------------------------------------------------------------------------------------------------------------
				// -
				//-------------------------------------------------------------------------------------------------------------------
				foreach( ViewPanel panel0 in ForePanels )
				{
					panel0.Active();
					panel0.Fore();
				}

				//-------------------------------------------------------------------------------------------------------------------
				// -
				//-------------------------------------------------------------------------------------------------------------------
			}

			//-----------------------------------------------------------------------------------------------------------------------
			// -
			//-----------------------------------------------------------------------------------------------------------------------
			if( Canvas()!=(null) && Canvas().ForeBack()!=(null) )
			{
				Canvas().ForeBack().OFF( this );
			}

			//-----------------------------------------------------------------------------------------------------------------------
			// -
			//-----------------------------------------------------------------------------------------------------------------------
			if( app.Panel.IsFullscreen(this) && !app.History.Is() )
			{
				app.History.InactivesRestore();
			}
			else
			{
				ViewPanel history = app.History.GetFore();
				if( (history)!=(null) && !history.IsActive() )
				{
					history.Active();
				}
			}

			//-----------------------------------------------------------------------------------------------------------------------
			// -
			//-----------------------------------------------------------------------------------------------------------------------
			if( Panel().IsAllowSound() )
			{
				app.Sound.ON( SOUND.CLOSE );
			}

			//-----------------------------------------------------------------------------------------------------------------------
			// -
			//-----------------------------------------------------------------------------------------------------------------------
			if( Panel().ForeBack()!=(null) || (_prev)==(null) || (_prev)!=(this) )
			{
				app.Panel.Release( Panel() );
			}

			//-----------------------------------------------------------------------------------------------------------------------
			// -
			//-----------------------------------------------------------------------------------------------------------------------
			if( (this)!=(app.ViewIndigator) && (this)!=(app.ViewFinance) )
			{
				ViewPanel prev = app.Panel.GetFore();
				if( (prev)!=(null) )
				{
					//-----------------------------------------------------------------------------------------------------------------------
					// -
					//-----------------------------------------------------------------------------------------------------------------------
					if( prev.IsForeBack() && prev.GetForeBack()!=(null) )
					{
						Func.SetAsLastSibling( prev.GetForeBack()._Transform() );
					}

					//-----------------------------------------------------------------------------------------------------------------------
					// -
					//---------------------------------------------------------------------------------------------------------------------
					prev.Fore();
					if( !prev.IsActive() )
					{
						prev.Active();
					}

					//---------------------------------------------------------------------------------------------------------------
					// -
					//---------------------------------------------------------------------------------------------------------------
				}
			}

			//-----------------------------------------------------------------------------------------------------------------------
			// -
			//-----------------------------------------------------------------------------------------------------------------------
			if( Panel().ForeBack()!=(null) || (_prev)==(null) || (_prev)!=(this) )
			{
				//-------------------------------------------------------------------------------------------------------------------
				// -
				//-------------------------------------------------------------------------------------------------------------------
				(Data().scrollView)		= (null);

				//-------------------------------------------------------------------------------------------------------------------
				// -
				//-------------------------------------------------------------------------------------------------------------------
				Unloader();

				//-------------------------------------------------------------------------------------------------------------------
				// -
				//-------------------------------------------------------------------------------------------------------------------
				Func.Destroy( Panel() );
				Data()._panel = null;

				//-------------------------------------------------------------------------------------------------------------------
				// -
				//-------------------------------------------------------------------------------------------------------------------
				Resources.UnloadUnusedAssets();

				//-------------------------------------------------------------------------------------------------------------------
				// -
				//-------------------------------------------------------------------------------------------------------------------
			}
			else
			if( (_prev)!=(null) && !(historyRelease) )
			{
#if UNITY_EDITOR
				Debug.Log(_prev);
#endif
				app.History.Release( _prev );
			}
			else
			if( historyRelease )
			{
				app.History.Release( this );
			}

			//-----------------------------------------------------------------------------------------------------------------------
			// 콜백 함수를 호출함
			//-----------------------------------------------------------------------------------------------------------------------
			Callback();

			//-----------------------------------------------------------------------------------------------------------------------
			// -
			//-----------------------------------------------------------------------------------------------------------------------
			if( (this)!=(null) )
			{
				Enable( false );
			}

			//-----------------------------------------------------------------------------------------------------------------------
			// -
			//-----------------------------------------------------------------------------------------------------------------------
			return true;
		}

	    //---------------------------------------------------------------------------------------------------------------------------
	    // -
	    //---------------------------------------------------------------------------------------------------------------------------
        return false;
    }

	//-------------------------------------------------------------------------------------------------------------------------------
	// 콜백 함수를 호출하기 위한 함수
	//-------------------------------------------------------------------------------------------------------------------------------
	void Callback()
	{
		//---------------------------------------------------------------------------------------------------------------------------
		// -
		//---------------------------------------------------------------------------------------------------------------------------
		List<tagCallback>	Callbacks	= new List<tagCallback>();

		//---------------------------------------------------------------------------------------------------------------------------
		// 중복 호출되지 않도록 복제해서 실행함
		//---------------------------------------------------------------------------------------------------------------------------
		foreach( tagCallback callback in Data().Callbacks )
		{
			Callbacks.Add( callback );
		}

		Data().Callbacks.Clear();

		//---------------------------------------------------------------------------------------------------------------------------
		// -
		//---------------------------------------------------------------------------------------------------------------------------
		foreach( tagCallback callback in Callbacks )
		{
			callback.Call();
		}

		//---------------------------------------------------------------------------------------------------------------------------
		// -
		//---------------------------------------------------------------------------------------------------------------------------
	}

	//-------------------------------------------------------------------------------------------------------------------------------
	// -
	//-------------------------------------------------------------------------------------------------------------------------------
	public virtual void ONACTION()
	{
		//---------------------------------------------------------------------------------------------------------------------------
		// -
		//---------------------------------------------------------------------------------------------------------------------------
		
		//---------------------------------------------------------------------------------------------------------------------------
		// -
		//---------------------------------------------------------------------------------------------------------------------------
	}

	//-------------------------------------------------------------------------------------------------------------------------------
	// 마우스 왼쪽 버튼을 눌렀을 때 반응하기 위한 함수
	//-------------------------------------------------------------------------------------------------------------------------------
	public virtual bool ONLBUTTONDOWN( Vector2 point, TOUCH_INDEX touchIndex )
	{
		//---------------------------------------------------------------------------------------------------------------------------
		// -
		//---------------------------------------------------------------------------------------------------------------------------
		return false;
	}

	//-------------------------------------------------------------------------------------------------------------------------------
	// 마우스 왼쪽 버튼을 뗬을 때 반응하기 위한 함수
	//-------------------------------------------------------------------------------------------------------------------------------
	public virtual bool ONLBUTTONUP( Vector2 point, TOUCH_INDEX touchIndex )
	{
		//---------------------------------------------------------------------------------------------------------------------------
		// -
		//---------------------------------------------------------------------------------------------------------------------------
		return false;
	}

	//-------------------------------------------------------------------------------------------------------------------------------
	// 마우스 오른쪽 버튼을 눌렀을 때 반응하기 위한 함수
	//-------------------------------------------------------------------------------------------------------------------------------
	public virtual bool ONRBUTTONDOWN( Vector2 point, TOUCH_INDEX touchIndex )
	{
		//---------------------------------------------------------------------------------------------------------------------------
		// -
		//---------------------------------------------------------------------------------------------------------------------------
		return false;
	}

	//-------------------------------------------------------------------------------------------------------------------------------
	// 마우스 오른쪽 버튼을 뗬을 때 반응하기 위한 함수
	//-------------------------------------------------------------------------------------------------------------------------------
	public virtual bool ONRBUTTONUP( Vector2 point, TOUCH_INDEX touchIndex )
	{
		//---------------------------------------------------------------------------------------------------------------------------
		// -
		//---------------------------------------------------------------------------------------------------------------------------
		return false;
	}

	//-------------------------------------------------------------------------------------------------------------------------------
	// 드래그 입력에 반응하기 위한 함수
	//-------------------------------------------------------------------------------------------------------------------------------
	public virtual bool ONDRAG( Vector2 point, TOUCH_INDEX touchIndex )
	{
		//---------------------------------------------------------------------------------------------------------------------------
		// -
		//---------------------------------------------------------------------------------------------------------------------------
		return false;
	}

	//-------------------------------------------------------------------------------------------------------------------------------
	// 터치 입력에 반응하기 위한 함수
	//-------------------------------------------------------------------------------------------------------------------------------
	public virtual bool ONPICK( object obj )
	{
		//---------------------------------------------------------------------------------------------------------------------------
		// -
		//---------------------------------------------------------------------------------------------------------------------------
		return false;
	}

	//-------------------------------------------------------------------------------------------------------------------------------
	// 컨트롤 입력에 반응하기 위한 함수
	//-------------------------------------------------------------------------------------------------------------------------------
    public virtual bool ONCONTROL( objControl control, CONTROL_ACTION Action, tagFocus focus=(null) )
    {
		//---------------------------------------------------------------------------------------------------------------------------
		// -
		//---------------------------------------------------------------------------------------------------------------------------
        return false;		
    }

	//-------------------------------------------------------------------------------------------------------------------------------
	// 클릭 입력에 반응하기 위한 함수
	//-------------------------------------------------------------------------------------------------------------------------------
    public virtual bool ONCLICK( GameObject gameObject, CONTROL_ACTION Action )
    {
		//---------------------------------------------------------------------------------------------------------------------------
		// -
		//---------------------------------------------------------------------------------------------------------------------------
        return false;		
    }

	//-------------------------------------------------------------------------------------------------------------------------------
	// 스위치 입력에 반응하기 위한 함수
	//-------------------------------------------------------------------------------------------------------------------------------
    public virtual bool ONSWITCH( uiSwitch objswitch )
    {
		//---------------------------------------------------------------------------------------------------------------------------
		// -
		//---------------------------------------------------------------------------------------------------------------------------
        return false;		
    }

	//-------------------------------------------------------------------------------------------------------------------------------
	// 삭제 입력에 반응하기 위한 함수
	//-------------------------------------------------------------------------------------------------------------------------------
    public virtual bool ONDELETE()
    {
		//---------------------------------------------------------------------------------------------------------------------------
		// -
		//---------------------------------------------------------------------------------------------------------------------------
        return false;
    }

	//-------------------------------------------------------------------------------------------------------------------------------
	// 인터페이스를 취소하기 위한 함수
	//-------------------------------------------------------------------------------------------------------------------------------
    public void Cancel( CANCEL nCancel=(CANCEL.NOTHING) )
    {
		//---------------------------------------------------------------------------------------------------------------------------
		// -
		//---------------------------------------------------------------------------------------------------------------------------
		ONCANCEL( nCancel );

		//---------------------------------------------------------------------------------------------------------------------------
		// -
		//---------------------------------------------------------------------------------------------------------------------------
	}

	//-------------------------------------------------------------------------------------------------------------------------------
	// 취소 입력에 반응하기 위한 함수
	//-------------------------------------------------------------------------------------------------------------------------------
    public virtual bool ONCANCEL( CANCEL Cancel )
    {
		//---------------------------------------------------------------------------------------------------------------------------
		// -
		//---------------------------------------------------------------------------------------------------------------------------
		if( Is() )
		{
			//-----------------------------------------------------------------------------------------------------------------------
			// -
			//-----------------------------------------------------------------------------------------------------------------------
			if( Panel().CloseButton()!=(null) && Panel().CloseButton().IsActive() )
			{
				//-------------------------------------------------------------------------------------------------------------------
				// -
				//-------------------------------------------------------------------------------------------------------------------
				if( (Cancel)==(CANCEL.CLOSE) )
				{
					app.History.AllRelease(this);
				}

				//-------------------------------------------------------------------------------------------------------------------
				// 종료한 패널이 풀스크린 패널일 경우, 히스토리를 실행함
				//-------------------------------------------------------------------------------------------------------------------
				if( IsFullscreen() && (this)!=app.History.GetFore() )
				{
					app.History.ON();
				}

				//-------------------------------------------------------------------------------------------------------------------
				// -
				//-------------------------------------------------------------------------------------------------------------------
				OFF();

				//-------------------------------------------------------------------------------------------------------------------
				// -
				//-------------------------------------------------------------------------------------------------------------------
				return true;
			}
			else
			if( Is() )
			{
				Debug.Log( "종료 버튼이 없는 패널 객체는 기본 파이프라인에서는 종료하지 않음 : "+(this), (this) );
			}

			//-----------------------------------------------------------------------------------------------------------------------
			// -
			//-----------------------------------------------------------------------------------------------------------------------
		}

		//---------------------------------------------------------------------------------------------------------------------------
		// -
		//---------------------------------------------------------------------------------------------------------------------------
        return false;
    }

	//-------------------------------------------------------------------------------------------------------------------------------
	// 메모리를 초기화 하기 위한 함수
	//-------------------------------------------------------------------------------------------------------------------------------
	public virtual void Unloader()
	{
	    //---------------------------------------------------------------------------------------------------------------------------
	    // -
	    //---------------------------------------------------------------------------------------------------------------------------
	}

	//인터페이스를 불러오기 위한 함수
	public virtual void Loader()
	{
		Data()._panel = GetComponent(typeof(objPanel)) as objPanel;
		if( Panel()!=null )
		{
			Panel().Set( this );
		}
	}

	//인터페이스 정보를 불러오기 위한 함수
	public Transform Loader( UnityEngine.Object sample, CanvasBehaviour canvas )
	{
		if( sample==null ) return null;
		if( canvas==null ) return null;

		Data().canvas = canvas;
		return Loader( sample as GameObject, canvas.Transform() );
	}

	//인터페이스 정보를 불러오기 위한 함수
	public Transform Loader( UnityEngine.Object sample, objCamera camera )
	{
		if( sample==null ) return null;
		if( camera==null ) return null;

		return Loader( sample as GameObject, camera.Transform() );
	}

	// 인터페이스 정보를 불러오기 위한 함수
	public Transform Loader( UnityEngine.Object sample, Transform parent )
	{
		if( sample==null ) return null;
		if( parent==null ) return null;

		GameObject gameObject = GameObject.Instantiate( sample as GameObject, parent );
		RectTransform transform = gameObject.transform as RectTransform;

		Component[] comArray = transform.GetComponentsInChildren(typeof(Graphic));
		foreach( Graphic graphic in comArray )
		{
			if( graphic.GetComponent(typeof(objControl))==null && graphic.GetComponent(typeof(Button))==null )
			{
				graphic.raycastTarget = false;
			}
		}

		Data()._panel = gameObject.GetComponent(typeof(objPanel)) as objPanel;
		if( Panel()!=null )
		{
			comArray = transform.GetComponentsInChildren(typeof(objControl));
			foreach( objControl control in comArray )
			{
				Panel().Register( control );
			}
		}

		Data().scrollView = Panel().GetComponentInChildren(typeof(objScrollView)) as objScrollView;

		gameObject.name = sample.name;
		Library.SetLayer( transform, parent.gameObject.layer );

		Panel().Set(this);
		return transform;
	}

	//-------------------------------------------------------------------------------------------------------------------------------
	// 인터페이스가 활성화 되어 있는지 확인하기 위한 함수
	//-------------------------------------------------------------------------------------------------------------------------------
	public virtual bool Is()
	{
		//---------------------------------------------------------------------------------------------------------------------------
		// -
		//---------------------------------------------------------------------------------------------------------------------------
		return Is( false );

		//---------------------------------------------------------------------------------------------------------------------------
		// -
		//---------------------------------------------------------------------------------------------------------------------------
	}

	//-------------------------------------------------------------------------------------------------------------------------------
	// 인터페이스가 활성화 되어 있는지 확인하기 위한 함수
	//-------------------------------------------------------------------------------------------------------------------------------
	public bool Is( bool includeInactive=(false) )
	{
		//---------------------------------------------------------------------------------------------------------------------------
		// -
		//---------------------------------------------------------------------------------------------------------------------------
		if( Panel()!=(null) )
		{
			//-----------------------------------------------------------------------------------------------------------------------
			// -
			//-----------------------------------------------------------------------------------------------------------------------
			if( includeInactive )
			{
				//비활성화 상태여도 생성이 되어있다면, True를 반환함
				return true;
			}

			//-----------------------------------------------------------------------------------------------------------------------
			// -
			//-----------------------------------------------------------------------------------------------------------------------
			return Panel().IsPanel();
		}

		//---------------------------------------------------------------------------------------------------------------------------
		// -
		//---------------------------------------------------------------------------------------------------------------------------
		return false;
	}

	//트랜스폼을 얻기 위한 함수
	public override Transform Transform()
	{
		if( Panel()!=null )
		{
			return Panel().Transform();
		}

		return null;
	}

	//게임 오브젝트를 얻기 위한 함수
	public override GameObject _GameObject()
	{
		if( Panel()!=null )
		{
			return Panel()._GameObject();
		}

		return null;
	}

	//트랜스폼을 얻기 위한 함수
	public RectTransform _RectTransform()
	{
		if( Panel()!=null )
		{
			return Panel().Transform();
		}

		return null;
	}

	//-------------------------------------------------------------------------------------------------------------------------------
	// 생성된 후 흐른 시간을 얻기 위한 함수
	//-------------------------------------------------------------------------------------------------------------------------------
	public float Since()
	{
		//---------------------------------------------------------------------------------------------------------------------------
		// -
		//---------------------------------------------------------------------------------------------------------------------------
		return (Time.unscaledTime-Data().ActiveTime);

		//---------------------------------------------------------------------------------------------------------------------------
		// -
		//---------------------------------------------------------------------------------------------------------------------------
	}

	//-------------------------------------------------------------------------------------------------------------------------------
	// 인터페이스 잠금을 해제하기 위한 함수
	//-------------------------------------------------------------------------------------------------------------------------------
	public void Unlock()
	{
		//---------------------------------------------------------------------------------------------------------------------------
		// -
		//---------------------------------------------------------------------------------------------------------------------------
		Data()._Lock.Reset();

		//---------------------------------------------------------------------------------------------------------------------------
		// -
		//---------------------------------------------------------------------------------------------------------------------------
	}

	//-------------------------------------------------------------------------------------------------------------------------------
	// -
	//-------------------------------------------------------------------------------------------------------------------------------
	public bool ForeBack( bool active=(true), float fadeTime=(0f) )
	{
		//---------------------------------------------------------------------------------------------------------------------------
		// -
		//---------------------------------------------------------------------------------------------------------------------------
		if( active )
		{
			//-----------------------------------------------------------------------------------------------------------------------
			// -
			//-----------------------------------------------------------------------------------------------------------------------
			if( Canvas()!=(null) && Canvas().ForeBack()!=(null) )
			{
				Canvas().ForeBack().ON( (this), (fadeTime) );
			}

			//-----------------------------------------------------------------------------------------------------------------------
			// -
			//-----------------------------------------------------------------------------------------------------------------------
			if( Panel()!=(null) )
			{
				//-------------------------------------------------------------------------------------------------------------------
				// -
				//-------------------------------------------------------------------------------------------------------------------
				if( Canvas()!=(null) )
				{
					(Panel().data.foreback)		= Canvas().ForeBack();
				}

				//-------------------------------------------------------------------------------------------------------------------
				// -
				//-------------------------------------------------------------------------------------------------------------------
//				Panel().ON();

				//-------------------------------------------------------------------------------------------------------------------
				// -
				//-------------------------------------------------------------------------------------------------------------------
			}

			/*
			//-----------------------------------------------------------------------------------------------------------------------
			// -
			//-----------------------------------------------------------------------------------------------------------------------
			if( app.Game.Is() && app.Player.Character()!=(null) )
			{
				app.Player.Character().Stop();
			}
			*/

			//-----------------------------------------------------------------------------------------------------------------------
			// -
			//-----------------------------------------------------------------------------------------------------------------------
			return true;
		}
		else
		{
			if( Canvas()!=(null) )
			{
				if( IsLoad() )
				{
					Canvas().ForeBack().OFF( (this), (false) );
				}
				else
				{
					Canvas().ForeBack().OFF( this );
				}
			}
		}

		//---------------------------------------------------------------------------------------------------------------------------
		// -
		//---------------------------------------------------------------------------------------------------------------------------
		return false;
	}

	//-------------------------------------------------------------------------------------------------------------------------------
	// -
	//-------------------------------------------------------------------------------------------------------------------------------
	public _tagData Data()
	{
		//---------------------------------------------------------------------------------------------------------------------------
		// -
		//---------------------------------------------------------------------------------------------------------------------------
		return (_data);

		//---------------------------------------------------------------------------------------------------------------------------
		// -
		//---------------------------------------------------------------------------------------------------------------------------
	}

	//-------------------------------------------------------------------------------------------------------------------------------
	// 캔버스 객체를 얻기 위한 함수
	//-------------------------------------------------------------------------------------------------------------------------------
	public CanvasBehaviour Canvas()
	{
		//---------------------------------------------------------------------------------------------------------------------------
		// -
		//---------------------------------------------------------------------------------------------------------------------------
		return (Data().canvas);

		//---------------------------------------------------------------------------------------------------------------------------
		// -
		//---------------------------------------------------------------------------------------------------------------------------
	}

	//패널 객체를 얻기 위한 함수
	public objPanel Panel()
	{
		return Data()._panel;
	}

	//-------------------------------------------------------------------------------------------------------------------------------
	// 인터페이스를 활성화 하기 위한 함수
	//-------------------------------------------------------------------------------------------------------------------------------
	public virtual bool Active()
	{
		//---------------------------------------------------------------------------------------------------------------------------
		// -
		//---------------------------------------------------------------------------------------------------------------------------
		if( Is(true) )
		{
			//-----------------------------------------------------------------------------------------------------------------------
			// -
			//-----------------------------------------------------------------------------------------------------------------------
			_GameObject().SetActive( true );

			//-----------------------------------------------------------------------------------------------------------------------
			// -
			//-----------------------------------------------------------------------------------------------------------------------
			if( Canvas()!=(null) && Canvas().ForeBack()!=(null) && Canvas().ForeBack().Is(this) )
			{
				ForeBack();
			}

			//-----------------------------------------------------------------------------------------------------------------------
			// -
			//-----------------------------------------------------------------------------------------------------------------------
			return true;
		}

		//---------------------------------------------------------------------------------------------------------------------------
		// -
		//---------------------------------------------------------------------------------------------------------------------------
		return false;
	}

	//-------------------------------------------------------------------------------------------------------------------------------
	// 인터페이스를 비활성화 하기 위한 함수
	//-------------------------------------------------------------------------------------------------------------------------------
	public virtual bool Inactive()
	{
		//---------------------------------------------------------------------------------------------------------------------------
		// -
		//---------------------------------------------------------------------------------------------------------------------------
		if( Is() )
		{
			//-----------------------------------------------------------------------------------------------------------------------
			// -
			//-----------------------------------------------------------------------------------------------------------------------
			_GameObject().SetActive( false );

			//-----------------------------------------------------------------------------------------------------------------------
			// -
			//-----------------------------------------------------------------------------------------------------------------------
			if( Canvas()!=(null) && Canvas().ForeBack()!=(null) )
			{
				if( Canvas().ForeBack().Is(this) && (Canvas().ForeBack().Instances().Count)==(1) )
				{
					ForeBack( false );
				}
			}

			//-----------------------------------------------------------------------------------------------------------------------
			// -
			//-----------------------------------------------------------------------------------------------------------------------
			return true;
		}

		//---------------------------------------------------------------------------------------------------------------------------
		// -
		//---------------------------------------------------------------------------------------------------------------------------
		return false;
	}

	//-------------------------------------------------------------------------------------------------------------------------------
	// 로드되어 있는지 확인하기 위한 함수
	//-------------------------------------------------------------------------------------------------------------------------------
	public bool IsLoad()
	{
		//---------------------------------------------------------------------------------------------------------------------------
		// -
		//---------------------------------------------------------------------------------------------------------------------------
		if( Panel()!=(null) )
		{
			return true;
		}

		//---------------------------------------------------------------------------------------------------------------------------
		// -
		//---------------------------------------------------------------------------------------------------------------------------
		return false;
	}

	//-------------------------------------------------------------------------------------------------------------------------------
	// SKIP 입력에 반응하기 위한 함수
	//-------------------------------------------------------------------------------------------------------------------------------
	public virtual bool ONSKIP()
	{
        //---------------------------------------------------------------------------------------------------------------------------
        // -
        //---------------------------------------------------------------------------------------------------------------------------
		return false;
	}

	//-------------------------------------------------------------------------------------------------------------------------------
	// 엔터 입력에 반응하기 위한 함수
	//-------------------------------------------------------------------------------------------------------------------------------
	public virtual bool ONRETURN()
	{
        //---------------------------------------------------------------------------------------------------------------------------
        // -
        //---------------------------------------------------------------------------------------------------------------------------
		return false;
	}

	//-------------------------------------------------------------------------------------------------------------------------------
	// -
	//-------------------------------------------------------------------------------------------------------------------------------
	public void Fore( bool inflow=(true) )
	{
        //---------------------------------------------------------------------------------------------------------------------------
        // -
        //---------------------------------------------------------------------------------------------------------------------------
		if( Is() )
		{
			app.Panel.Fore( Panel(), (inflow) );
		}

        //---------------------------------------------------------------------------------------------------------------------------
        // -
        //---------------------------------------------------------------------------------------------------------------------------
	}

	//-------------------------------------------------------------------------------------------------------------------------------
	// 인터페이스가 전면에 출력되었을 때 반응하기 위한 함수
	//-------------------------------------------------------------------------------------------------------------------------------
	public virtual void ONFORE()
	{
        //---------------------------------------------------------------------------------------------------------------------------
        // -
        //---------------------------------------------------------------------------------------------------------------------------
	}

	//-------------------------------------------------------------------------------------------------------------------------------
	// 네비게이션을 처리하기 위한 함수
	//-------------------------------------------------------------------------------------------------------------------------------
	public virtual void ONNAVIGATION()
	{
        //---------------------------------------------------------------------------------------------------------------------------
        // -
        //---------------------------------------------------------------------------------------------------------------------------
	}

	//-------------------------------------------------------------------------------------------------------------------------------
	// -
	//-------------------------------------------------------------------------------------------------------------------------------
	public bool IsForeBack()
	{
        //---------------------------------------------------------------------------------------------------------------------------
        // -
        //---------------------------------------------------------------------------------------------------------------------------
		if( Canvas()!=(null) && Canvas().ForeBack()!=(null) && Canvas().ForeBack().Is() )
		{
			return true;
		}

        //---------------------------------------------------------------------------------------------------------------------------
        // -
        //---------------------------------------------------------------------------------------------------------------------------
		return false;
	}

	//-------------------------------------------------------------------------------------------------------------------------------
	// -
	//-------------------------------------------------------------------------------------------------------------------------------
	public objForeBack GetForeBack()
	{
        //---------------------------------------------------------------------------------------------------------------------------
        // -
        //---------------------------------------------------------------------------------------------------------------------------
		if( Panel()!=(null) )
		{
			return Panel().ForeBack();
		}

        //---------------------------------------------------------------------------------------------------------------------------
        // -
        //---------------------------------------------------------------------------------------------------------------------------
		return (null);
	}

	//-------------------------------------------------------------------------------------------------------------------------------
	// 슬라이드 아웃을 설정하기 위한 함수
	//-------------------------------------------------------------------------------------------------------------------------------
	public void SlideIn( float delay=0f )
	{
		//---------------------------------------------------------------------------------------------------------------------------
		// -
		//---------------------------------------------------------------------------------------------------------------------------
		SlideReset();

		//---------------------------------------------------------------------------------------------------------------------------
		// -
		//---------------------------------------------------------------------------------------------------------------------------
		if( Panel()!=(null) )
		{
			Component[]		slideArray		= Panel().GetComponentsInChildren( typeof(objSlide), (true) );
			foreach( objSlide slide in slideArray )
			{
				slide.In(delay);
			}
		}

		//---------------------------------------------------------------------------------------------------------------------------
		// -
		//---------------------------------------------------------------------------------------------------------------------------
	}

	//-------------------------------------------------------------------------------------------------------------------------------
	// 슬라이드 아웃을 설정하기 위한 함수
	//-------------------------------------------------------------------------------------------------------------------------------
	public virtual void SlideOut( bool Destroy=(true) )
	{
		//---------------------------------------------------------------------------------------------------------------------------
		// -
		//---------------------------------------------------------------------------------------------------------------------------
		if( Is() )
		{
			//-----------------------------------------------------------------------------------------------------------------------
			// -
			//-----------------------------------------------------------------------------------------------------------------------
			Component[]		slideArray		= Panel().GetComponentsInChildren(typeof(objSlide));
			foreach( objSlide slide in slideArray )
			{
				//-------------------------------------------------------------------------------------------------------------------
				// -
				//-------------------------------------------------------------------------------------------------------------------
				slide.Out();

				//-------------------------------------------------------------------------------------------------------------------
				// -
				//-------------------------------------------------------------------------------------------------------------------
				if( Destroy )
				{
					slide.SetCallback( funcSlideOutDestroy );
				}
				else
				{
					slide.SetCallback( funcSlideOutDisable );
				}

				//-------------------------------------------------------------------------------------------------------------------
				// -
				//-------------------------------------------------------------------------------------------------------------------
			}

			//-----------------------------------------------------------------------------------------------------------------------
			// -
			//-----------------------------------------------------------------------------------------------------------------------
		}

		//---------------------------------------------------------------------------------------------------------------------------
		// -
		//---------------------------------------------------------------------------------------------------------------------------
	}

	//-------------------------------------------------------------------------------------------------------------------------------
	// 슬라이드 아웃이 완료되었을 때 반응하기 위한 함수
	//-------------------------------------------------------------------------------------------------------------------------------
	void funcSlideOutDestroy( object wParam=(null), object lParam=(null) )
	{
		//---------------------------------------------------------------------------------------------------------------------------
		// -
		//---------------------------------------------------------------------------------------------------------------------------
		if( Is() )
		{
			//-----------------------------------------------------------------------------------------------------------------------
			// -
			//-----------------------------------------------------------------------------------------------------------------------
			Component[]		slideArray		= Panel().GetComponentsInChildren(typeof(objSlide));
			foreach( objSlide slide in slideArray )
			{
				if( slide.IsAction() )
				{
					return;
				}
			}

			//-----------------------------------------------------------------------------------------------------------------------
			// -
			//-----------------------------------------------------------------------------------------------------------------------
			OFF();

			//-----------------------------------------------------------------------------------------------------------------------
			// -
			//-----------------------------------------------------------------------------------------------------------------------
		}

		//---------------------------------------------------------------------------------------------------------------------------
		// -
		//---------------------------------------------------------------------------------------------------------------------------
	}

	//-------------------------------------------------------------------------------------------------------------------------------
	// 슬라이드 아웃이 완료되었을 때 반응하기 위한 함수
	//-------------------------------------------------------------------------------------------------------------------------------
	void funcSlideOutDisable( object wParam=(null), object lParam=(null) )
	{
		//---------------------------------------------------------------------------------------------------------------------------
		// -
		//---------------------------------------------------------------------------------------------------------------------------
		if( Is() )
		{
			//-----------------------------------------------------------------------------------------------------------------------
			// -
			//-----------------------------------------------------------------------------------------------------------------------
			_GameObject().SetActive( false );

			//-----------------------------------------------------------------------------------------------------------------------
			// -
			//-----------------------------------------------------------------------------------------------------------------------
		}

		//---------------------------------------------------------------------------------------------------------------------------
		// -
		//---------------------------------------------------------------------------------------------------------------------------
	}

	//-------------------------------------------------------------------------------------------------------------------------------
	// 콜백 함수를 설정하기 위한 함수
	//-------------------------------------------------------------------------------------------------------------------------------
	public void SetCallback( Action<object, object> func, object wParam=(null), object lParam=(null) )
	{
		//---------------------------------------------------------------------------------------------------------------------------
		// -
		//---------------------------------------------------------------------------------------------------------------------------
		if( (func)==(null) ) return;
//		if( (wParam)==(null) ) return;	//(NULL)값을 허용함
//		if( (lParam)==(null) ) return;	//(NULL)값을 허용함

		//---------------------------------------------------------------------------------------------------------------------------
		// -
		//---------------------------------------------------------------------------------------------------------------------------
		if( Is() )
		{
			Data().Callbacks.Add( new tagCallback( (func), (wParam), (lParam) ) );
		}
		else
		{
			func( (wParam), (lParam) );
		}

		//---------------------------------------------------------------------------------------------------------------------------
		// -
		//---------------------------------------------------------------------------------------------------------------------------
	}

	//-------------------------------------------------------------------------------------------------------------------------------
	// 슬라이드 아웃을 설정하기 위한 함수
	//-------------------------------------------------------------------------------------------------------------------------------
	public void SlideReset()
	{
		//---------------------------------------------------------------------------------------------------------------------------
		// -
		//---------------------------------------------------------------------------------------------------------------------------
		if( Panel()!=(null) )
		{
			Component[]		slideArray		= Panel().GetComponentsInChildren( typeof(objSlide), (true) );
			foreach( objSlide slide in slideArray )
			{
				slide.Cancel();
			}
		}

		//---------------------------------------------------------------------------------------------------------------------------
		// -
		//---------------------------------------------------------------------------------------------------------------------------
	}

	//-------------------------------------------------------------------------------------------------------------------------------
	// -
	//-------------------------------------------------------------------------------------------------------------------------------
	public virtual void CustomMessage( object wParam=(null), object lParam=(null) )
	{
		//---------------------------------------------------------------------------------------------------------------------------
		// -
		//---------------------------------------------------------------------------------------------------------------------------
	}

	//-------------------------------------------------------------------------------------------------------------------------------
	// 인디게이터를 활성화 하기 위한 함수
	//-------------------------------------------------------------------------------------------------------------------------------
	public void Indigator( bool option=(true), string description=(null), int index=(0) )
	{
		//---------------------------------------------------------------------------------------------------------------------------
		// -
		//---------------------------------------------------------------------------------------------------------------------------
//		if( !Library.Is(description) ) return;		//(NULL)값을 허용함

		//---------------------------------------------------------------------------------------------------------------------------
		// -
		//---------------------------------------------------------------------------------------------------------------------------
		if( option )
		{
			app.ViewIndigator.ON( (this), (description), (index) );
		}
		else
		{
			app.ViewIndigator.OFF( (this), (index) );
		}

		//---------------------------------------------------------------------------------------------------------------------------
		// -
		//---------------------------------------------------------------------------------------------------------------------------
	}

	//-------------------------------------------------------------------------------------------------------------------------------
	// 인디게이터를 활성화 하기 위한 함수
	//-------------------------------------------------------------------------------------------------------------------------------
	public void Indigator( bool option, int index )
	{
		//---------------------------------------------------------------------------------------------------------------------------
		// -
		//---------------------------------------------------------------------------------------------------------------------------
//		if( !Library.Is(description) ) return;		//(NULL)값을 허용함

		//---------------------------------------------------------------------------------------------------------------------------
		// -
		//---------------------------------------------------------------------------------------------------------------------------
		Indigator( (option), (null), (index) );

		//---------------------------------------------------------------------------------------------------------------------------
		// -
		//---------------------------------------------------------------------------------------------------------------------------
	}

	//-------------------------------------------------------------------------------------------------------------------------------
	// 인디게이터를 활성화 하기 위한 함수
	//-------------------------------------------------------------------------------------------------------------------------------
	public virtual void Indigator( string description, int index=(0) )
	{
		//---------------------------------------------------------------------------------------------------------------------------
		// -
		//---------------------------------------------------------------------------------------------------------------------------
//		if( !Library.Is(description) ) return;		//(NULL)값을 허용함

		//---------------------------------------------------------------------------------------------------------------------------
		// -
		//---------------------------------------------------------------------------------------------------------------------------
		app.ViewIndigator.ON( (this), (description), (index) );

		//---------------------------------------------------------------------------------------------------------------------------
		// -
		//---------------------------------------------------------------------------------------------------------------------------
	}

	//-------------------------------------------------------------------------------------------------------------------------------
	// 인디게이터를 활성화 하기 위한 함수
	//-------------------------------------------------------------------------------------------------------------------------------
	public void funcIndigator( object wParam=(null), object lParam=(null) )
	{
		//---------------------------------------------------------------------------------------------------------------------------
		// -
		//---------------------------------------------------------------------------------------------------------------------------
//		if( (wParam)==(null) || wParam.GetType()!=typeof(bool) ) return;	//(NULL)값을 허용함
//		if( (lParam)==(null) || lParam.GetType()!=typeof(string) ) return;	//(NULL)값을 허용함

		//---------------------------------------------------------------------------------------------------------------------------
		// -
		//---------------------------------------------------------------------------------------------------------------------------
		if( (wParam)!=(null) && (lParam)!=(null) && wParam.GetType()==typeof(bool) && lParam.GetType()==typeof(string) )
		{
			Indigator( (bool)(wParam), (string)(lParam) );
		}
		else
		if( (wParam)!=(null) && wParam.GetType()==typeof(bool) )
		{
			Indigator( (bool)(wParam) );
		}
		else
		if( (lParam)!=(null) && lParam.GetType()==typeof(string) )
		{
			Indigator( (string)(lParam) );
		}

		//---------------------------------------------------------------------------------------------------------------------------
		// -
		//---------------------------------------------------------------------------------------------------------------------------
	}

	//-------------------------------------------------------------------------------------------------------------------------------
	// -
	//-------------------------------------------------------------------------------------------------------------------------------
	public virtual void ONAndSlideIn()
	{
		//---------------------------------------------------------------------------------------------------------------------------
		// -
		//---------------------------------------------------------------------------------------------------------------------------
		if( !Is() )
		{
			//-----------------------------------------------------------------------------------------------------------------------
			// -
			//-----------------------------------------------------------------------------------------------------------------------
			ON();

			//-----------------------------------------------------------------------------------------------------------------------
			// -
			//-----------------------------------------------------------------------------------------------------------------------
			SlideOutDefault();
			SlideIn();

			//-----------------------------------------------------------------------------------------------------------------------
			// -
			//-----------------------------------------------------------------------------------------------------------------------
		}
		
		//---------------------------------------------------------------------------------------------------------------------------
		// -
		//---------------------------------------------------------------------------------------------------------------------------
	}

	//-------------------------------------------------------------------------------------------------------------------------------
	// 슬라이드 아웃을 설정하기 위한 함수
	//-------------------------------------------------------------------------------------------------------------------------------
	public void SlideOutDefault()
	{
		//---------------------------------------------------------------------------------------------------------------------------
		// -
		//---------------------------------------------------------------------------------------------------------------------------
		if( Panel()!=(null) )
		{
			Component[]		slideArray		= Panel().GetComponentsInChildren( typeof(objSlide), (true) );
			foreach( objSlide slide in slideArray )
			{
				(slide._RectTransform().localPosition)	= (slide.data.vOut);
			}
		}

		//---------------------------------------------------------------------------------------------------------------------------
		// -
		//---------------------------------------------------------------------------------------------------------------------------
	}

	//-------------------------------------------------------------------------------------------------------------------------------
	// Depth를 얻기 위한 함수
	//-------------------------------------------------------------------------------------------------------------------------------
	public float Depth()
	{
        //---------------------------------------------------------------------------------------------------------------------------
	    // -
	    //---------------------------------------------------------------------------------------------------------------------------
		if( Canvas()!=(null) )
		{
			return Canvas().Depth();
		}

        //---------------------------------------------------------------------------------------------------------------------------
	    // -
	    //---------------------------------------------------------------------------------------------------------------------------
		return (0f);
	}

	//-------------------------------------------------------------------------------------------------------------------------------
	// 스크롤 뷰 객체를 얻기 위한 함수
	//-------------------------------------------------------------------------------------------------------------------------------
	public objScrollView ScrollView()
	{
		//---------------------------------------------------------------------------------------------------------------------------
		// -
		//---------------------------------------------------------------------------------------------------------------------------
		return (Data().scrollView);

		//---------------------------------------------------------------------------------------------------------------------------
		// -
		//---------------------------------------------------------------------------------------------------------------------------
	}

	//-------------------------------------------------------------------------------------------------------------------------------
	// -
	//-------------------------------------------------------------------------------------------------------------------------------
	public void ScrollView_ScrollMemorize()
	{
		//---------------------------------------------------------------------------------------------------------------------------
		// -
		//---------------------------------------------------------------------------------------------------------------------------
		if( ScrollView()!=(null) )
		{
			(Data().scrollValue)	= (ScrollView()._ScrollRect().normalizedPosition);
		}

		//---------------------------------------------------------------------------------------------------------------------------
		// -
		//---------------------------------------------------------------------------------------------------------------------------
	}

	//-------------------------------------------------------------------------------------------------------------------------------
	// -
	//-------------------------------------------------------------------------------------------------------------------------------
	public void ScrollView_ScrollRestore()
	{
		//---------------------------------------------------------------------------------------------------------------------------
		// -
		//---------------------------------------------------------------------------------------------------------------------------
		if( (Data().allowScrollRestore) && ScrollView()!=(null) )
		{
			//-----------------------------------------------------------------------------------------------------------------------
			// -
			//-----------------------------------------------------------------------------------------------------------------------
			(ScrollView()._ScrollRect().normalizedPosition)		= (Data().scrollValue);

			//-----------------------------------------------------------------------------------------------------------------------
			// -
			//-----------------------------------------------------------------------------------------------------------------------
			(Data().allowScrollRestore)	= (false);

			//-----------------------------------------------------------------------------------------------------------------------
			// -
			//-----------------------------------------------------------------------------------------------------------------------
		}

		//---------------------------------------------------------------------------------------------------------------------------
		// -
		//---------------------------------------------------------------------------------------------------------------------------
	}

	//-------------------------------------------------------------------------------------------------------------------------------
	// 스크롤 입력을 처리하기 위한 함수
	//-------------------------------------------------------------------------------------------------------------------------------
	public virtual bool ONSCROLLCHANGE( objScrollView scrollView, Vector2 value )
	{
		//---------------------------------------------------------------------------------------------------------------------------
		// -
		//---------------------------------------------------------------------------------------------------------------------------
		return false;
	}

	//-------------------------------------------------------------------------------------------------------------------------------
	// 인터페이스를 활성화 하기 위한 함수
	//-------------------------------------------------------------------------------------------------------------------------------
	public virtual void OnHistory( tagHistory history )
	{
		//---------------------------------------------------------------------------------------------------------------------------
		// -
		//---------------------------------------------------------------------------------------------------------------------------
		if( (history)==(null) ) return;

		//---------------------------------------------------------------------------------------------------------------------------
		// -
		//---------------------------------------------------------------------------------------------------------------------------
		ON();

		//---------------------------------------------------------------------------------------------------------------------------
		// -
		//---------------------------------------------------------------------------------------------------------------------------
	}

	//-------------------------------------------------------------------------------------------------------------------------------
	// 히스토리를 활성화 하기 위한 함수
	//-------------------------------------------------------------------------------------------------------------------------------
	public void ActiveHistory( tagHistory history )
	{
		//---------------------------------------------------------------------------------------------------------------------------
		// -
		//---------------------------------------------------------------------------------------------------------------------------
		if( (history)==(null) ) return;

		//---------------------------------------------------------------------------------------------------------------------------
		// -
		//---------------------------------------------------------------------------------------------------------------------------
		if( Is(true) )
		{
			if( !IsActive() )
			{
				Active();
			}
		}
		else
		{
			OnHistory( history );
		}

		//---------------------------------------------------------------------------------------------------------------------------
		// -
		//---------------------------------------------------------------------------------------------------------------------------
	}

	//-------------------------------------------------------------------------------------------------------------------------------
	// 풀스크린 인터페이스로 설정하기 위한 함수
	//-------------------------------------------------------------------------------------------------------------------------------
	public void Fullscreen( tagHistory history=(null) )
	{
		//---------------------------------------------------------------------------------------------------------------------------
		// -
		//---------------------------------------------------------------------------------------------------------------------------
//		if( (history)==(null) ) return;		//(NULL)값을 허용함

		//---------------------------------------------------------------------------------------------------------------------------
		// -
		//---------------------------------------------------------------------------------------------------------------------------
		if( (history)==(null) && ( (this)==app.History.GetFore() || app.History.GetFore()==(app.ViewHome) ) )
		{
			return;
		}

		//---------------------------------------------------------------------------------------------------------------------------
		// -
		//---------------------------------------------------------------------------------------------------------------------------
		app.Panel.Fullscreen( (this), (history) );

		//---------------------------------------------------------------------------------------------------------------------------
		// -
		//---------------------------------------------------------------------------------------------------------------------------
		(Data().history) = (history);

		//---------------------------------------------------------------------------------------------------------------------------
		// -
		//---------------------------------------------------------------------------------------------------------------------------
	}

	//-------------------------------------------------------------------------------------------------------------------------------
	// 풀스크린 인터페이스로 설정하기 위한 함수
	//-------------------------------------------------------------------------------------------------------------------------------
	public bool IsFullscreen()
	{
		//---------------------------------------------------------------------------------------------------------------------------
		// -
		//---------------------------------------------------------------------------------------------------------------------------
		return app.Panel.IsFullscreen(this);

		//---------------------------------------------------------------------------------------------------------------------------
		// -
		//---------------------------------------------------------------------------------------------------------------------------
	}

	//-------------------------------------------------------------------------------------------------------------------------------
	// -
	//-------------------------------------------------------------------------------------------------------------------------------
	protected virtual void Enable( bool enable=(true) )
	{
		//---------------------------------------------------------------------------------------------------------------------------
		// -
		//---------------------------------------------------------------------------------------------------------------------------
		if( (enabled)!=(enable) )
		{
			(enabled)	= (enable);
		}

		//---------------------------------------------------------------------------------------------------------------------------
		// -
		//---------------------------------------------------------------------------------------------------------------------------
	}

	public virtual bool IsActive()
	{
		if( Is() && _GameObject().activeSelf )
		{
			return true;
		}

		return false;
	}

	//-------------------------------------------------------------------------------------------------------------------------------
	// 컨트롤 입력에 반응하기 위한 함수
	//-------------------------------------------------------------------------------------------------------------------------------
    public virtual bool ONINPUTEND( UnityEngine.UI.InputField inputField )
    {
		//---------------------------------------------------------------------------------------------------------------------------
		// -
		//---------------------------------------------------------------------------------------------------------------------------
        return false;		
    }

    public virtual void OnNavigationEdit()
    {
    }

	//사운드를 재생하기 위한 함수
	public void funcSound( object wParam=null, object lParam=null )
	{
		if( wParam==null || wParam.GetType()!=typeof(tagSoundStatic) ) return;

		if( app.ViewIndigator.Is() )
		{
			app.ViewIndigator.SetCallback( app.Sound.funcPlay, wParam, lParam );
		}
		else
		{
			app.Sound.ON( wParam as tagSoundStatic );
		}
	}

	//-------------------------------------------------------------------------------------------------------------------------------
	// 사운드를 설정하기 위한 함수
	//-------------------------------------------------------------------------------------------------------------------------------
	public void SetSound( tagSoundStatic soundstatic )
	{
		//---------------------------------------------------------------------------------------------------------------------------
		// -
		//---------------------------------------------------------------------------------------------------------------------------
//		if( (soundstatic)==(null) ) return;		//(NULL)값을 허용함

		//---------------------------------------------------------------------------------------------------------------------------
		// -
		//---------------------------------------------------------------------------------------------------------------------------
		(Data().sound) = (soundstatic);

		//---------------------------------------------------------------------------------------------------------------------------
		// -
		//---------------------------------------------------------------------------------------------------------------------------
	}

	//-------------------------------------------------------------------------------------------------------------------------------
	// 히스토리를 얻기 위한 함수
	//-------------------------------------------------------------------------------------------------------------------------------
	public tagHistory GetHistory()
	{
		//---------------------------------------------------------------------------------------------------------------------------
		// -
		//---------------------------------------------------------------------------------------------------------------------------
		return (Data().history);

		//---------------------------------------------------------------------------------------------------------------------------
		// -
		//---------------------------------------------------------------------------------------------------------------------------
	}

	//-------------------------------------------------------------------------------------------------------------------------------
	// 히스토리를 비교하기 위한 함수
	//-------------------------------------------------------------------------------------------------------------------------------
	public virtual bool Equals( tagHistory _history )
	{
		//---------------------------------------------------------------------------------------------------------------------------
		// -
		//---------------------------------------------------------------------------------------------------------------------------
		if( (_history)==(null) ) return false;

		//---------------------------------------------------------------------------------------------------------------------------
		// -
		//---------------------------------------------------------------------------------------------------------------------------
		if( (_history.panel)==(this) )
		{
			return true;
		}

		//---------------------------------------------------------------------------------------------------------------------------
		// -
		//---------------------------------------------------------------------------------------------------------------------------
		return false;
	}

	//-------------------------------------------------------------------------------------------------------------------------------
	// -
	//-------------------------------------------------------------------------------------------------------------------------------
	protected void OutObjectRegister( GameObject obj )
	{
		//---------------------------------------------------------------------------------------------------------------------------
		// -
		//---------------------------------------------------------------------------------------------------------------------------
		if( (obj)==(null) ) return;

		//---------------------------------------------------------------------------------------------------------------------------
		// -
		//---------------------------------------------------------------------------------------------------------------------------
		if( !Data().OutObjects.Contains(obj) )
		{
			Data().OutObjects.Add(obj);
		}

		//---------------------------------------------------------------------------------------------------------------------------
		// -
		//---------------------------------------------------------------------------------------------------------------------------
	}

	//-------------------------------------------------------------------------------------------------------------------------------
	// -
	//-------------------------------------------------------------------------------------------------------------------------------
	public void OutObjectsActive()
	{
		//---------------------------------------------------------------------------------------------------------------------------
		// -
		//---------------------------------------------------------------------------------------------------------------------------
		if( AllowOutObjectActive() )
		{
			foreach( GameObject obj in Data().OutObjects )
			{
				//-------------------------------------------------------------------------------------------------------------------
				// -
				//-------------------------------------------------------------------------------------------------------------------
				if( (obj)==(null) )
				{
#if UNITY_EDITOR
					Debug.Log(obj);
#endif
					continue;
				}

				//-------------------------------------------------------------------------------------------------------------------
				// -
				//-------------------------------------------------------------------------------------------------------------------
				if( !(obj.activeSelf) && AllowOutObjectActive(obj) )
				{
					Func.Active(obj);
				}

				//-------------------------------------------------------------------------------------------------------------------
				// -
				//-------------------------------------------------------------------------------------------------------------------
			}
		}

		//---------------------------------------------------------------------------------------------------------------------------
		// -
		//---------------------------------------------------------------------------------------------------------------------------
	}

	//-------------------------------------------------------------------------------------------------------------------------------
	// -
	//-------------------------------------------------------------------------------------------------------------------------------
	public void OutObjectsInactive()
	{
		//---------------------------------------------------------------------------------------------------------------------------
		// -
		//---------------------------------------------------------------------------------------------------------------------------
		foreach( GameObject obj in Data().OutObjects )
		{
			Func.Inactive(obj);
		}

		//---------------------------------------------------------------------------------------------------------------------------
		// -
		//---------------------------------------------------------------------------------------------------------------------------
	}

	//-------------------------------------------------------------------------------------------------------------------------------
	// -
	//-------------------------------------------------------------------------------------------------------------------------------
	protected void TransNavigation( GameObject gameObject, bool isActive=(true) )
	{
		//---------------------------------------------------------------------------------------------------------------------------
		// -
		//---------------------------------------------------------------------------------------------------------------------------
		if( (gameObject)==(null) ) return;

		//---------------------------------------------------------------------------------------------------------------------------
		// -
		//---------------------------------------------------------------------------------------------------------------------------
		Transform transform = (gameObject.transform);

		//---------------------------------------------------------------------------------------------------------------------------
		// -
		//---------------------------------------------------------------------------------------------------------------------------
		if( isActive )
		{
			//---------------------------------------------------------------------------------------------------------------------------
			// -
			//---------------------------------------------------------------------------------------------------------------------------
			transform.SetParent( app.ViewNavigation.Transform() );

			//---------------------------------------------------------------------------------------------------------------------------
			// -
			//---------------------------------------------------------------------------------------------------------------------------
			OutObjectRegister( gameObject );

			//-----------------------------------------------------------------------------------------------------------------------
			// -
			//-----------------------------------------------------------------------------------------------------------------------
		}
		else
		{
			Func.Inactive(gameObject);
		}

		//---------------------------------------------------------------------------------------------------------------------------
		// -
		//---------------------------------------------------------------------------------------------------------------------------
	}

	protected virtual bool AllowOutObjectActive()
	{
		return true;
	}

	protected virtual bool AllowOutObjectActive( GameObject obj )
	{
		if( obj==null ) return false;
		return true;
	}
}