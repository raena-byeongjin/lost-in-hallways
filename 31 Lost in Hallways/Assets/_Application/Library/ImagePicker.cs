#if AUP
using System;
using System.Collections;
using UnityEngine;
using UnityEngine.UI;
using Gigadrillgames.AUP.Common;
using Gigadrillgames.AUP.Helpers;
using Gigadrillgames.AUP.Tools;

//-----------------------------------------------------------------------------------------------------------------------------------
// -
//-----------------------------------------------------------------------------------------------------------------------------------
public class ImagePicker : MonoBehaviour
{
	//-------------------------------------------------------------------------------------------------------------------------------
	// -
	//-------------------------------------------------------------------------------------------------------------------------------
	public static ImagePicker	This	= (null);

	//-------------------------------------------------------------------------------------------------------------------------------
	// -
	//-------------------------------------------------------------------------------------------------------------------------------
    private const string		TAG		= "[ImagePickerDemo]: ";

    private SharePlugin			sharePlugin;
    private ImagePickerPlugin	imagePickerPlugin;
    private UtilsPlugin			utilsPlugin;

    public Text					statusText;
    private string				imagePath				= "";

    public RawImage				rawImage;
    public Button				shareButton;

    private Dispatcher			dispatcher;

	//-------------------------------------------------------------------------------------------------------------------------------
	// -
	//-------------------------------------------------------------------------------------------------------------------------------
	public tagCallback			Callback				= new tagCallback();

	//-------------------------------------------------------------------------------------------------------------------------------
    // Use this for initialization
	//-------------------------------------------------------------------------------------------------------------------------------
    void Awake()
    {
		//---------------------------------------------------------------------------------------------------------------------------
		// -
		//---------------------------------------------------------------------------------------------------------------------------
		(This)	= (this);

		//---------------------------------------------------------------------------------------------------------------------------
		// -
		//---------------------------------------------------------------------------------------------------------------------------
	}

	//-------------------------------------------------------------------------------------------------------------------------------
    // Use this for initialization
	//-------------------------------------------------------------------------------------------------------------------------------
    void Start()
    {
		//---------------------------------------------------------------------------------------------------------------------------
		// -
		//---------------------------------------------------------------------------------------------------------------------------
		(dispatcher) = Dispatcher.GetInstance();

		//---------------------------------------------------------------------------------------------------------------------------
		// -
		//---------------------------------------------------------------------------------------------------------------------------0
		(utilsPlugin) = UtilsPlugin.GetInstance();
		utilsPlugin.Init();
		utilsPlugin.SetDebug(0);

		/*
		//---------------------------------------------------------------------------------------------------------------------------
		// -
		//---------------------------------------------------------------------------------------------------------------------------
		(sharePlugin) = SharePlugin.GetInstance();
		sharePlugin.Init();
		sharePlugin.SetDebug(0);
		*/

		//---------------------------------------------------------------------------------------------------------------------------
		// -
		//---------------------------------------------------------------------------------------------------------------------------
		(imagePickerPlugin) = ImagePickerPlugin.GetInstance();
		imagePickerPlugin.Init();
		imagePickerPlugin.SetDebug(0);

		//---------------------------------------------------------------------------------------------------------------------------
		// init image picker instance
		//---------------------------------------------------------------------------------------------------------------------------
//		imagePickerPlugin.Init();

		//---------------------------------------------------------------------------------------------------------------------------
		// add eventlisteners
		//---------------------------------------------------------------------------------------------------------------------------
		AddEventListener();

		//---------------------------------------------------------------------------------------------------------------------------
		// -
		//---------------------------------------------------------------------------------------------------------------------------
//		EnableDisableShareButton( false );

		//---------------------------------------------------------------------------------------------------------------------------
		// -
		//---------------------------------------------------------------------------------------------------------------------------
    }

	//-------------------------------------------------------------------------------------------------------------------------------
	// -
	//-------------------------------------------------------------------------------------------------------------------------------
    private void AddEventListener()
    {
		//---------------------------------------------------------------------------------------------------------------------------
		// -
		//---------------------------------------------------------------------------------------------------------------------------
		ImagePickerPlugin.OnGetImageComplete		+= onGetImageComplete;
		ImagePickerPlugin.OnGetImageCancel			+= onGetImageCancel;
		ImagePickerPlugin.OnGetImageFail			+= onGetImageFail;

		//---------------------------------------------------------------------------------------------------------------------------
		// -
		//---------------------------------------------------------------------------------------------------------------------------
		ImagePickerPlugin.OnGetImageCropComplete	+= onGetImageCropComplete;
		ImagePickerPlugin.OnGetImageCropFail		+= onGetImageCropFail;

		//---------------------------------------------------------------------------------------------------------------------------
		// -
		//---------------------------------------------------------------------------------------------------------------------------
    }

	//-------------------------------------------------------------------------------------------------------------------------------
    // remove event listeners
	//-------------------------------------------------------------------------------------------------------------------------------
    private void RemoveEventListener()
    {
		//---------------------------------------------------------------------------------------------------------------------------
		// -
		//---------------------------------------------------------------------------------------------------------------------------
		ImagePickerPlugin.OnGetImageComplete		-= onGetImageComplete;
		ImagePickerPlugin.OnGetImageCancel			-= onGetImageCancel;
		ImagePickerPlugin.OnGetImageFail			-= onGetImageFail;

		//---------------------------------------------------------------------------------------------------------------------------
		// -
		//---------------------------------------------------------------------------------------------------------------------------
		ImagePickerPlugin.OnGetImageCropComplete	-= onGetImageCropComplete;
		ImagePickerPlugin.OnGetImageCropFail		-= onGetImageCropFail;

		//---------------------------------------------------------------------------------------------------------------------------
		// -
		//---------------------------------------------------------------------------------------------------------------------------
    }

	//-------------------------------------------------------------------------------------------------------------------------------
	// -
	//-------------------------------------------------------------------------------------------------------------------------------
    private void OnDestroy()
    {
		//---------------------------------------------------------------------------------------------------------------------------
		// -
		//---------------------------------------------------------------------------------------------------------------------------
        RemoveEventListener();

		//---------------------------------------------------------------------------------------------------------------------------
		// -
		//---------------------------------------------------------------------------------------------------------------------------
    }

	//-------------------------------------------------------------------------------------------------------------------------------
	// -
	//-------------------------------------------------------------------------------------------------------------------------------
    public static void GetImage()
    {
		//---------------------------------------------------------------------------------------------------------------------------
		// -
		//---------------------------------------------------------------------------------------------------------------------------
		if( (This)!=(null) && (This.imagePickerPlugin)!=(null) )
		{
			This.imagePickerPlugin.GetImage();
		}

		//---------------------------------------------------------------------------------------------------------------------------
		// -
		//---------------------------------------------------------------------------------------------------------------------------
    }
	

	//-------------------------------------------------------------------------------------------------------------------------------
    // 콜백 함수를 설정하기 위한 함수
	//-------------------------------------------------------------------------------------------------------------------------------
	public static void SetCallback( Action<object, object> func, object wParam=(null), object lParam=(null) )
	{
		//---------------------------------------------------------------------------------------------------------------------------
		// -
		//---------------------------------------------------------------------------------------------------------------------------
		if( (func)==(null) ) return;
//		if( (wParam)==(null) ) return;	//(NULL)값을 허용함
//		if( (lParam)==(null) ) return;	//(NULL)값을 허용함

		//---------------------------------------------------------------------------------------------------------------------------
		// -
		//---------------------------------------------------------------------------------------------------------------------------
		if( (This)!=(null) )
		{
			This.Callback.Set( (func), (wParam), (lParam) );
		}

		//---------------------------------------------------------------------------------------------------------------------------
		// -
		//---------------------------------------------------------------------------------------------------------------------------
	}
	//-------------------------------------------------------------------------------------------------------------------------------
	// -
	//-------------------------------------------------------------------------------------------------------------------------------
    public void GetImageCrop()
    {
//		Debug.LogError("[ImagePickerDemo]: GetImageCrop 1st");
        string	folderPath	= utilsPlugin.CreateFolder("Rola", 0);
        if( !folderPath.Equals( "", (StringComparison.Ordinal) ) )
        {
//			Debug.LogError("[ImagePickerDemo]: GetImageCrop 2nd");
            imagePickerPlugin.GetImageCrop( (folderPath)+"/croppyImage.jpg", (180), (180) );
//			EnableDisableShareButton(false);
        }
        else
        {
            Debug.LogError("[ImagePickerDemo]: GetImageCrop folderPath is null 2nd 2nd");
        }
    }

	//-------------------------------------------------------------------------------------------------------------------------------
	// -
	//-------------------------------------------------------------------------------------------------------------------------------
    public void ShareImage()
    {
        if (!imagePath.Equals("", StringComparison.Ordinal))
        {
            sharePlugin.ShareImage("MyPictureSubject", "MyPictureSubjectContent", imagePath);
            UpdateStatus("Sharing Picture");
        }
        else
        {
            Debug.Log("[CameraDemo] imagepath is empty");
            UpdateStatus("can't image path is empty");
        }
    }

	//-------------------------------------------------------------------------------------------------------------------------------
	// -
	//-------------------------------------------------------------------------------------------------------------------------------
    private void UpdateStatus(string status)
    {
		Debug.Log(status);
		/*
        if (statusText != null)
        {
            statusText.text = String.Format("Status: {0}", status);
        }
		*/
    }

	/*
	//-------------------------------------------------------------------------------------------------------------------------------
	// -
	//-------------------------------------------------------------------------------------------------------------------------------
    private void DelayLoadImage()
    {
        //loads texture
        rawImage.texture = Utils.LoadTexture(imagePath);

        UpdateStatus("load image complete");
        EnableDisableShareButton(true);
    }
	*/

	/*
	//-------------------------------------------------------------------------------------------------------------------------------
	// -
	//-------------------------------------------------------------------------------------------------------------------------------
    private void EnableDisableShareButton(bool val)
    {
        shareButton.interactable = val;
    }
	*/

	/*
	//-------------------------------------------------------------------------------------------------------------------------------
	// -
	//-------------------------------------------------------------------------------------------------------------------------------
    private void LoadImageMessage()
    {
        UpdateStatus("Loading Image...");
    }
	*/

	//-------------------------------------------------------------------------------------------------------------------------------
	// -
	//-------------------------------------------------------------------------------------------------------------------------------
    private void onGetImageComplete(string imagePath)
    {
		//---------------------------------------------------------------------------------------------------------------------------
		// -
		//---------------------------------------------------------------------------------------------------------------------------
        dispatcher.InvokeAction(
            () =>
            {
				//-------------------------------------------------------------------------------------------------------------------
				// -
				//-------------------------------------------------------------------------------------------------------------------
                this.imagePath	= imagePath;

//				UpdateStatus("Get Image Complete");

                Invoke("LoadImageMessage", 0.3f);
                Invoke("DelayLoadImage", 0.5f);

//				Debug.Log(TAG + "onGetImageComplete imagePath " + imagePath);

				//-------------------------------------------------------------------------------------------------------------------
				// -
				//-------------------------------------------------------------------------------------------------------------------
				if( this.Callback.Is() )
				{
					if( (this.Callback.lParam)==(null) ) (this.Callback.lParam)	= (imagePath);
					this.Callback.Call();
				}

				//-------------------------------------------------------------------------------------------------------------------
				// -
				//-------------------------------------------------------------------------------------------------------------------
            }
        );

		//---------------------------------------------------------------------------------------------------------------------------
		// -
		//---------------------------------------------------------------------------------------------------------------------------
    }

	//-------------------------------------------------------------------------------------------------------------------------------
	// -
	//-------------------------------------------------------------------------------------------------------------------------------
    private void onGetImageCancel()
    {
        dispatcher.InvokeAction(
            () => { UpdateStatus("onGetImageCancel"); }
        );
    }

	//-------------------------------------------------------------------------------------------------------------------------------
	// -
	//-------------------------------------------------------------------------------------------------------------------------------
    private void onGetImageFail()
    {
        dispatcher.InvokeAction(
            () => { UpdateStatus("onGetImageFail"); }
        );
    }

	//-------------------------------------------------------------------------------------------------------------------------------
	// -
	//-------------------------------------------------------------------------------------------------------------------------------
    private void onGetImageCropComplete( string imagePath )
    {
        dispatcher.InvokeAction(
            () =>
            {
				//-------------------------------------------------------------------------------------------------------------------
				// -
				//-------------------------------------------------------------------------------------------------------------------
                this.imagePath	= imagePath;

//				UpdateStatus("Get Image Crop Complete");

                Invoke("LoadImageMessage", 0.3f);
                Invoke("DelayLoadImage", 0.5f);

                string	base64		= utilsPlugin.GetImageBase64(imagePath);
                string	folderPath	= utilsPlugin.CreateRootFolder("AUPCropImageFolder");

				//-------------------------------------------------------------------------------------------------------------------
                // generate timestamp based on current time on the device
				//-------------------------------------------------------------------------------------------------------------------
                string	imageID		= TimeHelper.GetMilliSecondSinceEpoch().ToString();

                if( !folderPath.Equals( "", (StringComparison.Ordinal) ) )
                {
                    utilsPlugin.SaveImageBase64(base64, folderPath + "/" + imageID + ".jpg");
                }

//				Debug.Log(TAG + "onGetImageCropComplete imagePath " + imagePath);

                string	testPath	= utilsPlugin.getExternalStorageDirectory() + "/" + "AUPCropImageFolder" + "/" +
										imageID + ".jpg";
                base64	= utilsPlugin.GetImageBase64(testPath);

				//-------------------------------------------------------------------------------------------------------------------
                // bonus you can also create hidden folder and save image inside it
				//-------------------------------------------------------------------------------------------------------------------
                string	newfolderPath	= utilsPlugin.CreateRootFolder(".SecretContainerImage");
				string	filepath		= (null);
                if( !newfolderPath.Equals( "", (StringComparison.Ordinal) ) )
                {
                    (filepath)	= utilsPlugin.SaveImageBase64(base64, newfolderPath + "/testImage22.jpg");
                }

				//-------------------------------------------------------------------------------------------------------------------
				// -
				//-------------------------------------------------------------------------------------------------------------------
				Debug.Log("(1) => "+this.imagePath);
				Debug.Log("(2) => "+testPath);
				Debug.Log("(3) => "+filepath);

				//-------------------------------------------------------------------------------------------------------------------
				// -
				//-------------------------------------------------------------------------------------------------------------------
            }
        );
    }

	//-------------------------------------------------------------------------------------------------------------------------------
	// -
	//-------------------------------------------------------------------------------------------------------------------------------
    private void onGetImageCropFail()
    {
        dispatcher.InvokeAction(
            () =>
            {
                UpdateStatus("onGetImageCropFail");
                Debug.Log(TAG + "onGetImageCropFail failed ");
            }
        );
    }

	//-------------------------------------------------------------------------------------------------------------------------------
	// -
	//-------------------------------------------------------------------------------------------------------------------------------
}

//-----------------------------------------------------------------------------------------------------------------------------------
// -
//-----------------------------------------------------------------------------------------------------------------------------------
#endif