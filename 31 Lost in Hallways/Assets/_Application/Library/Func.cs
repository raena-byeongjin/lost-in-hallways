#if UNITY_EDITOR
	using UnityEditor;
#endif
using UnityEngine;
using UnityEngine.SceneManagement;
using UnityEngine.UI;
//using UnityEngine.Profiling;
using System.Collections;
using System.Text.RegularExpressions;
using System.Collections.Generic;
using System.IO;
using System;

//-----------------------------------------------------------------------------------------------------------------------------------
// -
//-----------------------------------------------------------------------------------------------------------------------------------
public class Func
{
	//-------------------------------------------------------------------------------------------------------------------------------
	// -
	//-------------------------------------------------------------------------------------------------------------------------------
    public static RaycastHit    h;

	//-------------------------------------------------------------------------------------------------------------------------------
	// -
	//-------------------------------------------------------------------------------------------------------------------------------
    public static bool Pick( Collider collider, objCamera camera )
    {
	    //---------------------------------------------------------------------------------------------------------------------------
	    // -
	    //---------------------------------------------------------------------------------------------------------------------------
        if( (collider)==(null) ) return false;
        if( (camera)==(null) ) return false;

	    //---------------------------------------------------------------------------------------------------------------------------
	    // -
	    //---------------------------------------------------------------------------------------------------------------------------
        if( collider.Raycast( camera.Ray(), out h, (camera.Far()+camera.Near()) ) )
        {
            return true;
        }

	    //---------------------------------------------------------------------------------------------------------------------------
	    // -
	    //---------------------------------------------------------------------------------------------------------------------------
        return false;
    }

	//-------------------------------------------------------------------------------------------------------------------------------
	// -
	//-------------------------------------------------------------------------------------------------------------------------------
    public static bool Pick( objCamera camera, int layerMask )
    {
	    //---------------------------------------------------------------------------------------------------------------------------
	    // -
	    //---------------------------------------------------------------------------------------------------------------------------
        if( (camera)==(null) ) return false;

	    //---------------------------------------------------------------------------------------------------------------------------
	    // -
	    //---------------------------------------------------------------------------------------------------------------------------
        if( Physics.Raycast( camera.Ray(), out h, (camera.Far()-camera.Near()), (layerMask) ) )
        {
            return true;
        }

	    //---------------------------------------------------------------------------------------------------------------------------
	    // -
	    //---------------------------------------------------------------------------------------------------------------------------
        return false;
    }

	//-------------------------------------------------------------------------------------------------------------------------------
	// RaycastHit의 포인터를 얻기 위한 함수
	//-------------------------------------------------------------------------------------------------------------------------------
    public static RaycastHit GetRaycastHit()
    {
	    //---------------------------------------------------------------------------------------------------------------------------
	    // -
	    //---------------------------------------------------------------------------------------------------------------------------
        return (h);

	    //---------------------------------------------------------------------------------------------------------------------------
	    // -
	    //---------------------------------------------------------------------------------------------------------------------------
    }

	//-------------------------------------------------------------------------------------------------------------------------------
	// 두 벡터 사이의 거리를 얻기 위한 함수
	//-------------------------------------------------------------------------------------------------------------------------------
    public static float GetDistance( Vector3 vector1, Vector3 vector2 )
    {
	    //---------------------------------------------------------------------------------------------------------------------------
	    // -
	    //---------------------------------------------------------------------------------------------------------------------------
        if( (vector1)==(null) ) return (0);
        if( (vector2)==(null) ) return (0);

	    //---------------------------------------------------------------------------------------------------------------------------
	    // -
	    //---------------------------------------------------------------------------------------------------------------------------
        Vector3     vDistance   = (vector1) - (vector2);

	    //---------------------------------------------------------------------------------------------------------------------------
	    // -
	    //---------------------------------------------------------------------------------------------------------------------------
        return (vDistance.magnitude);
    }

    //-------------------------------------------------------------------------------------------------------------------------------
    // 두 점의 거리를 얻기 위한 함수
    //-------------------------------------------------------------------------------------------------------------------------------
    public static float GetDistance( float x1, float y1, float x2, float y2 )
    {
	    //---------------------------------------------------------------------------------------------------------------------------
	    // -
	    //---------------------------------------------------------------------------------------------------------------------------
	    float			width, height;

	    //---------------------------------------------------------------------------------------------------------------------------
	    // -
	    //---------------------------------------------------------------------------------------------------------------------------
	    (width)			= (x1) - (x2);
	    (height)		= (y1) - (y2);

	    //---------------------------------------------------------------------------------------------------------------------------
	    // -
	    //---------------------------------------------------------------------------------------------------------------------------
	    return Mathf.Sqrt( (width)*(width) + (height)*(height) );

	    //---------------------------------------------------------------------------------------------------------------------------
	    // -
	    //---------------------------------------------------------------------------------------------------------------------------
    }

	//-------------------------------------------------------------------------------------------------------------------------------
	// 나누셈을 처리하기 위한 함수
	//-------------------------------------------------------------------------------------------------------------------------------
    public static float Divide( int value1, int value2 )
    {
	    //---------------------------------------------------------------------------------------------------------------------------
	    // -
	    //---------------------------------------------------------------------------------------------------------------------------
        if( (value2)!=(0) )
        {
            return (value1) / (float)(value2);
        }

	    //---------------------------------------------------------------------------------------------------------------------------
	    // -
	    //---------------------------------------------------------------------------------------------------------------------------
        return (0);
    }

	//-------------------------------------------------------------------------------------------------------------------------------
	// 나누셈을 처리하기 위한 함수
	//-------------------------------------------------------------------------------------------------------------------------------
    public static Vector3 Divide( Vector3 vector, int value )
    {
	    //---------------------------------------------------------------------------------------------------------------------------
	    // -
	    //---------------------------------------------------------------------------------------------------------------------------
		(vector.x)	= Divide( (vector.x), (value) );
		(vector.y)	= Divide( (vector.y), (value) );
		(vector.z)	= Divide( (vector.z), (value) );

	    //---------------------------------------------------------------------------------------------------------------------------
	    // -
	    //---------------------------------------------------------------------------------------------------------------------------
        return (vector);
    }

	//-------------------------------------------------------------------------------------------------------------------------------
	// 나누셈을 처리하기 위한 함수
	//-------------------------------------------------------------------------------------------------------------------------------
    public static float Divide( float value1, float value2 )
    {
	    //---------------------------------------------------------------------------------------------------------------------------
	    // -
	    //---------------------------------------------------------------------------------------------------------------------------
        if( (value2)!=(0) )
        {
            return (value1) / (value2);
        }

	    //---------------------------------------------------------------------------------------------------------------------------
	    // -
	    //---------------------------------------------------------------------------------------------------------------------------
        return (0);
    }

	//-------------------------------------------------------------------------------------------------------------------------------
	// 나누셈을 처리하기 위한 함수
	//-------------------------------------------------------------------------------------------------------------------------------
    public static decimal Divide( decimal value1, decimal value2 )
    {
	    //---------------------------------------------------------------------------------------------------------------------------
	    // -
	    //---------------------------------------------------------------------------------------------------------------------------
        if( (value2)!=(0) )
        {
            return (value1) / (value2);
        }

	    //---------------------------------------------------------------------------------------------------------------------------
	    // -
	    //---------------------------------------------------------------------------------------------------------------------------
        return (0);
    }

	//-------------------------------------------------------------------------------------------------------------------------------
	// 나누셈을 처리하기 위한 함수
	//-------------------------------------------------------------------------------------------------------------------------------
    public static float Dividef( int value1, int value2 )
    {
	    //---------------------------------------------------------------------------------------------------------------------------
	    // -
	    //---------------------------------------------------------------------------------------------------------------------------
		return Divide( (float)(value1), (float)(value2) );

	    //---------------------------------------------------------------------------------------------------------------------------
	    // -
	    //---------------------------------------------------------------------------------------------------------------------------
    }

	//-------------------------------------------------------------------------------------------------------------------------------
	// 나누셈을 처리하기 위한 함수
	//-------------------------------------------------------------------------------------------------------------------------------
    public static float Dividef( long value1, long value2 )
    {
	    //---------------------------------------------------------------------------------------------------------------------------
	    // -
	    //---------------------------------------------------------------------------------------------------------------------------
        if( (value2)!=(0) )
        {
            return (float)( (double)(value1) / (double)(value2) );
        }

	    //---------------------------------------------------------------------------------------------------------------------------
	    // -
	    //---------------------------------------------------------------------------------------------------------------------------
		return (0);
    }

    //-------------------------------------------------------------------------------------------------------------------------------
    // 벡터의 각도를 얻기 위한 함수
    //-------------------------------------------------------------------------------------------------------------------------------
    public static float GetAngle( float x1, float y1, float x2, float y2 )
    {
	    //---------------------------------------------------------------------------------------------------------------------------
	    // -
	    //---------------------------------------------------------------------------------------------------------------------------
        if( (x1)==(x2) && (y1)==(y2) ) return (0);

	    //---------------------------------------------------------------------------------------------------------------------------
	    // -
	    //---------------------------------------------------------------------------------------------------------------------------
	    float			width, height;

	    float			r;

	    float			fAngle;

	    //---------------------------------------------------------------------------------------------------------------------------
	    // -
	    //---------------------------------------------------------------------------------------------------------------------------
	    (width)			= Mathf.Max(x1, x2) - Mathf.Min(x1, x2);
	    (height)		= Mathf.Max(y1, y2) - Mathf.Min(y1, y2);

		//---------------------------------------------------------------------------------------------------------------------------
		// -
		//---------------------------------------------------------------------------------------------------------------------------
		(r)				= Mathf.Sqrt( (width)*(width) + (height)*(height) );

	    //---------------------------------------------------------------------------------------------------------------------------
	    // -
	    //---------------------------------------------------------------------------------------------------------------------------
	    (fAngle)		= Mathf.Acos( width/r );

	    (fAngle)		= (Mathf.PI) - (fAngle);

	    //---------------------------------------------------------------------------------------------------------------------------
	    // -
	    //---------------------------------------------------------------------------------------------------------------------------
	    if( (height)<(0) )
	    {
		    (fAngle)	= (Mathf.PI*2) - (fAngle);
	    }

	    //---------------------------------------------------------------------------------------------------------------------------
	    // -
	    //---------------------------------------------------------------------------------------------------------------------------
	    return (fAngle);
	}

	//-------------------------------------------------------------------------------------------------------------------------------
	// 벡터의 각도를 얻기 위한 함수
	//-------------------------------------------------------------------------------------------------------------------------------
	public static float GetAngle( float x1, float y1 )
	{
		//---------------------------------------------------------------------------------------------------------------------------
		// -
		//---------------------------------------------------------------------------------------------------------------------------
		float width, height;

		float r;

		float fAngle;

		//---------------------------------------------------------------------------------------------------------------------------
		// -
		//---------------------------------------------------------------------------------------------------------------------------
		(width)		= (x1);
		(height)	= (y1);

		//---------------------------------------------------------------------------------------------------------------------------
		// -
		//---------------------------------------------------------------------------------------------------------------------------
		(r) = Mathf.Sqrt( (width) * (width) + (height) * (height) );

		//---------------------------------------------------------------------------------------------------------------------------
		// -
		//---------------------------------------------------------------------------------------------------------------------------
		(fAngle) = Mathf.Acos(width / r);
		(fAngle) = (Mathf.PI) - (fAngle);

		//---------------------------------------------------------------------------------------------------------------------------
		// -
		//---------------------------------------------------------------------------------------------------------------------------
		if( (height)<(0) )
		{
			(fAngle) = (Mathf.PI*2) - (fAngle);
		}

		//---------------------------------------------------------------------------------------------------------------------------
		// -
		//---------------------------------------------------------------------------------------------------------------------------
		return (fAngle);
	}

	//-------------------------------------------------------------------------------------------------------------------------------
	// 벡터의 각도를 얻기 위한 함수
	//-------------------------------------------------------------------------------------------------------------------------------
	public static float GetAngle( Vector2 vector )
	{
		//---------------------------------------------------------------------------------------------------------------------------
		// -
		//---------------------------------------------------------------------------------------------------------------------------
		return GetAngle( (vector.x), (vector.y) );

		//---------------------------------------------------------------------------------------------------------------------------
		// -
		//---------------------------------------------------------------------------------------------------------------------------
	}

	//-------------------------------------------------------------------------------------------------------------------------------
	// 회전 방향을 얻기 위한 함수
	//-------------------------------------------------------------------------------------------------------------------------------
	public static float Rotate( float angle1, float angle2, float fRotate )
    {
	    //---------------------------------------------------------------------------------------------------------------------------
	    // -
	    //---------------------------------------------------------------------------------------------------------------------------
        float       fAngle      = (0);

	    //---------------------------------------------------------------------------------------------------------------------------
	    // -
	    //---------------------------------------------------------------------------------------------------------------------------
        if( (angle1)<(0) ) (angle1) += (360);
        if( (angle2)<(0) ) (angle2) += (360);

	    //---------------------------------------------------------------------------------------------------------------------------
	    // -
	    //---------------------------------------------------------------------------------------------------------------------------
        if( (angle1)<(angle2) )
        {
	        //-----------------------------------------------------------------------------------------------------------------------
	        // -
	        //-----------------------------------------------------------------------------------------------------------------------
            float       f1  = Mathf.Abs( (angle1) - (angle2) );
            float       f2  = (360) + ( (angle1) - (angle2) );

	        //-----------------------------------------------------------------------------------------------------------------------
	        // -
	        //-----------------------------------------------------------------------------------------------------------------------
            if( (f1)>(f2) )
            {
                if( Mathf.Abs(f2)>(fRotate) )
                {
                    (fAngle)    = -(fRotate);
                }
                else
                {
                    (fAngle)    = -Mathf.Abs(f2);
                }
            }
            else
            {
                if( Mathf.Abs(f1)>(fRotate) )
                {
                    (fAngle)    = (fRotate);
                }
                else
                {
                    (fAngle)    = Mathf.Abs(f1);
                }
            }

	        //-----------------------------------------------------------------------------------------------------------------------
	        // -
	        //-----------------------------------------------------------------------------------------------------------------------
        }
        else
        {
	        //-----------------------------------------------------------------------------------------------------------------------
	        // -
	        //-----------------------------------------------------------------------------------------------------------------------
            float   f1  = (angle1) - (angle2);
            float   f2  = (360) - ( (angle1) - (angle2) );

	        //-----------------------------------------------------------------------------------------------------------------------
	        // -
	        //-----------------------------------------------------------------------------------------------------------------------
            if( (f1)>(f2) )
            {
                if( Mathf.Abs(f2)>(fRotate) )
                {
                    (fAngle)    = (fRotate);
                }
                else
                {
                    (fAngle)    = Mathf.Abs(f2);
                }
            }
            else
            {
                if( Mathf.Abs(f1)>(fRotate) )
                {
                    (fAngle)    = -(fRotate);
                }
                else
                {
                    (fAngle)    = -Mathf.Abs(f1);
                }
            }

	        //-----------------------------------------------------------------------------------------------------------------------
	        // -
	        //-----------------------------------------------------------------------------------------------------------------------
        }

	    //---------------------------------------------------------------------------------------------------------------------------
	    // -
	    //---------------------------------------------------------------------------------------------------------------------------
        return (fAngle);
    }

	//-------------------------------------------------------------------------------------------------------------------------------
	// 스프라이트의 가로 너비를 얻기 위한 함수
	//-------------------------------------------------------------------------------------------------------------------------------
	/*
    public static float GetWidth( UISprite uisprite )
    {
	    //---------------------------------------------------------------------------------------------------------------------------
	    // -
	    //---------------------------------------------------------------------------------------------------------------------------
        if( (uisprite)==(null) ) return (0.0f);

	    //---------------------------------------------------------------------------------------------------------------------------
	    // -
	    //---------------------------------------------------------------------------------------------------------------------------
        UIAtlas.Sprite  sprite  = (uisprite.GetAtlasSprite());
        if( (sprite)!=(null) )
        {
            return (sprite.outer.width);
        }

	    //---------------------------------------------------------------------------------------------------------------------------
	    // -
	    //---------------------------------------------------------------------------------------------------------------------------
        return (0.0f);
    }
	*/

	//-------------------------------------------------------------------------------------------------------------------------------
	// 스프라이트의 세로 높이를 얻기 위한 함수
	//-------------------------------------------------------------------------------------------------------------------------------
	/*
    public static float GetHeight( UISprite uisprite )
    {
	    //---------------------------------------------------------------------------------------------------------------------------
	    // -
	    //---------------------------------------------------------------------------------------------------------------------------
        if( (uisprite)==(null) ) return (0.0f);

	    //---------------------------------------------------------------------------------------------------------------------------
	    // -
	    //---------------------------------------------------------------------------------------------------------------------------
        UIAtlas.Sprite  sprite  = (uisprite.GetAtlasSprite());
        if( (sprite)!=(null) )
        {
            return (sprite.outer.height);
        }

	    //---------------------------------------------------------------------------------------------------------------------------
	    // -
	    //---------------------------------------------------------------------------------------------------------------------------
        return (0.0f);
    }
	*/

	//-------------------------------------------------------------------------------------------------------------------------------
	// 스프라이트 컴포넌트를 얻기 위한 함수
	//-------------------------------------------------------------------------------------------------------------------------------
	/*
    public static UISprite GetSprite( Transform obj )
    {
	    //---------------------------------------------------------------------------------------------------------------------------
	    // -
	    //---------------------------------------------------------------------------------------------------------------------------
        if( (obj)==(null) ) return (null);

	    //---------------------------------------------------------------------------------------------------------------------------
	    // -
	    //---------------------------------------------------------------------------------------------------------------------------
        return (obj.GetComponent(typeof(UISprite)) as UISprite);

	    //---------------------------------------------------------------------------------------------------------------------------
	    // -
	    //---------------------------------------------------------------------------------------------------------------------------
    }
	*/

	//-------------------------------------------------------------------------------------------------------------------------------
	// 델타타임 값을 얻기 위한 함수
	//-------------------------------------------------------------------------------------------------------------------------------
    static float    lastDeltaTime;
    static float    deltaTime;

    public static float DeltaTime( bool UnscaleTime=(false) )
    {
	    //---------------------------------------------------------------------------------------------------------------------------
	    // -
	    //---------------------------------------------------------------------------------------------------------------------------
        float   FrameRate       = (Application.targetFrameRate);
        if( (FrameRate)==(-1) ) (FrameRate) = (60);

	    //---------------------------------------------------------------------------------------------------------------------------
	    // -
	    //---------------------------------------------------------------------------------------------------------------------------
        float   time            = (Time.time);

	    //---------------------------------------------------------------------------------------------------------------------------
	    // -
	    //---------------------------------------------------------------------------------------------------------------------------
        if( (time)>(lastDeltaTime) )
        {
			//-----------------------------------------------------------------------------------------------------------------------
		    // -
		    //-----------------------------------------------------------------------------------------------------------------------
			if( UnscaleTime )
			{
				(deltaTime)         = (1) / (1/FrameRate) * (Time.unscaledDeltaTime);
			}
			else
			{
				(deltaTime)         = (1) / (1/FrameRate) * (Time.deltaTime);
			}

			//-----------------------------------------------------------------------------------------------------------------------
		    // -
		    //-----------------------------------------------------------------------------------------------------------------------
            (lastDeltaTime)     = (time);

			//-----------------------------------------------------------------------------------------------------------------------
		    // -
		    //-----------------------------------------------------------------------------------------------------------------------
        }

	    //---------------------------------------------------------------------------------------------------------------------------
	    // -
	    //---------------------------------------------------------------------------------------------------------------------------
        return (deltaTime);
    }

	//-------------------------------------------------------------------------------------------------------------------------------
	// 컬러값을 얻기 위한 함수
	//-------------------------------------------------------------------------------------------------------------------------------
    public static Color Color( float r, float g, float b )
    {
	    //---------------------------------------------------------------------------------------------------------------------------
	    // -
	    //---------------------------------------------------------------------------------------------------------------------------
        return new Color( (r/255f), (g/255f), (b/255f) );

	    //---------------------------------------------------------------------------------------------------------------------------
	    // -
	    //---------------------------------------------------------------------------------------------------------------------------
    }

	//-------------------------------------------------------------------------------------------------------------------------------
	// 컬러값을 얻기 위한 함수
	//-------------------------------------------------------------------------------------------------------------------------------
    public static Color Color( float r, float g, float b, float a )
    {
	    //---------------------------------------------------------------------------------------------------------------------------
	    // -
	    //---------------------------------------------------------------------------------------------------------------------------
        return new Color( (r/255f), (g/255f), (b/255f), (a) );

	    //---------------------------------------------------------------------------------------------------------------------------
	    // -
	    //---------------------------------------------------------------------------------------------------------------------------
    }

	//-------------------------------------------------------------------------------------------------------------------------------
	// 컬러값을 얻기 위한 함수
	//-------------------------------------------------------------------------------------------------------------------------------
    public static Color Color( Color color, float a )
    {
	    //---------------------------------------------------------------------------------------------------------------------------
	    // -
	    //---------------------------------------------------------------------------------------------------------------------------
		if( (a)<(0) ) (a) = (0);

	    //---------------------------------------------------------------------------------------------------------------------------
	    // -
	    //---------------------------------------------------------------------------------------------------------------------------
        return new Color( (color.r), (color.g), (color.b), (a) );
    }

	//-------------------------------------------------------------------------------------------------------------------------------
	// 오브젝트를 생성하기 위한 함수
	//-------------------------------------------------------------------------------------------------------------------------------
    public static GameObject Instantiate( Transform parent, UnityEngine.Object sample, bool InitLayer=(true) )
    {
	    //---------------------------------------------------------------------------------------------------------------------------
	    // -
	    //---------------------------------------------------------------------------------------------------------------------------
//		if( (parent)==(null) ) return (null);	//(NULL) 값을 허용함
		if( (sample)==(null) ) return (null);

	    //---------------------------------------------------------------------------------------------------------------------------
	    // -
	    //---------------------------------------------------------------------------------------------------------------------------
        return (Instantiate( (parent), (sample), new Vector3(), (Quaternion.identity), (InitLayer) ) as GameObject);
    }

	//-------------------------------------------------------------------------------------------------------------------------------
	// 오브젝트를 생성하기 위한 함수
	//-------------------------------------------------------------------------------------------------------------------------------
    public static GameObject Instantiate( Transform parent, UnityEngine.Object sample, Vector3 vPos, bool InitLayer=(true) )
    {
	    //---------------------------------------------------------------------------------------------------------------------------
	    // -
	    //---------------------------------------------------------------------------------------------------------------------------
//		if( (parent)==(null) ) return (null);	//(NULL) 값을 허용함
		if( (sample)==(null) ) return (null);

	    //---------------------------------------------------------------------------------------------------------------------------
	    // -
	    //---------------------------------------------------------------------------------------------------------------------------
        return (Instantiate( (parent), (sample), (vPos), (Quaternion.identity), (InitLayer) ) as GameObject);
    }

	//-------------------------------------------------------------------------------------------------------------------------------
	// 오브젝트를 생성하기 위한 함수
	//-------------------------------------------------------------------------------------------------------------------------------
    public static GameObject Instantiate( Transform parent, UnityEngine.Object sample, Vector3 vPos, Quaternion rotation, bool InitLayer=(true) )
    {
	    //---------------------------------------------------------------------------------------------------------------------------
	    // -
	    //---------------------------------------------------------------------------------------------------------------------------
//		if( (parent)==(null) ) return (null);	//(NULL) 값을 허용함
		if( (sample)==(null) ) return (null);

	    //---------------------------------------------------------------------------------------------------------------------------
	    // -
	    //---------------------------------------------------------------------------------------------------------------------------
		GameObject		obj				= (GameObject.Instantiate(sample) as GameObject);
		Transform		transform		= (obj.transform);

	    //---------------------------------------------------------------------------------------------------------------------------
	    // -
	    //---------------------------------------------------------------------------------------------------------------------------
		(transform.parent)				= (parent);
		(transform.position)			= (vPos);
		(transform.localRotation)		= (rotation);

	    //---------------------------------------------------------------------------------------------------------------------------
	    // -
	    //---------------------------------------------------------------------------------------------------------------------------
		if( (parent)!=(null) && (InitLayer) )
		{
			Library.SetLayer( (transform), (parent.gameObject.layer) );
		}

	    //---------------------------------------------------------------------------------------------------------------------------
	    // -
	    //---------------------------------------------------------------------------------------------------------------------------
		return (obj);
    }

	//-------------------------------------------------------------------------------------------------------------------------------
	// 무작위 문자열을 얻기 위한 함수
	//-------------------------------------------------------------------------------------------------------------------------------
    public static string RandPass( int Length=(20) )
    {
	    //---------------------------------------------------------------------------------------------------------------------------
	    // -
	    //---------------------------------------------------------------------------------------------------------------------------
        int         i;

        string      pass    = "";

        string      ch      = "";

	    //---------------------------------------------------------------------------------------------------------------------------
	    // -
	    //---------------------------------------------------------------------------------------------------------------------------
        for( i=0; i<(Length); i++ )
        {
	        //-----------------------------------------------------------------------------------------------------------------------
	        // -
	        //-----------------------------------------------------------------------------------------------------------------------
            int     r   = UnityEngine.Random.Range( (0), (16) );

	        //-----------------------------------------------------------------------------------------------------------------------
	        // -
	        //-----------------------------------------------------------------------------------------------------------------------
            if( (r)<(10) )
            {
                (ch)    = (r.ToString());
            }
            else
            {
                (r)     = 'a'+(r-10);
                (ch)    = System.Convert.ToChar(r).ToString();
            }

	        //-----------------------------------------------------------------------------------------------------------------------
	        // -
	        //-----------------------------------------------------------------------------------------------------------------------
            (pass)          += (ch);

	        //-----------------------------------------------------------------------------------------------------------------------
	        // -
	        //-----------------------------------------------------------------------------------------------------------------------
        }

	    //---------------------------------------------------------------------------------------------------------------------------
	    // -
	    //---------------------------------------------------------------------------------------------------------------------------
        return (pass);
    }

	//-------------------------------------------------------------------------------------------------------------------------------
	// 텍스쳐를 설정하기 위한 함수
	//-------------------------------------------------------------------------------------------------------------------------------
	/*
    public static void SetTexture( Transform obj, Texture texture )
    {
	    //---------------------------------------------------------------------------------------------------------------------------
	    // -
	    //---------------------------------------------------------------------------------------------------------------------------
        if( (obj)==(null) ) return;

	    //---------------------------------------------------------------------------------------------------------------------------
	    // -
	    //---------------------------------------------------------------------------------------------------------------------------
        Renderer        renderer    = (obj.renderer);
        if( (renderer)==(null) ) return;

	    //---------------------------------------------------------------------------------------------------------------------------
	    // -
	    //---------------------------------------------------------------------------------------------------------------------------
        Material        material    = (renderer.material);
        if( (material)==(null) ) return;

	    //---------------------------------------------------------------------------------------------------------------------------
	    // -
	    //---------------------------------------------------------------------------------------------------------------------------
        (material.mainTexture)      = (texture);

	    //---------------------------------------------------------------------------------------------------------------------------
	    // -
	    //---------------------------------------------------------------------------------------------------------------------------
    }
	*/

	//-------------------------------------------------------------------------------------------------------------------------------
	// 자식 객체를 검색하기 위한 함수
	//-------------------------------------------------------------------------------------------------------------------------------
    public static Transform Find( Transform obj, string name )
    {
	    //---------------------------------------------------------------------------------------------------------------------------
	    // -
	    //---------------------------------------------------------------------------------------------------------------------------
        if( (obj)==(null) ) return (null);
        if( (name)==(null) ) return (null);

	    //---------------------------------------------------------------------------------------------------------------------------
	    // -
	    //---------------------------------------------------------------------------------------------------------------------------
        int             i;

        Transform       child;

        Transform       find;

	    //---------------------------------------------------------------------------------------------------------------------------
	    // -
	    //---------------------------------------------------------------------------------------------------------------------------
        for( i=0; i<(obj.childCount); i++ )
        {
	        //-----------------------------------------------------------------------------------------------------------------------
	        // -
	        //-----------------------------------------------------------------------------------------------------------------------
            (child)     = obj.GetChild(i);
            
	        //-----------------------------------------------------------------------------------------------------------------------
	        // -
	        //-----------------------------------------------------------------------------------------------------------------------
            if( (child)!=(null) )
            {
	            //-------------------------------------------------------------------------------------------------------------------
	            // -
	            //-------------------------------------------------------------------------------------------------------------------
                if( (child.name)==(name) )
                {
                    return (child);
                }
                
	            //-------------------------------------------------------------------------------------------------------------------
	            // -
	            //-------------------------------------------------------------------------------------------------------------------
                (find)  = Find( (child), (name) );
                if( (find)!=(null)  )
                {
                    return (find);
                }

	            //-------------------------------------------------------------------------------------------------------------------
	            // -
	            //-------------------------------------------------------------------------------------------------------------------
            }

	        //-----------------------------------------------------------------------------------------------------------------------
	        // -
	        //-----------------------------------------------------------------------------------------------------------------------
        }

	    //---------------------------------------------------------------------------------------------------------------------------
	    // -
	    //---------------------------------------------------------------------------------------------------------------------------
        return (null);
    }

	//-------------------------------------------------------------------------------------------------------------------------------
	// 쉐이더를 설정하기 위한 함수
	//-------------------------------------------------------------------------------------------------------------------------------
	/*
    public static void Shader( GameObject gameObject, string shaderName )
    {
	    //---------------------------------------------------------------------------------------------------------------------------
	    // -
	    //---------------------------------------------------------------------------------------------------------------------------
        if( (gameObject)==(null) ) return;
        if( (shaderName)==(null) ) return;

	    //---------------------------------------------------------------------------------------------------------------------------
	    // -
	    //---------------------------------------------------------------------------------------------------------------------------
        Renderer        renderer    = (gameObject.renderer);
        if( (renderer)==(null) ) return;

	    //---------------------------------------------------------------------------------------------------------------------------
	    // -
	    //---------------------------------------------------------------------------------------------------------------------------
        Material        material    = (renderer.material);
        if( (material)==(null) ) return;

	    //---------------------------------------------------------------------------------------------------------------------------
	    // -
	    //---------------------------------------------------------------------------------------------------------------------------
        Shader          shader      = (material.shader);
        if( (shader)==(null) ) return;

	    //---------------------------------------------------------------------------------------------------------------------------
	    // -
	    //---------------------------------------------------------------------------------------------------------------------------
        if( (shader.name)!=(shaderName) )
        {
            (gameObject.renderer.material.shader)   = UnityEngine.Shader.Find(shaderName);
        }

	    //---------------------------------------------------------------------------------------------------------------------------
	    // -
	    //---------------------------------------------------------------------------------------------------------------------------
    }
	*/

	//-------------------------------------------------------------------------------------------------------------------------------
	// 오브젝트를 파기하기 위한 함수
	//-------------------------------------------------------------------------------------------------------------------------------
    public static void Destroy( UnityEngine.Object obj )
    {
	    //---------------------------------------------------------------------------------------------------------------------------
	    // -
	    //---------------------------------------------------------------------------------------------------------------------------
        if( (obj)==(null) ) return;
        
	    //---------------------------------------------------------------------------------------------------------------------------
	    // -
	    //---------------------------------------------------------------------------------------------------------------------------
		Component component = (obj as Component);
		if( (component)!=(null) )
		{
			component.transform.SetParent(null);
			GameObject.Destroy( component.gameObject );
		}
		else
		{
			GameObject gameObject = (obj as GameObject);
			if( (gameObject)!=(null) )
			{
				gameObject.transform.SetParent(null);
				GameObject.Destroy( gameObject );
			}
		}

	    //---------------------------------------------------------------------------------------------------------------------------
	    // -
	    //---------------------------------------------------------------------------------------------------------------------------
    }

	//-------------------------------------------------------------------------------------------------------------------------------
	// 오브젝트를 파기하기 위한 함수
	//-------------------------------------------------------------------------------------------------------------------------------
    public static void Delete( UnityEngine.Object obj )
    {
	    //---------------------------------------------------------------------------------------------------------------------------
	    // -
	    //---------------------------------------------------------------------------------------------------------------------------
        if( (obj)==(null) ) return;
        
	    //---------------------------------------------------------------------------------------------------------------------------
	    // -
	    //---------------------------------------------------------------------------------------------------------------------------
		Destroy( obj );

	    //---------------------------------------------------------------------------------------------------------------------------
	    // -
	    //---------------------------------------------------------------------------------------------------------------------------
    }

	//-------------------------------------------------------------------------------------------------------------------------------
	// 오브젝트를 파기하기 위한 함수
	//-------------------------------------------------------------------------------------------------------------------------------
    public static void ChildsDestroy( Transform obj )
    {
	    //---------------------------------------------------------------------------------------------------------------------------
	    // -
	    //---------------------------------------------------------------------------------------------------------------------------
        if( (obj)==(null) ) return;

	    //---------------------------------------------------------------------------------------------------------------------------
	    // -
	    //---------------------------------------------------------------------------------------------------------------------------
        Transform child;

	    //---------------------------------------------------------------------------------------------------------------------------
	    // -
	    //---------------------------------------------------------------------------------------------------------------------------
        while( (obj.childCount)>(0) )
        {
	        //-----------------------------------------------------------------------------------------------------------------------
	        // -
	        //-----------------------------------------------------------------------------------------------------------------------
            (child)     = obj.GetChild(0);

	        //-----------------------------------------------------------------------------------------------------------------------
	        // -
	        //-----------------------------------------------------------------------------------------------------------------------
            if( (child)!=(null) )
            {
				child.SetParent( null );
                Func.Destroy( child );
            }

	        //-----------------------------------------------------------------------------------------------------------------------
	        // -
	        //-----------------------------------------------------------------------------------------------------------------------
        }

	    //---------------------------------------------------------------------------------------------------------------------------
	    // -
	    //---------------------------------------------------------------------------------------------------------------------------
    }
    
	//-------------------------------------------------------------------------------------------------------------------------------
	// -
	//-------------------------------------------------------------------------------------------------------------------------------
    public static Vector3 GetPickPoint()
    {
	    //---------------------------------------------------------------------------------------------------------------------------
	    // -
	    //---------------------------------------------------------------------------------------------------------------------------
        return (h.point);

	    //---------------------------------------------------------------------------------------------------------------------------
	    // -
	    //---------------------------------------------------------------------------------------------------------------------------
    }
    
	//-------------------------------------------------------------------------------------------------------------------------------
	// 조사어를 얻기 위한 함수
	//-------------------------------------------------------------------------------------------------------------------------------
	/*
	public static string PostPosition( string text, string postposition )
	{
		//---------------------------------------------------------------------------------------------------------------------------
		// -
		//---------------------------------------------------------------------------------------------------------------------------
        return (text)+PostPosition_( (text), (postposition) );

		//---------------------------------------------------------------------------------------------------------------------------
		// -
		//---------------------------------------------------------------------------------------------------------------------------
    }

	//-------------------------------------------------------------------------------------------------------------------------------
	// 조사어를 얻기 위한 함수
	//-------------------------------------------------------------------------------------------------------------------------------
	static string PostPosition_( string text, string postposition )
	{
		//---------------------------------------------------------------------------------------------------------------------------
		// -
		//---------------------------------------------------------------------------------------------------------------------------
		if( (text)==(null) ) return (null);
		if( (text)==(postposition) ) return (null);

		//---------------------------------------------------------------------------------------------------------------------------
		// -
		//---------------------------------------------------------------------------------------------------------------------------
        int         i;

        int         length      = (text.Length);

        int         code, temp, temp1, T, V, L;

        string      char1="", char2="", char3="", return1="", return2="", return3="";

		//---------------------------------------------------------------------------------------------------------------------------
		// -
		//---------------------------------------------------------------------------------------------------------------------------
        string[]    LCetable    = {"ㄱ","ㄲ","ㄴ","ㄷ","ㄸ","ㄹ","ㅁ","ㅂ","ㅃ","ㅅ","ㅆ","ㅇ","ㅈ","ㅉ","ㅊ","ㅋ","ㅌ","ㅍ","ㅎ"};
        string[]    MVetable    = {"ㅏ","ㅐ","ㅑ","ㅒ","ㅓ","ㅔ","ㅕ","ㅖ","ㅗ","ㅘ","ㅙ","ㅚ","ㅛ","ㅜ","ㅝ","ㅞ","ㅟ","ㅠ","ㅡ","ㅢ","ㅣ"};
        string[]    TCetable    = {"","ㄱ","ㄲ","ㄳ","ㄴ","ㄵ","ㄶ","ㄷ","ㄹ","ㄺ","ㄻ","ㄼ","ㄽ","ㄾ","ㄿ","ㅀ","ㅁ","ㅂ","ㅄ","ㅅ","ㅆ","ㅇ","ㅈ","ㅊ","ㅋ","ㅌ","ㅍ","ㅎ"};

		//---------------------------------------------------------------------------------------------------------------------------
		// -
		//---------------------------------------------------------------------------------------------------------------------------
        byte[]      buffer      = System.Text.Encoding.Convert( (System.Text.Encoding.UTF8), (System.Text.Encoding.Unicode), System.Text.Encoding.UTF8.GetBytes(text) );
        (text)      = System.Text.Encoding.Unicode.GetString(buffer);

		//---------------------------------------------------------------------------------------------------------------------------
		// -
		//---------------------------------------------------------------------------------------------------------------------------
		for( i=0; i<(length); i++ )
		{

            byte[]  bytes       = System.Text.Encoding.Unicode.GetBytes( text.Substring(i,1) );
            int     val         = (bytes[1]) * (256) + (bytes[0]);

		    //-----------------------------------------------------------------------------------------------------------------------
		    // -
		    //-----------------------------------------------------------------------------------------------------------------------
			if( (val)>=(44032) && (val)<=(55203) )
			{
				(code)	        = (0);
				(temp)	        = (0);
				(code)	        = (val);
				(temp1)	        = (code-44032);
				(T)		        = (int)(temp1%28);
				(temp1)	        /= (28);
				(V)		        = (int)(temp1%21);
				(temp1)	        /= 21;
				(L)		        = (int)(temp1);

				(char1)	        = (LCetable[L]);
				(char2)	        = (MVetable[V]);
				(char3)	        = (TCetable[T]);
			}
			else
			{
				(char3)	        = "alphabet";
			}

		    //-----------------------------------------------------------------------------------------------------------------------
		    // -
		    //-----------------------------------------------------------------------------------------------------------------------
		}

		//---------------------------------------------------------------------------------------------------------------------------
		// -
		//---------------------------------------------------------------------------------------------------------------------------
		switch( postposition )
		{
			//-----------------------------------------------------------------------------------------------------------------------
			// 로/으로
			//-----------------------------------------------------------------------------------------------------------------------
			case"로":
			case"으로":
				(return1)	= "(으)로";
				(return2)	= "으로";
				(return3)	= "로";
				break;

			//-----------------------------------------------------------------------------------------------------------------------
			// 을/를
			//-----------------------------------------------------------------------------------------------------------------------
			case"을":
			case"를":
				(return1)	= "(을)를";
				(return2)	= "을";
				(return3)	= "를";
				break;

			//-----------------------------------------------------------------------------------------------------------------------
			// 이/가
			//-----------------------------------------------------------------------------------------------------------------------
			case"이":
			case"가":
				(return1)	= "(이)가";
				(return2)	= "이";
				(return3)	= "가";
				break;

			//-----------------------------------------------------------------------------------------------------------------------
			// 은/는
			//-----------------------------------------------------------------------------------------------------------------------
			case"은":
			case"는":
				(return1)	= "(은)는";
				(return2)	= "은";
				(return3)	= "는";
				break;

			//-----------------------------------------------------------------------------------------------------------------------
			// 과/와
			//-----------------------------------------------------------------------------------------------------------------------
			case"과":
			case"와":
				(return1)	= "(와)과";
				(return2)	= "과";
				(return3)	= "와";
				break;

			//-----------------------------------------------------------------------------------------------------------------------
			// 과/와
			//-----------------------------------------------------------------------------------------------------------------------
			case"야":
				(return1)	= "(이)야";
				(return2)	= "이야";
				(return3)	= "야";
				break;

			//-----------------------------------------------------------------------------------------------------------------------
			// -
			//-----------------------------------------------------------------------------------------------------------------------
		}

		//---------------------------------------------------------------------------------------------------------------------------
		// -
		//---------------------------------------------------------------------------------------------------------------------------
		if( (char3)=="alphabet" )
		{
			return (return1);
		}
		else
		if( (char3.Length)>(0) )
		{
			return (return2);
		}

		//---------------------------------------------------------------------------------------------------------------------------
		// -
		//---------------------------------------------------------------------------------------------------------------------------
        return (return3);
	}
	*/

	//-------------------------------------------------------------------------------------------------------------------------------
	// 숫자를 불 변수로 변환하기 위한 함수
	//-------------------------------------------------------------------------------------------------------------------------------
    public static bool StringToBoolean( string text )
    {
		//---------------------------------------------------------------------------------------------------------------------------
		// -
		//---------------------------------------------------------------------------------------------------------------------------
        if( (text)==(null) ) return false;
        if( (text.Length)<(1) ) return false;

		//---------------------------------------------------------------------------------------------------------------------------
		// -
		//---------------------------------------------------------------------------------------------------------------------------
        if( text.ToLower()=="true" )
        {
            return true;
        }

		//---------------------------------------------------------------------------------------------------------------------------
		// -
		//---------------------------------------------------------------------------------------------------------------------------
        if( IsNumber(text) && (text)!="0" )
        {
            return true;
        }

		//---------------------------------------------------------------------------------------------------------------------------
		// -
		//---------------------------------------------------------------------------------------------------------------------------
        return false;
    }
    
	//-------------------------------------------------------------------------------------------------------------------------------
	// -
	//-------------------------------------------------------------------------------------------------------------------------------
    public static int StrToInt( string value )
    {
		//---------------------------------------------------------------------------------------------------------------------------
		// -
		//---------------------------------------------------------------------------------------------------------------------------
        if( (value)==(null) ) return (0);
        if( (value.Length)<(1) ) return (0);

		//---------------------------------------------------------------------------------------------------------------------------
		// -
		//---------------------------------------------------------------------------------------------------------------------------
        return System.Convert.ToInt32(value);

		//---------------------------------------------------------------------------------------------------------------------------
		// -
		//---------------------------------------------------------------------------------------------------------------------------
    }
    
	//-------------------------------------------------------------------------------------------------------------------------------
	// 명령어를 호출하기 위한 함수
	//-------------------------------------------------------------------------------------------------------------------------------
    public static void BroadCast( Component component, string function )
    {
		//---------------------------------------------------------------------------------------------------------------------------
		// -
		//---------------------------------------------------------------------------------------------------------------------------
        if( (component)==(null) ) return;
        if( (function)==(null) ) return;

		//---------------------------------------------------------------------------------------------------------------------------
		// -
		//---------------------------------------------------------------------------------------------------------------------------
        component.SendMessage( (function), (SendMessageOptions.DontRequireReceiver) );
    
		//---------------------------------------------------------------------------------------------------------------------------
		// -
		//---------------------------------------------------------------------------------------------------------------------------
    }

	//-------------------------------------------------------------------------------------------------------------------------------
	// 문자열을 확인하기 위한 함수
	//-------------------------------------------------------------------------------------------------------------------------------
    public static bool IsUrl( string text )
    {
		//---------------------------------------------------------------------------------------------------------------------------
		// -
		//---------------------------------------------------------------------------------------------------------------------------
		if( !Library.Is(text) ) return false;

		//---------------------------------------------------------------------------------------------------------------------------
		// -
		//---------------------------------------------------------------------------------------------------------------------------
		if( (text.Length)>=(7) && text.Substring(0,7)=="http://" )
		{
			return true;
		}

		//---------------------------------------------------------------------------------------------------------------------------
		// -
		//---------------------------------------------------------------------------------------------------------------------------
		if( (text.Length)>=(8) && text.Substring(0,8)=="https://" )
		{
			return true;
		}

		//---------------------------------------------------------------------------------------------------------------------------
		// -
		//---------------------------------------------------------------------------------------------------------------------------
		if( (text.Length)>=(6) && text.Substring(0,6)=="Jar://" )
		{
			return true;
		}

		//---------------------------------------------------------------------------------------------------------------------------
		// -
		//---------------------------------------------------------------------------------------------------------------------------
		return false;
    }

	//-------------------------------------------------------------------------------------------------------------------------------
	// -
	//-------------------------------------------------------------------------------------------------------------------------------
    public static string NumberFormat( int _value )
    {
		//---------------------------------------------------------------------------------------------------------------------------
		// -
		//---------------------------------------------------------------------------------------------------------------------------
		string text = NumberFormat( Mathf.Abs(_value).ToString() );

		//---------------------------------------------------------------------------------------------------------------------------
		// -
		//---------------------------------------------------------------------------------------------------------------------------
		if( (_value)<(0) )
		{
			(text) = "-"+(text);
		}

		//---------------------------------------------------------------------------------------------------------------------------
		// -
		//---------------------------------------------------------------------------------------------------------------------------
		return (text);
    }

	//-------------------------------------------------------------------------------------------------------------------------------
	// -
	//-------------------------------------------------------------------------------------------------------------------------------
    static string NumberFormat( string value, int unit=(3) )
    {
		//---------------------------------------------------------------------------------------------------------------------------
		// -
		//---------------------------------------------------------------------------------------------------------------------------
        if( (value)==(null) ) return (null);

		//---------------------------------------------------------------------------------------------------------------------------
		// -
		//---------------------------------------------------------------------------------------------------------------------------
        string text = (null);

		//---------------------------------------------------------------------------------------------------------------------------
		// -
		//---------------------------------------------------------------------------------------------------------------------------
        while( (value.Length)>(unit) )
        {
			//-----------------------------------------------------------------------------------------------------------------------
			// -
			//-----------------------------------------------------------------------------------------------------------------------
            if( (text)!=(null) )
            {
                (text) = ","+(text);
            }

			//-----------------------------------------------------------------------------------------------------------------------
			// -
			//-----------------------------------------------------------------------------------------------------------------------
            (text)	= value.Substring( (value.Length-unit), (unit) )+(text);
            (value)	= value.Substring( (0), (value.Length-unit) );

			//-----------------------------------------------------------------------------------------------------------------------
			// -
			//-----------------------------------------------------------------------------------------------------------------------
        }

		//---------------------------------------------------------------------------------------------------------------------------
		// -
		//---------------------------------------------------------------------------------------------------------------------------
        if( (text)!=(null) )
        {
            (text) = ","+(text);
        }

		//---------------------------------------------------------------------------------------------------------------------------
		// -
		//---------------------------------------------------------------------------------------------------------------------------
        (text) = value.Substring( (0), (value.Length) )+(text);

		//---------------------------------------------------------------------------------------------------------------------------
		// -
		//---------------------------------------------------------------------------------------------------------------------------
        return (text);
    }

	//-------------------------------------------------------------------------------------------------------------------------------
	// -
	//-------------------------------------------------------------------------------------------------------------------------------
    public static string NumberFormat( float _value )
    {
		//---------------------------------------------------------------------------------------------------------------------------
		// -
		//---------------------------------------------------------------------------------------------------------------------------
		float value = Mathf.Abs(_value);

		//---------------------------------------------------------------------------------------------------------------------------
		// -
		//---------------------------------------------------------------------------------------------------------------------------
		string text = NumberFormat( (int)(_value) );

		//---------------------------------------------------------------------------------------------------------------------------
		// -
		//---------------------------------------------------------------------------------------------------------------------------
		if( (value)<(100) && (value)>(0) )
		{
			int nDecimal = (int)Mathf.Round(value*100) - ((int)(value))*(100);
			if( (nDecimal)>(0) )
			{
				(text) += "."+(nDecimal);
			}
		}

		//---------------------------------------------------------------------------------------------------------------------------
		// -
		//---------------------------------------------------------------------------------------------------------------------------
		return (text);
    }

    public static string NumberUnit( long value )
    {
		return NumberUnit_Korean(value);
//		return NumberUnit_Global(value);
    }

	//-------------------------------------------------------------------------------------------------------------------------------
	// -
	//-------------------------------------------------------------------------------------------------------------------------------
    public static string NumberUnit_Korean( long _value )
    {
		//---------------------------------------------------------------------------------------------------------------------------
		// -
		//---------------------------------------------------------------------------------------------------------------------------
		long value = (_value);
		if( (value)<(0) )
		{
			(value) *= (-1);
		}

		//---------------------------------------------------------------------------------------------------------------------------
		// -
		//---------------------------------------------------------------------------------------------------------------------------
		string output = (null);

		//---------------------------------------------------------------------------------------------------------------------------
		// -
		//---------------------------------------------------------------------------------------------------------------------------
		if( (value)>=(1000000000000) )
		{
			//-----------------------------------------------------------------------------------------------------------------------
			// -
			//-----------------------------------------------------------------------------------------------------------------------
			(output)		= NumberFormat( (value)/(1000000000000) )+" 조";
			long	remine	= (int)( (value%100000000) );
			if( (remine)>(0) )
			{
				(output) += " "+NumberFormat( Mathf.RoundToInt( (remine)/(100000000f) ) )+" 억";
			}
	
			//-----------------------------------------------------------------------------------------------------------------------
			// -
			//-----------------------------------------------------------------------------------------------------------------------
		}
		else
		if( (value)>=(100000000) )
		{
			//-----------------------------------------------------------------------------------------------------------------------
			// -
			//-----------------------------------------------------------------------------------------------------------------------
			(output)		= NumberFormat( (value)/(100000000) )+" 억";
			int		remine	= (int)( (value%100000000) );
			if( (remine)>(0) )
			{
				(output) += " "+NumberFormat( Mathf.RoundToInt( (remine)/(10000f) ) )+" 만";
			}
	
			//-----------------------------------------------------------------------------------------------------------------------
			// -
			//-----------------------------------------------------------------------------------------------------------------------
		}
		else
		if( (value)>=(10000) )
		{
			//-----------------------------------------------------------------------------------------------------------------------
			// -
			//-----------------------------------------------------------------------------------------------------------------------
			(output)		= NumberFormat( (value)/(10000) )+" 만";
			int		remine	= (int)( (value)%(10000) );
			if( (remine)>(0) )
			{
				(output) += " "+NumberFormat(remine);
			}
	
			//-----------------------------------------------------------------------------------------------------------------------
			// -
			//-----------------------------------------------------------------------------------------------------------------------
		}
		else
		{
			(output) = NumberFormat( value );
		}

		//---------------------------------------------------------------------------------------------------------------------------
		// -
		//---------------------------------------------------------------------------------------------------------------------------
		if( (_value)<(0) )
		{
			(output) = "-"+(output);
		}

		//---------------------------------------------------------------------------------------------------------------------------
		// -
		//---------------------------------------------------------------------------------------------------------------------------
        return (output);
    }

	//-------------------------------------------------------------------------------------------------------------------------------
	// -
	//-------------------------------------------------------------------------------------------------------------------------------
    public static string NumberUnit_Global( long value )
    {
		//---------------------------------------------------------------------------------------------------------------------------
		// -
		//---------------------------------------------------------------------------------------------------------------------------
		if( (value)>=(100000000000000) )
		{
			return NumberFormat( Mathf.RoundToInt(value/1000000000000f) )+" t";
		}
		else
		if( (value)>=(100000000000) )
		{
			return NumberFormat( Mathf.RoundToInt(value/1000000000f) )+" b";
		}
		else
		if( (value)>=(100000000) )
		{
			return NumberFormat( Mathf.RoundToInt(value/1000000f) )+" m";
		}
		else
		if( (value)>=(100000) )
		{
			return NumberFormat( Mathf.RoundToInt(value/1000f) )+" k";
		}

		//---------------------------------------------------------------------------------------------------------------------------
		// -
		//---------------------------------------------------------------------------------------------------------------------------
        return NumberFormat(value);
    }

	//-------------------------------------------------------------------------------------------------------------------------------
	// 문자열 패턴의 정보를 처리하기 위한 함수
	//-------------------------------------------------------------------------------------------------------------------------------
	/*
    public static string StringPattern( string text, string value )
    {
		//---------------------------------------------------------------------------------------------------------------------------
		// -
		//---------------------------------------------------------------------------------------------------------------------------
        if( (text)==(null) ) return (text);
        if( (value)==(null) ) return (text);

		//---------------------------------------------------------------------------------------------------------------------------
		// -
		//---------------------------------------------------------------------------------------------------------------------------
        (text)  = StringPatternPostPosition( (text), (value) );

		//---------------------------------------------------------------------------------------------------------------------------
		// -
		//---------------------------------------------------------------------------------------------------------------------------
        return text.Replace( "%s", (value) );

		//---------------------------------------------------------------------------------------------------------------------------
		// -
		//---------------------------------------------------------------------------------------------------------------------------
    }
	*/

	//-------------------------------------------------------------------------------------------------------------------------------
	// 문자열 패턴의 정보를 처리하기 위한 함수
	//-------------------------------------------------------------------------------------------------------------------------------
    public static string StringPattern( string text, string value1, string value2 )
    {
		//---------------------------------------------------------------------------------------------------------------------------
		// -
		//---------------------------------------------------------------------------------------------------------------------------
        if( (text)==(null) ) return (text);
        if( (value1)==(null) ) return (text);
        if( (value2)==(null) ) return (text);

		//---------------------------------------------------------------------------------------------------------------------------
		// -
		//---------------------------------------------------------------------------------------------------------------------------
        (text)  = StringPatternIndexOf( (text), (value1) );
        (text)  = StringPatternIndexOf( (text), (value2) );

		//---------------------------------------------------------------------------------------------------------------------------
		// -
		//---------------------------------------------------------------------------------------------------------------------------
        return (text);
    }

	//-------------------------------------------------------------------------------------------------------------------------------
	// 문자열 패턴의 정보를 처리하기 위한 함수
	//-------------------------------------------------------------------------------------------------------------------------------
    public static string StringPatternIndexOf( string text, string value )
    {
		//---------------------------------------------------------------------------------------------------------------------------
		// -
		//---------------------------------------------------------------------------------------------------------------------------
        if( (text)==(null) ) return (text);
        if( (value)==(null) ) return (text);

		//---------------------------------------------------------------------------------------------------------------------------
		// -
		//---------------------------------------------------------------------------------------------------------------------------
        string      result      = (null);

        string      tok         = "%s";

        int         tokLength   = (tok.Length);

        int         pStr        = text.IndexOf(tok);

		//---------------------------------------------------------------------------------------------------------------------------
		// -
		//---------------------------------------------------------------------------------------------------------------------------
        (result)    = text.Substring( (0), (pStr) ) + (value);

		//---------------------------------------------------------------------------------------------------------------------------
		// -
		//---------------------------------------------------------------------------------------------------------------------------
        (result)    += text.Substring( (pStr+tokLength), (text.Length-pStr-tokLength) );

		//---------------------------------------------------------------------------------------------------------------------------
		// -
		//---------------------------------------------------------------------------------------------------------------------------
        return (result);
    }

	//-------------------------------------------------------------------------------------------------------------------------------
	// 문자열 패턴의 정보를 처리하기 위한 함수
	//-------------------------------------------------------------------------------------------------------------------------------
	/*
    public static string StringPatternPostPosition( string text, string value )
    {
		//---------------------------------------------------------------------------------------------------------------------------
		// -
		//---------------------------------------------------------------------------------------------------------------------------
        if( (text)==(null) ) return (text);
        if( (value)==(null) ) return (text);

		//---------------------------------------------------------------------------------------------------------------------------
		// -
		//---------------------------------------------------------------------------------------------------------------------------
        string      result      = (null);

        string      tok         = "(%s:";

        int         tokLength   = (tok.Length);

        int         pStr        = text.IndexOf(tok);

        string      rearEnd     = (null);

        int         pRear       = (0);

        string      post        = (null);

		//---------------------------------------------------------------------------------------------------------------------------
		// -
		//---------------------------------------------------------------------------------------------------------------------------
        if( (pStr)<(0) ) return (text);

		//---------------------------------------------------------------------------------------------------------------------------
		// 어미, 후미를 분리함
		//---------------------------------------------------------------------------------------------------------------------------
        (result)    = text.Substring( (0), (pStr) );

        (rearEnd)   = text.Substring( (pStr+tokLength), (text.Length-pStr-tokLength) );

		//---------------------------------------------------------------------------------------------------------------------------
		// 조사어를 얻음
		//---------------------------------------------------------------------------------------------------------------------------
        (pRear)     = rearEnd.IndexOf( ")" );
        if( (pRear)<(0) ) return (text);

		//---------------------------------------------------------------------------------------------------------------------------
		// -
		//---------------------------------------------------------------------------------------------------------------------------
        (post)      = rearEnd.Substring( (0), (pRear) );

        (rearEnd)   = rearEnd.Substring( (pRear+")".Length), (rearEnd.Length-pRear-")".Length) );

		//---------------------------------------------------------------------------------------------------------------------------
		// -
		//---------------------------------------------------------------------------------------------------------------------------
        (result)    += PostPosition( (value), (post) ) + (rearEnd);

		//---------------------------------------------------------------------------------------------------------------------------
		// -
		//---------------------------------------------------------------------------------------------------------------------------
        return (result);
    }
	*/

	//-------------------------------------------------------------------------------------------------------------------------------
	// 허용하는 언어 항목인지 확인하기 위한 함수
	//-------------------------------------------------------------------------------------------------------------------------------
	/*
    public static bool IsLanguage( string value )
    {
		//---------------------------------------------------------------------------------------------------------------------------
		// -
		//---------------------------------------------------------------------------------------------------------------------------
        if( (value)==(null) ) return false;

		//---------------------------------------------------------------------------------------------------------------------------
		// -
		//---------------------------------------------------------------------------------------------------------------------------
        int             i;

		//---------------------------------------------------------------------------------------------------------------------------
		// -
		//---------------------------------------------------------------------------------------------------------------------------
        for( i=(1); i<((int)LANGUAGE.END); i++ )
        {
            if( (value.ToLower())==((LANGUAGE)i).ToString().ToLower() )
            {
                return true;
            }
        }

		//---------------------------------------------------------------------------------------------------------------------------
		// -
		//---------------------------------------------------------------------------------------------------------------------------
        return false;
    }
	*/

	//-------------------------------------------------------------------------------------------------------------------------------
	// RECT의 충돌을 확인하기 위한 함수
	//-------------------------------------------------------------------------------------------------------------------------------
	/*
    public static bool Intersect( tagRect rect1, tagRect rect2 )
    {
	    //---------------------------------------------------------------------------------------------------------------------------
	    // -
	    //---------------------------------------------------------------------------------------------------------------------------
        if( (rect1)==(null) ) return false;
        if( (rect2)==(null) ) return false;

	    //---------------------------------------------------------------------------------------------------------------------------
	    // -
	    //---------------------------------------------------------------------------------------------------------------------------
        if( (rect1.Right)<(rect2.Left) )
        {
            return false;
        }

	    //---------------------------------------------------------------------------------------------------------------------------
	    // -
	    //---------------------------------------------------------------------------------------------------------------------------
        if( (rect1.Left)>(rect2.Right) )
        {
            return false;
        }

	    //---------------------------------------------------------------------------------------------------------------------------
	    // -
	    //---------------------------------------------------------------------------------------------------------------------------
        if( (rect1.Bottom)>(rect2.Top) )
        {
            return false;
        }

	    //---------------------------------------------------------------------------------------------------------------------------
	    // -
	    //---------------------------------------------------------------------------------------------------------------------------
        if( (rect1.Top)<(rect2.Bottom) )
        {
            return false;
        }

	    //---------------------------------------------------------------------------------------------------------------------------
	    // -
	    //---------------------------------------------------------------------------------------------------------------------------
        return true;
    }
	*/
    
	//-------------------------------------------------------------------------------------------------------------------------------
	// RECT의 충돌을 확인하기 위한 함수
	//-------------------------------------------------------------------------------------------------------------------------------
	/*
    public static bool Intersect( tagRect rect, Vector3 vPos )
    {
	    //---------------------------------------------------------------------------------------------------------------------------
	    // -
	    //---------------------------------------------------------------------------------------------------------------------------
        if( (rect)==(null) ) return false;
        if( (vPos)==(null) ) return false;

	    //---------------------------------------------------------------------------------------------------------------------------
	    // -
	    //---------------------------------------------------------------------------------------------------------------------------
        if( Intersect( (rect), (int)(vPos.x), (int)(vPos.y) ) )
        {
            return true;
        }

	    //---------------------------------------------------------------------------------------------------------------------------
	    // -
	    //---------------------------------------------------------------------------------------------------------------------------
        return false;
    }
	*/

	//-------------------------------------------------------------------------------------------------------------------------------
	// RECT의 충돌을 확인하기 위한 함수
	//-------------------------------------------------------------------------------------------------------------------------------
	/*
    public static bool Intersect( tagRect rect, int x, int y )
    {
	    //---------------------------------------------------------------------------------------------------------------------------
	    // -
	    //---------------------------------------------------------------------------------------------------------------------------
        if( (rect)==(null) ) return false;

	    //---------------------------------------------------------------------------------------------------------------------------
	    // -
	    //---------------------------------------------------------------------------------------------------------------------------
        if( (rect.Left)<(x) && (x)<=(rect.Right) && (rect.Top)<(y) && (y)<=(rect.Bottom) )
        {
            return true;
        }

	    //---------------------------------------------------------------------------------------------------------------------------
	    // -
	    //---------------------------------------------------------------------------------------------------------------------------
        return false;
    }
	*/

	//-------------------------------------------------------------------------------------------------------------------------------
	// -
	//-------------------------------------------------------------------------------------------------------------------------------
    public static string LetterWord( int value, int length )
	{
		//---------------------------------------------------------------------------------------------------------------------------
		// -
		//---------------------------------------------------------------------------------------------------------------------------
        return LetterWord( value.ToString(), (length) );

		//---------------------------------------------------------------------------------------------------------------------------
		// -
		//---------------------------------------------------------------------------------------------------------------------------
    }

	//-------------------------------------------------------------------------------------------------------------------------------
	// -
	//-------------------------------------------------------------------------------------------------------------------------------
    public static string LetterWord( float value, int length )
	{
		//---------------------------------------------------------------------------------------------------------------------------
		// -
		//---------------------------------------------------------------------------------------------------------------------------
        return LetterWord( Mathf.FloorToInt(value).ToString(), (length) );

		//---------------------------------------------------------------------------------------------------------------------------
		// -
		//---------------------------------------------------------------------------------------------------------------------------
    }

	//-------------------------------------------------------------------------------------------------------------------------------
	// -
	//-------------------------------------------------------------------------------------------------------------------------------
    public static string LetterWord( string _text, int length )
	{
		//---------------------------------------------------------------------------------------------------------------------------
		// -
		//---------------------------------------------------------------------------------------------------------------------------
        int         i;

        string      text    = "";

		//---------------------------------------------------------------------------------------------------------------------------
		// -
		//---------------------------------------------------------------------------------------------------------------------------
		for( i=(_text.Length); i<(length); i++ )
		{
			(text)  += "0";
		}

		//---------------------------------------------------------------------------------------------------------------------------
		// -
		//---------------------------------------------------------------------------------------------------------------------------
		return (text+_text);
	}

	//-------------------------------------------------------------------------------------------------------------------------------
	// 객체의 메모리 크기를 얻기 위한 함수
	//-------------------------------------------------------------------------------------------------------------------------------
    public static int SizeOf( System.Type obj )
    {
		//---------------------------------------------------------------------------------------------------------------------------
		// -
		//---------------------------------------------------------------------------------------------------------------------------
        return System.Runtime.InteropServices.Marshal.SizeOf(obj);

		//---------------------------------------------------------------------------------------------------------------------------
		// -
		//---------------------------------------------------------------------------------------------------------------------------
    }

	//-------------------------------------------------------------------------------------------------------------------------------
	// 객체의 레퍼런스를 얻기 위한 함수
	//-------------------------------------------------------------------------------------------------------------------------------
    public static Transform Get( Transform root, string path )
	{
	    //---------------------------------------------------------------------------------------------------------------------------
	    // -
	    //---------------------------------------------------------------------------------------------------------------------------
//		if( (root)==(null) ) return (null);				//(NULL)값을 허용함
        if( (path)==(null) ) return (null);

	    //---------------------------------------------------------------------------------------------------------------------------
	    // -
	    //---------------------------------------------------------------------------------------------------------------------------
        int         i;
        string[]    array		= path.Split( '/' );
        int         count		= (array.Length);
        Transform   current		= (root);

	    //---------------------------------------------------------------------------------------------------------------------------
	    // -
	    //---------------------------------------------------------------------------------------------------------------------------
        for( i=0; i<(count); i++ )
        {
	        //-----------------------------------------------------------------------------------------------------------------------
	        // -
	        //-----------------------------------------------------------------------------------------------------------------------
            string  find    = array[i];

	        //-----------------------------------------------------------------------------------------------------------------------
	        // -
	        //-----------------------------------------------------------------------------------------------------------------------
            if( (current)==(null) )
            {
	            //-------------------------------------------------------------------------------------------------------------------
	            // -
	            //-------------------------------------------------------------------------------------------------------------------
                GameObject  obj = GameObject.Find(find);
                if( (obj)==(null) ) return (null);

	            //-------------------------------------------------------------------------------------------------------------------
	            // -
	            //-------------------------------------------------------------------------------------------------------------------
                (current)   = (obj.transform);

	            //-------------------------------------------------------------------------------------------------------------------
	            // -
	            //-------------------------------------------------------------------------------------------------------------------
            }
            else
            {
	            //-------------------------------------------------------------------------------------------------------------------
	            // -
	            //-------------------------------------------------------------------------------------------------------------------
				Transform	_find	= (null);

	            //-------------------------------------------------------------------------------------------------------------------
	            // -
	            //-------------------------------------------------------------------------------------------------------------------
				for( int j=0; j<(current.childCount); j++ )
				{
					Transform	child	= current.GetChild(j);
					if( (child)!=(null) )
					{
						if( (child.name)==(find) )
						{
							(_find)	= (child);
							break;
						}
					}
				}

	            //-------------------------------------------------------------------------------------------------------------------
	            // -
	            //-------------------------------------------------------------------------------------------------------------------
				if( (_find)!=(null) )
				{
					(current)	= (_find);
					continue;
				}

	            //-------------------------------------------------------------------------------------------------------------------
	            // -
	            //-------------------------------------------------------------------------------------------------------------------
				continue;
            }

	        //-----------------------------------------------------------------------------------------------------------------------
	        // -
	        //-----------------------------------------------------------------------------------------------------------------------
        }

	    //---------------------------------------------------------------------------------------------------------------------------
	    // -
	    //---------------------------------------------------------------------------------------------------------------------------
        return (current);
    }

	//-------------------------------------------------------------------------------------------------------------------------------
	// 객체의 레퍼런스를 얻기 위한 함수
	//-------------------------------------------------------------------------------------------------------------------------------
    public static Component Get( Transform root, string path, System.Type type )
    {
	    //---------------------------------------------------------------------------------------------------------------------------
	    // -
	    //---------------------------------------------------------------------------------------------------------------------------
//		if( (root)==(null) ) return (null);		//(NULL)값을 허용함
		if( (path)==(null) ) return (null);
		if( (type)==(null) ) return (null);

	    //---------------------------------------------------------------------------------------------------------------------------
	    // -
	    //---------------------------------------------------------------------------------------------------------------------------
		Transform			transform			= Get( (root), (path) );
		if( (transform)==(null) ) return (null);

	    //---------------------------------------------------------------------------------------------------------------------------
	    // -
	    //---------------------------------------------------------------------------------------------------------------------------
		Component			component			= (transform.GetComponent(type));

	    //---------------------------------------------------------------------------------------------------------------------------
	    // -
	    //---------------------------------------------------------------------------------------------------------------------------
        return (component);
    }

	//-------------------------------------------------------------------------------------------------------------------------------
	// 난수를 얻기 위한 함수
	//-------------------------------------------------------------------------------------------------------------------------------
	public static int Random( int min, int max )
	{
	    //---------------------------------------------------------------------------------------------------------------------------
	    // -
	    //---------------------------------------------------------------------------------------------------------------------------
		return UnityEngine.Random.Range( (min), (max+1) );

	    //---------------------------------------------------------------------------------------------------------------------------
	    // -
	    //---------------------------------------------------------------------------------------------------------------------------
	}

	//-------------------------------------------------------------------------------------------------------------------------------
	// 난수를 얻기 위한 함수
	//-------------------------------------------------------------------------------------------------------------------------------
	public static float Random( float min, float max )
	{
	    //---------------------------------------------------------------------------------------------------------------------------
	    // -
	    //---------------------------------------------------------------------------------------------------------------------------
		return UnityEngine.Random.Range( (min), (max) );

	    //---------------------------------------------------------------------------------------------------------------------------
	    // -
	    //---------------------------------------------------------------------------------------------------------------------------
	}

	//-------------------------------------------------------------------------------------------------------------------------------
	// 확률을 처리하기 위한 함수
	//-------------------------------------------------------------------------------------------------------------------------------
	public static bool Random( int value )
	{
	    //---------------------------------------------------------------------------------------------------------------------------
	    // -
	    //---------------------------------------------------------------------------------------------------------------------------
		if( Random(0,99)<(value) )
		{
			return true;
		}

	    //---------------------------------------------------------------------------------------------------------------------------
	    // -
	    //---------------------------------------------------------------------------------------------------------------------------
		return false;
	}
	
	//-------------------------------------------------------------------------------------------------------------------------------
	// -
	//-------------------------------------------------------------------------------------------------------------------------------
	public static Bounds GetBounds( Collider collider, Vector3 vPos )
	{
	    //---------------------------------------------------------------------------------------------------------------------------
	    // -
	    //---------------------------------------------------------------------------------------------------------------------------
		if( (collider)==(null) ) return new Bounds();

	    //---------------------------------------------------------------------------------------------------------------------------
	    // -
	    //---------------------------------------------------------------------------------------------------------------------------
		Bounds	bounds	= (collider.bounds);
		(bounds.center)	= (vPos);

	    //---------------------------------------------------------------------------------------------------------------------------
	    // -
	    //---------------------------------------------------------------------------------------------------------------------------
		return (bounds);
	}
	
	//-------------------------------------------------------------------------------------------------------------------------------
	// 정적 메쉬를 설정하기 위한 함수
	//-------------------------------------------------------------------------------------------------------------------------------
	public static void SetStatic( Transform transform, bool isStatic, bool inflow=(true) )
	{
	    //---------------------------------------------------------------------------------------------------------------------------
	    // -
	    //---------------------------------------------------------------------------------------------------------------------------
		if( (transform)==(null) ) return;

	    //---------------------------------------------------------------------------------------------------------------------------
	    // -
	    //---------------------------------------------------------------------------------------------------------------------------
		(transform.gameObject.isStatic)		= (isStatic);

	    //---------------------------------------------------------------------------------------------------------------------------
	    // -
	    //---------------------------------------------------------------------------------------------------------------------------
		if( inflow )
		{
			Transform	child	= (null);
			int			End		= (transform.childCount);

			for( int i=0; i<(End); i++ )
			{
				(child)	= transform.GetChild(i);

				if( (child)!=(null) )
				{
					SetStatic( (child), (isStatic), (true) );
				}
			}
		}

	    //---------------------------------------------------------------------------------------------------------------------------
	    // -
	    //---------------------------------------------------------------------------------------------------------------------------
	}

	//-------------------------------------------------------------------------------------------------------------------------------
	// 파일의 확장자를 얻기 위한 함수
	//-------------------------------------------------------------------------------------------------------------------------------
	public static string Ext( string filepath )
	{
	    //---------------------------------------------------------------------------------------------------------------------------
	    // -
	    //---------------------------------------------------------------------------------------------------------------------------
		if( (filepath)==(null) ) return (null);

	    //---------------------------------------------------------------------------------------------------------------------------
	    // -
	    //---------------------------------------------------------------------------------------------------------------------------
		string[]	urlarray	= filepath.Split('?');

	    //---------------------------------------------------------------------------------------------------------------------------
	    // -
	    //---------------------------------------------------------------------------------------------------------------------------
		string[]	strarray	= urlarray[0].Split('.');
		if( (strarray.Length)<(1) ) return (null);

	    //---------------------------------------------------------------------------------------------------------------------------
	    // -
	    //---------------------------------------------------------------------------------------------------------------------------
		return (strarray[strarray.Length-1].ToLower());
	}

	//-------------------------------------------------------------------------------------------------------------------------------
	// 파일 이름을 얻기 위한 함수
	//-------------------------------------------------------------------------------------------------------------------------------
	public static string GetFileName( string filepath )
	{
	    //---------------------------------------------------------------------------------------------------------------------------
	    // -
	    //---------------------------------------------------------------------------------------------------------------------------
		if( (filepath)==(null) ) return (null);

	    //---------------------------------------------------------------------------------------------------------------------------
	    // -
	    //---------------------------------------------------------------------------------------------------------------------------
		string		filenameext		= GetFileNameExt(filepath);

	    //---------------------------------------------------------------------------------------------------------------------------
	    // -
	    //---------------------------------------------------------------------------------------------------------------------------
		string[] strarray = filenameext.Split('.');
		if( (strarray.Length)<=(1) ) return (filenameext);

	    //---------------------------------------------------------------------------------------------------------------------------
	    // -
	    //---------------------------------------------------------------------------------------------------------------------------
		string ext = GetExt(filenameext);
		if( Library.Is(ext) )
		{
			return filenameext.Substring( (0), (filenameext.Length)-(ext.Length+1) );
		}

	    //---------------------------------------------------------------------------------------------------------------------------
	    // -
	    //---------------------------------------------------------------------------------------------------------------------------
		return (filenameext);
	}

	//-------------------------------------------------------------------------------------------------------------------------------
	// 파일 이름을 얻기 위한 함수
	//-------------------------------------------------------------------------------------------------------------------------------
	public static string GetExt( string filepath )
	{
	    //---------------------------------------------------------------------------------------------------------------------------
	    // -
	    //---------------------------------------------------------------------------------------------------------------------------
		if( (filepath)==(null) ) return (null);

	    //---------------------------------------------------------------------------------------------------------------------------
	    // -
	    //---------------------------------------------------------------------------------------------------------------------------
		string[]	strarray	= filepath.Split('.');
		if( (strarray.Length)<(1) ) return (null);

	    //---------------------------------------------------------------------------------------------------------------------------
	    // -
	    //---------------------------------------------------------------------------------------------------------------------------
		return (strarray[strarray.Length-1]);
	}

	//-------------------------------------------------------------------------------------------------------------------------------
	// 파일 이름을 얻기 위한 함수
	//-------------------------------------------------------------------------------------------------------------------------------
	public static string GetFileNameExt( string filepath )
	{
	    //---------------------------------------------------------------------------------------------------------------------------
	    // -
	    //---------------------------------------------------------------------------------------------------------------------------
		if( (filepath)==(null) ) return (null);

	    //---------------------------------------------------------------------------------------------------------------------------
	    // -
	    //---------------------------------------------------------------------------------------------------------------------------
		(filepath)	= filepath.Replace( "\\", "/" );

	    //---------------------------------------------------------------------------------------------------------------------------
	    // -
	    //---------------------------------------------------------------------------------------------------------------------------
		string[]	strarray	= filepath.Split('/');
		if( (strarray.Length)<(1) ) return (null);

	    //---------------------------------------------------------------------------------------------------------------------------
	    // -
	    //---------------------------------------------------------------------------------------------------------------------------
		return (strarray[strarray.Length-1]);
	}

	//-------------------------------------------------------------------------------------------------------------------------------
	// 파일 이름을 얻기 위한 함수
	//-------------------------------------------------------------------------------------------------------------------------------
	public static string GetPath( string filepath )
	{
	    //---------------------------------------------------------------------------------------------------------------------------
	    // -
	    //---------------------------------------------------------------------------------------------------------------------------
		if( (filepath)==(null) ) return (null);

	    //---------------------------------------------------------------------------------------------------------------------------
	    // -
	    //---------------------------------------------------------------------------------------------------------------------------
		return filepath.Substring( (0), (filepath.Length)-(GetFileNameExt(filepath).Length) );
	}

	//-------------------------------------------------------------------------------------------------------------------------------
	// 데이타를 불러오기 위한 함수
	//-------------------------------------------------------------------------------------------------------------------------------
	public static byte[] ReadAllBytes( string path )
	{
	    //---------------------------------------------------------------------------------------------------------------------------
	    // -
	    //---------------------------------------------------------------------------------------------------------------------------
		if( (path)==(null) ) return (null);

	    //---------------------------------------------------------------------------------------------------------------------------
	    // -
	    //---------------------------------------------------------------------------------------------------------------------------
		if( File.Exists(path) )
		{
			return File.ReadAllBytes( path );
		}

	    //---------------------------------------------------------------------------------------------------------------------------
	    // -
	    //---------------------------------------------------------------------------------------------------------------------------
		return (null);
	}

	//-------------------------------------------------------------------------------------------------------------------------------
	// 문자열을 불러오기 위한 함수
	//-------------------------------------------------------------------------------------------------------------------------------
	public static string ReadAllText( string path )
	{
	    //---------------------------------------------------------------------------------------------------------------------------
	    // -
	    //---------------------------------------------------------------------------------------------------------------------------
		if( (path)==(null) ) return (null);

	    //---------------------------------------------------------------------------------------------------------------------------
	    // -
	    //---------------------------------------------------------------------------------------------------------------------------
		if( File.Exists(path) )
		{
			return File.ReadAllText( path );
		}

	    //---------------------------------------------------------------------------------------------------------------------------
	    // -
	    //---------------------------------------------------------------------------------------------------------------------------
		return (null);
	}

	//-------------------------------------------------------------------------------------------------------------------------------
	// 데이타를 저장하기 위한 함수
	//-------------------------------------------------------------------------------------------------------------------------------
	public static void WriteAllBytes( string path, byte[] bytes )
	{
	    //---------------------------------------------------------------------------------------------------------------------------
	    // -
	    //---------------------------------------------------------------------------------------------------------------------------
		if( (path)==(null) ) return;
		if( (bytes)==(null) ) return;

	    //---------------------------------------------------------------------------------------------------------------------------
	    // -
	    //---------------------------------------------------------------------------------------------------------------------------
		File.WriteAllBytes( (path), (bytes) );

	    //---------------------------------------------------------------------------------------------------------------------------
	    // -
	    //---------------------------------------------------------------------------------------------------------------------------
	}

	//-------------------------------------------------------------------------------------------------------------------------------
	// 드래그 길이를 얻기 위한 함수
	//-------------------------------------------------------------------------------------------------------------------------------
	public static float GetDragDistance()
	{
	    //---------------------------------------------------------------------------------------------------------------------------
	    // -
	    //---------------------------------------------------------------------------------------------------------------------------
		if( (CPlay.This)!=(null) )
		{
			return (SYSTEM.DRAG_DISTANCE) * (CPlay.This.ScreenSize);
		}

	    //---------------------------------------------------------------------------------------------------------------------------
	    // -
	    //---------------------------------------------------------------------------------------------------------------------------
		return (1f);
	}

	//-------------------------------------------------------------------------------------------------------------------------------
	// 문자열을 저장하기 위한 함수
	//-------------------------------------------------------------------------------------------------------------------------------
	public static void Write( FileStream hFile, bool value )
	{
		//---------------------------------------------------------------------------------------------------------------------------
		// -
		//---------------------------------------------------------------------------------------------------------------------------
		if( (hFile)==(null) ) return;

	    //---------------------------------------------------------------------------------------------------------------------------
	    // -
	    //---------------------------------------------------------------------------------------------------------------------------
		byte[]	bytes   = BitConverter.GetBytes(value);

	    //---------------------------------------------------------------------------------------------------------------------------
	    // -
	    //---------------------------------------------------------------------------------------------------------------------------
		hFile.Write( (bytes), (0), (bytes.Length) );

		//---------------------------------------------------------------------------------------------------------------------------
		// -
		//---------------------------------------------------------------------------------------------------------------------------
	}

	//-------------------------------------------------------------------------------------------------------------------------------
	// 문자열을 저장하기 위한 함수
	//-------------------------------------------------------------------------------------------------------------------------------
	public static void Write( FileStream hFile, int value )
	{
		//---------------------------------------------------------------------------------------------------------------------------
		// -
		//---------------------------------------------------------------------------------------------------------------------------
		if( (hFile)==(null) ) return;

	    //---------------------------------------------------------------------------------------------------------------------------
	    // -
	    //---------------------------------------------------------------------------------------------------------------------------
		byte[]	bytes   = BitConverter.GetBytes(value);

	    //---------------------------------------------------------------------------------------------------------------------------
	    // -
	    //---------------------------------------------------------------------------------------------------------------------------
		hFile.Write( (bytes), (0), (bytes.Length) );

		//---------------------------------------------------------------------------------------------------------------------------
		// -
		//---------------------------------------------------------------------------------------------------------------------------
	}

	//-------------------------------------------------------------------------------------------------------------------------------
	// 문자열을 저장하기 위한 함수
	//-------------------------------------------------------------------------------------------------------------------------------
	public static void Write( FileStream hFile, long value )
	{
		//---------------------------------------------------------------------------------------------------------------------------
		// -
		//---------------------------------------------------------------------------------------------------------------------------
		if( (hFile)==(null) ) return;

	    //---------------------------------------------------------------------------------------------------------------------------
	    // -
	    //---------------------------------------------------------------------------------------------------------------------------
		byte[]	bytes   = BitConverter.GetBytes(value);

	    //---------------------------------------------------------------------------------------------------------------------------
	    // -
	    //---------------------------------------------------------------------------------------------------------------------------
		hFile.Write( (bytes), (0), (bytes.Length) );

		//---------------------------------------------------------------------------------------------------------------------------
		// -
		//---------------------------------------------------------------------------------------------------------------------------
	}

	//-------------------------------------------------------------------------------------------------------------------------------
	// 문자열을 저장하기 위한 함수
	//-------------------------------------------------------------------------------------------------------------------------------
	public static void Write( FileStream hFile, float value )
	{
		//---------------------------------------------------------------------------------------------------------------------------
		// -
		//---------------------------------------------------------------------------------------------------------------------------
		if( (hFile)==(null) ) return;

	    //---------------------------------------------------------------------------------------------------------------------------
	    // -
	    //---------------------------------------------------------------------------------------------------------------------------
		byte[]	bytes   = BitConverter.GetBytes(value);

	    //---------------------------------------------------------------------------------------------------------------------------
	    // -
	    //---------------------------------------------------------------------------------------------------------------------------
		hFile.Write( (bytes), (0), (bytes.Length) );

		//---------------------------------------------------------------------------------------------------------------------------
		// -
		//---------------------------------------------------------------------------------------------------------------------------
	}

	//-------------------------------------------------------------------------------------------------------------------------------
	// BYTE 버퍼를 저장하기 위한 함수
	//-------------------------------------------------------------------------------------------------------------------------------
	public static void Write( FileStream hFile, byte[] Bytes )
	{
		//---------------------------------------------------------------------------------------------------------------------------
		// -
		//---------------------------------------------------------------------------------------------------------------------------
		if( (hFile)==(null) ) return;
		if( (Bytes)==(null) ) return;

	    //---------------------------------------------------------------------------------------------------------------------------
	    // -
	    //---------------------------------------------------------------------------------------------------------------------------
		Write( (hFile), (Bytes.Length) );

	    //---------------------------------------------------------------------------------------------------------------------------
	    // -
	    //---------------------------------------------------------------------------------------------------------------------------
		hFile.Write( (Bytes), (0), (Bytes.Length) );

		//---------------------------------------------------------------------------------------------------------------------------
		// -
		//---------------------------------------------------------------------------------------------------------------------------
	}

	//-------------------------------------------------------------------------------------------------------------------------------
	// 문자열을 저장하기 위한 함수
	//-------------------------------------------------------------------------------------------------------------------------------
	public static void Write( FileStream hFile, Vector3 vector )
	{
		//---------------------------------------------------------------------------------------------------------------------------
		// -
		//---------------------------------------------------------------------------------------------------------------------------
		if( (hFile)==(null) ) return;

	    //---------------------------------------------------------------------------------------------------------------------------
	    // -
	    //---------------------------------------------------------------------------------------------------------------------------
		Write( (hFile), (vector.x) );
		Write( (hFile), (vector.y) );
		Write( (hFile), (vector.z) );

		//---------------------------------------------------------------------------------------------------------------------------
		// -
		//---------------------------------------------------------------------------------------------------------------------------
	}

	//-------------------------------------------------------------------------------------------------------------------------------
	// 문자열을 저장하기 위한 함수
	//-------------------------------------------------------------------------------------------------------------------------------
	public static void Write( FileStream hFile, string text )
	{
		//---------------------------------------------------------------------------------------------------------------------------
		// -
		//---------------------------------------------------------------------------------------------------------------------------
		if( (hFile)==(null) ) return;
//		if( (text)==(null) ) return;	//(NULL)값을 허용함

	    //---------------------------------------------------------------------------------------------------------------------------
	    // -
	    //---------------------------------------------------------------------------------------------------------------------------
        if( (text)!=(null) )
        {
	        //-----------------------------------------------------------------------------------------------------------------------
	        // -
	        //-----------------------------------------------------------------------------------------------------------------------
            byte[]		bytes   = System.Text.Encoding.UTF8.GetBytes(text);

	        //-----------------------------------------------------------------------------------------------------------------------
	        // -
	        //-----------------------------------------------------------------------------------------------------------------------
			Write( (hFile), (bytes.Length) );
			hFile.Write( (bytes), (0), (bytes.Length) );

	        //-----------------------------------------------------------------------------------------------------------------------
	        // -
	        //-----------------------------------------------------------------------------------------------------------------------
		}
		else
		{
	        //-----------------------------------------------------------------------------------------------------------------------
	        // -
	        //-----------------------------------------------------------------------------------------------------------------------
            byte[]		bytes   = BitConverter.GetBytes((int)(0));

	        //-----------------------------------------------------------------------------------------------------------------------
	        // -
	        //-----------------------------------------------------------------------------------------------------------------------
			hFile.Write( (bytes), (0), (bytes.Length) );

	        //-----------------------------------------------------------------------------------------------------------------------
	        // -
	        //-----------------------------------------------------------------------------------------------------------------------
		}

		//---------------------------------------------------------------------------------------------------------------------------
		// -
		//---------------------------------------------------------------------------------------------------------------------------
	}

	//-------------------------------------------------------------------------------------------------------------------------------
	// 문자열을 저장하기 위한 함수
	//-------------------------------------------------------------------------------------------------------------------------------
	public static void Write( FileBuffer buffer, int value )
	{
		//---------------------------------------------------------------------------------------------------------------------------
		// -
		//---------------------------------------------------------------------------------------------------------------------------
		if( (buffer)==(null) ) return;
		if( (buffer.data)==(null) ) return;

	    //---------------------------------------------------------------------------------------------------------------------------
	    // -
	    //---------------------------------------------------------------------------------------------------------------------------
		byte[]	bytes   = BitConverter.GetBytes(value);

	    //---------------------------------------------------------------------------------------------------------------------------
	    // -
	    //---------------------------------------------------------------------------------------------------------------------------
		Buffer.BlockCopy( (bytes), (0), (buffer.data.buffer), (buffer.data.index), (bytes.Length) );
		(buffer.data.index)	+= (bytes.Length);
		/*
		foreach( byte b in bytes )
		{
			(buffer.data.buffer[buffer.data.index])		= (b);
			(buffer.data.index)	+= (1);
		}
		*/

//		buffer.data.buffer.CopyTo( (bytes), (buffer.data.index) );
//		(buffer.data.index)	+= (bytes.Length);

		//---------------------------------------------------------------------------------------------------------------------------
		// -
		//---------------------------------------------------------------------------------------------------------------------------
	}

	//-------------------------------------------------------------------------------------------------------------------------------
	// 문자열을 저장하기 위한 함수
	//-------------------------------------------------------------------------------------------------------------------------------
	public static int Write( FileBuffer buffer, byte[] bytes )
	{
		//---------------------------------------------------------------------------------------------------------------------------
		// -
		//---------------------------------------------------------------------------------------------------------------------------
		if( (buffer)==(null) ) return (0);
		if( (buffer.data)==(null) ) return (0);
		if( (bytes)==(null) ) return (0);

	    //---------------------------------------------------------------------------------------------------------------------------
	    // -
	    //---------------------------------------------------------------------------------------------------------------------------
		Write( (buffer), (bytes.Length) );

	    //---------------------------------------------------------------------------------------------------------------------------
	    // -
	    //---------------------------------------------------------------------------------------------------------------------------
		Buffer.BlockCopy( (bytes), (0), (buffer.data.buffer), (buffer.data.index), (bytes.Length) );
		(buffer.data.index)	+= (bytes.Length);
		/*
		foreach( byte b in bytes )
		{
			(buffer.data.buffer[buffer.data.index])		= (b);
			(buffer.data.index)	+= (1);
		}
		*/

//		buffer.data.buffer.CopyTo( (bytes), (buffer.data.index) );
//		(buffer.data.index)	+= (bytes.Length);

		//---------------------------------------------------------------------------------------------------------------------------
		// -
		//---------------------------------------------------------------------------------------------------------------------------
		return (bytes.Length);
	}

	//-------------------------------------------------------------------------------------------------------------------------------
	// -
	//-------------------------------------------------------------------------------------------------------------------------------
	public static void SceneFocus( Vector3 point )
	{
		//---------------------------------------------------------------------------------------------------------------------------
		// -
		//---------------------------------------------------------------------------------------------------------------------------
#if UNITY_EDITOR
		if( (SceneView.sceneViews.Count)>(0) )
		{
			SceneView	sceneView	= (SceneView)(SceneView.sceneViews[0]);
			if( (sceneView)!=(null) )
			{
				sceneView.LookAt( point );
			}
		}
#endif

		//---------------------------------------------------------------------------------------------------------------------------
		// -
		//---------------------------------------------------------------------------------------------------------------------------
	}

	//-------------------------------------------------------------------------------------------------------------------------------
	// 스크린 크기를 얻기 위한 함수
	//-------------------------------------------------------------------------------------------------------------------------------
	public static float GetScreenSize()
	{
		//---------------------------------------------------------------------------------------------------------------------------
		// -
		//---------------------------------------------------------------------------------------------------------------------------
		if( (CPlay.This)!=(null) )
		{
			return (CPlay.This.ScreenSize);
		}

		//---------------------------------------------------------------------------------------------------------------------------
		// -
		//---------------------------------------------------------------------------------------------------------------------------
		return (1f);
	}

	//-------------------------------------------------------------------------------------------------------------------------------
	// -
	//-------------------------------------------------------------------------------------------------------------------------------
	public static object GetArray( object[] objArray, int index )
	{
		//---------------------------------------------------------------------------------------------------------------------------
		// -
		//---------------------------------------------------------------------------------------------------------------------------
		if( (objArray)==(null) ) return (null);

		//---------------------------------------------------------------------------------------------------------------------------
		// -
		//---------------------------------------------------------------------------------------------------------------------------
		if( (index)<(0) || (index)>=(objArray.Length) ) return (null);

		//---------------------------------------------------------------------------------------------------------------------------
		// -
		//---------------------------------------------------------------------------------------------------------------------------
		return (objArray[index]);
	}

	//-------------------------------------------------------------------------------------------------------------------------------
	// -
	//-------------------------------------------------------------------------------------------------------------------------------
	public static string GetArrayToString( object[] objArray, int index )
	{
		//---------------------------------------------------------------------------------------------------------------------------
		// -
		//---------------------------------------------------------------------------------------------------------------------------
		object	obj	= GetArray( (objArray), (index) );
		if( (obj)!=(null) )
		{
			return (obj as string);
		}

		//---------------------------------------------------------------------------------------------------------------------------
		// -
		//---------------------------------------------------------------------------------------------------------------------------
		return (null);
	}

	//-------------------------------------------------------------------------------------------------------------------------------
	// -
	//-------------------------------------------------------------------------------------------------------------------------------
	public static float StringToFloat( string text )
	{
		//---------------------------------------------------------------------------------------------------------------------------
		// -
		//---------------------------------------------------------------------------------------------------------------------------
		if( (text)==(null) ) return (0f);

		//---------------------------------------------------------------------------------------------------------------------------
		// -
		//---------------------------------------------------------------------------------------------------------------------------
		return float.Parse( text );
	}
 
	//-------------------------------------------------------------------------------------------------------------------------------
	// -
	//-------------------------------------------------------------------------------------------------------------------------------
    public static Vector2 Hermite( Vector2 V1, Vector2 T1, Vector2 V2, Vector2 T2, float s )
    {
	    //---------------------------------------------------------------------------------------------------------------------------
	    // -
	    //---------------------------------------------------------------------------------------------------------------------------
		Vector2		vOut;
 
	    //---------------------------------------------------------------------------------------------------------------------------
	    // -
	    //---------------------------------------------------------------------------------------------------------------------------
        (vOut.x)	= Hermite( (V1.x), (T1.x), (V2.x), (T2.x), (s) );
        (vOut.y)	= Hermite( (V1.y), (T1.y), (V2.y), (T2.y), (s) );
 
	    //---------------------------------------------------------------------------------------------------------------------------
	    // -
	    //---------------------------------------------------------------------------------------------------------------------------
        return (vOut);
    }
 
	//-------------------------------------------------------------------------------------------------------------------------------
	// -
	//-------------------------------------------------------------------------------------------------------------------------------
    public static Vector3 Hermite( Vector3 V1, Vector3 T1, Vector3 V2, Vector3 T2, float s )
    {
	    //---------------------------------------------------------------------------------------------------------------------------
	    // -
	    //---------------------------------------------------------------------------------------------------------------------------
		Vector3		vOut;
 
	    //---------------------------------------------------------------------------------------------------------------------------
	    // -
	    //---------------------------------------------------------------------------------------------------------------------------
        (vOut.x)	= Hermite( (V1.x), (T1.x), (V2.x), (T2.x), (s) );
        (vOut.y)	= Hermite( (V1.y), (T1.y), (V2.y), (T2.y), (s) );
        (vOut.z)	= Hermite( (V1.z), (T1.z), (V2.z), (T2.z), (s) );
 
	    //---------------------------------------------------------------------------------------------------------------------------
	    // -
	    //---------------------------------------------------------------------------------------------------------------------------
        return (vOut);
    }
 
	//-------------------------------------------------------------------------------------------------------------------------------
	// -
	//-------------------------------------------------------------------------------------------------------------------------------
    public static float Hermite( float V1, float T1, float V2, float T2, float s )
    {
	    //---------------------------------------------------------------------------------------------------------------------------
		// -
	    //--------------------------------------------------------------------------------------------------------------------------- 
        float	sCubed		= s * s * s;
        float	sSquared	= s * s;
 
	    //---------------------------------------------------------------------------------------------------------------------------
	    // -
	    //---------------------------------------------------------------------------------------------------------------------------
        if( (s)==(0) )
		{
			return (V1);
		}
        else
		if( (s)==(1) )
		{
			return (V2);
		}
 
	    //---------------------------------------------------------------------------------------------------------------------------
	    // -
	    //---------------------------------------------------------------------------------------------------------------------------
		return  (2 * V1 - 2 * V2 + T2 + T1) * (sCubed) + (3 * V2 - 3 * V1 - 2 * T1 - T2) * (sSquared) + (T1) * (s) + (V1);
    }

	//-------------------------------------------------------------------------------------------------------------------------------
	// 장면을 얻기 위한 함수
	//-------------------------------------------------------------------------------------------------------------------------------
	public static Scene	GetScene( int buildIndex )
	{
		//---------------------------------------------------------------------------------------------------------------------------
		// -
		//---------------------------------------------------------------------------------------------------------------------------
		for( int i=0; i<(SceneManager.sceneCount); i++ )
		{
			if( (SceneManager.GetSceneAt(i).buildIndex)==(buildIndex) )
			{
				return SceneManager.GetSceneAt(i);
			}
		}

		//---------------------------------------------------------------------------------------------------------------------------
		// -
		//---------------------------------------------------------------------------------------------------------------------------
		return new Scene();
	}

	//-------------------------------------------------------------------------------------------------------------------------------
	// 장면을 얻기 위한 함수
	//-------------------------------------------------------------------------------------------------------------------------------
	public static Scene	GetScene( SceneLevel buildIndex )
	{
		//---------------------------------------------------------------------------------------------------------------------------
		// -
		//---------------------------------------------------------------------------------------------------------------------------
		return GetScene((int)buildIndex);

		//---------------------------------------------------------------------------------------------------------------------------
		// -
		//---------------------------------------------------------------------------------------------------------------------------
	}

	//-------------------------------------------------------------------------------------------------------------------------------
	// 장면을 얻기 위한 함수
	//-------------------------------------------------------------------------------------------------------------------------------
	public static Scene	GetScene( string sceneName )
	{
		//---------------------------------------------------------------------------------------------------------------------------
		// -
		//---------------------------------------------------------------------------------------------------------------------------
		if( (sceneName)==(null) ) return new Scene();

		//---------------------------------------------------------------------------------------------------------------------------
		// -
		//---------------------------------------------------------------------------------------------------------------------------
		for( int i=0; i<(SceneManager.sceneCount); i++ )
		{
			if( (SceneManager.GetSceneAt(i).name)==(sceneName) )
			{
				return SceneManager.GetSceneAt(i);
			}
		}

		//---------------------------------------------------------------------------------------------------------------------------
		// -
		//---------------------------------------------------------------------------------------------------------------------------
		return new Scene();
	}

	//-------------------------------------------------------------------------------------------------------------------------------
	// 장면이 로드되어 있는지 확인하기 위한 함수
	//-------------------------------------------------------------------------------------------------------------------------------
	public static bool IsScene( SceneLevel buildIndex )
	{
		//---------------------------------------------------------------------------------------------------------------------------
		// -
		//---------------------------------------------------------------------------------------------------------------------------
		Scene	scene	= GetScene(buildIndex);
		if( (scene)!=(null) )
		{
			return (scene.isLoaded);
		}

		//---------------------------------------------------------------------------------------------------------------------------
		// -
		//---------------------------------------------------------------------------------------------------------------------------
		return false;
	}

	//-------------------------------------------------------------------------------------------------------------------------------
	// 장면을 불러오기 위한 함수
	//-------------------------------------------------------------------------------------------------------------------------------
	public static bool LoadScene( SceneLevel buildIndex, Action<object, object> func=(null), object wParam=(null), object lParam=(null) )
	{
		//---------------------------------------------------------------------------------------------------------------------------
		// -
		//---------------------------------------------------------------------------------------------------------------------------
		if( (wParam)==(null) ) (wParam) = (buildIndex);

		//---------------------------------------------------------------------------------------------------------------------------
		// -
		//---------------------------------------------------------------------------------------------------------------------------
		if( !IsScene(buildIndex) )
		{
			//-----------------------------------------------------------------------------------------------------------------------
			// -
			//-----------------------------------------------------------------------------------------------------------------------
			AsyncOperation	asyncOperation	= SceneManager.LoadSceneAsync( (int)(buildIndex), (LoadSceneMode.Additive) );
			if( (func)!=(null)  )
			{
				if( (CApp.This)!=(null) )
				{
					CApp.This.Engine.Coroutine( (asyncOperation), (func), (wParam), (lParam) );
				}
			}

			//-----------------------------------------------------------------------------------------------------------------------
			// -
			//-----------------------------------------------------------------------------------------------------------------------
			return true;
		}
		else
		if( (func)!=(null) )
		{
			func( (wParam), (lParam) );
			return true;
		}

		//---------------------------------------------------------------------------------------------------------------------------
		// -
		//---------------------------------------------------------------------------------------------------------------------------
		return false;
	}

	//-------------------------------------------------------------------------------------------------------------------------------
	// 장면을 불러오기 위한 함수
	//-------------------------------------------------------------------------------------------------------------------------------
	public static AsyncOperation LoadScene( string sceneName, Action<object, object> func=(null), object wParam=(null), object lParam=(null) )
	{
		//---------------------------------------------------------------------------------------------------------------------------
		// -
		//---------------------------------------------------------------------------------------------------------------------------
		if( (sceneName)==(null) ) return (null);

		//---------------------------------------------------------------------------------------------------------------------------
		// -
		//---------------------------------------------------------------------------------------------------------------------------
		AsyncOperation	asyncOperation	= SceneManager.LoadSceneAsync( (sceneName), (LoadSceneMode.Additive) );
		if( (func)!=(null) )
		{
			CApp.This.Engine.Coroutine( (asyncOperation), (func), (wParam), (lParam) );
		}

		//---------------------------------------------------------------------------------------------------------------------------
		// -
		//---------------------------------------------------------------------------------------------------------------------------
		return (asyncOperation);
	}

	//-------------------------------------------------------------------------------------------------------------------------------
	// 활성화되어있는 장면인지 확인하기 위한 함수
	//-------------------------------------------------------------------------------------------------------------------------------
	public static bool IsActiveScene( SceneLevel buildIndex )
	{
		//---------------------------------------------------------------------------------------------------------------------------
		// -
		//---------------------------------------------------------------------------------------------------------------------------
		if( (SceneManager.GetActiveScene().buildIndex)==((int)buildIndex) )
		{
			return true;
		}

		//---------------------------------------------------------------------------------------------------------------------------
		// -
		//---------------------------------------------------------------------------------------------------------------------------
		return false;
	}

	//-------------------------------------------------------------------------------------------------------------------------------
	// 장면을 언로드하기 위한 함수
	//-------------------------------------------------------------------------------------------------------------------------------
	public static void UnloadScene( SceneLevel buildIndex )
	{
		//---------------------------------------------------------------------------------------------------------------------------
		// -
		//---------------------------------------------------------------------------------------------------------------------------
		Scene	scene	= Func.GetScene((int)buildIndex);
		if( (scene)!=(null) && (scene.isLoaded) )
		{
			UnloadScene( scene );
		}
		
		//---------------------------------------------------------------------------------------------------------------------------
		// -
		//---------------------------------------------------------------------------------------------------------------------------
	}

	//-------------------------------------------------------------------------------------------------------------------------------
	// 장면을 언로드하기 위한 함수
	//-------------------------------------------------------------------------------------------------------------------------------
	public static void UnloadScene( Scene scene )
	{
		//---------------------------------------------------------------------------------------------------------------------------
		// -
		//---------------------------------------------------------------------------------------------------------------------------
		if( (scene)==(null) ) return;

		//---------------------------------------------------------------------------------------------------------------------------
		// -
		//---------------------------------------------------------------------------------------------------------------------------
		if( scene.isLoaded )
		{
			SceneManager.UnloadSceneAsync( scene );
		}

		//---------------------------------------------------------------------------------------------------------------------------
		// -
		//---------------------------------------------------------------------------------------------------------------------------
	}

	//-------------------------------------------------------------------------------------------------------------------------------
	// 트랜스폼을 생성하기 위한 함수
	//-------------------------------------------------------------------------------------------------------------------------------
	public static Transform Create( Transform parent, Vector3 vPos )
	{
		//---------------------------------------------------------------------------------------------------------------------------
		// -
		//---------------------------------------------------------------------------------------------------------------------------
//		if( (parent)==(null) ) return (null);	//(NULL)값을 허용함

		//---------------------------------------------------------------------------------------------------------------------------
		// -
		//---------------------------------------------------------------------------------------------------------------------------
		GameObject		obj				= new GameObject();
		Transform		transform		= (obj.transform);

		//---------------------------------------------------------------------------------------------------------------------------
		// -
		//---------------------------------------------------------------------------------------------------------------------------
		if( (parent)!=(null) )
		{
			transform.SetParent( parent );
		}

		//---------------------------------------------------------------------------------------------------------------------------
		// -
		//---------------------------------------------------------------------------------------------------------------------------
		(transform.localPosition)		= (vPos);
		(transform.localEulerAngles)	= new Vector3();
		(transform.localScale)			= new Vector3((1), (1), (1));

		//---------------------------------------------------------------------------------------------------------------------------
		// -
		//---------------------------------------------------------------------------------------------------------------------------
		if( (parent)!=(null) )
		{
			Library.SetLayer( (transform), (parent.gameObject.layer) );
		}

		//---------------------------------------------------------------------------------------------------------------------------
		// -
		//---------------------------------------------------------------------------------------------------------------------------
		return (transform);
	}

	//-------------------------------------------------------------------------------------------------------------------------------
	// 모델을 생성하기 위한 함수
	//-------------------------------------------------------------------------------------------------------------------------------
	public static Transform Create( Transform parent, Vector3 position, Vector3 rotation, Vector3 scale, GameObject sample, bool Local=(false) )
	{
		//---------------------------------------------------------------------------------------------------------------------------
		// -
		//---------------------------------------------------------------------------------------------------------------------------
//		if( (parent)==(null) ) return (null);	//(NULL)값을 허용함
		if( (sample)==(null) ) return (null);

		//---------------------------------------------------------------------------------------------------------------------------
		// -
		//---------------------------------------------------------------------------------------------------------------------------
		GameObject	obj			= (GameObject.Instantiate( (sample), (position), Quaternion.Euler(rotation) ) as GameObject);
		Transform	transform	= (obj.transform);

		//---------------------------------------------------------------------------------------------------------------------------
		// -
		//---------------------------------------------------------------------------------------------------------------------------
		if( (scale.x)==(0) ) (scale.x)	= (1);
		if( (scale.y)==(0) ) (scale.y)	= (1);
		if( (scale.z)==(0) ) (scale.z)	= (1);

		//---------------------------------------------------------------------------------------------------------------------------
		// -
		//---------------------------------------------------------------------------------------------------------------------------
		if( true )
		{
			//-----------------------------------------------------------------------------------------------------------------------
			// -
			//-----------------------------------------------------------------------------------------------------------------------
			transform.SetParent( parent );

			//-----------------------------------------------------------------------------------------------------------------------
			// -
			//-----------------------------------------------------------------------------------------------------------------------
			if( Local )
			{
				(transform.localPosition)	= (position);
			}
			else
			{
				(transform.position)		= (position);
			}

			//-----------------------------------------------------------------------------------------------------------------------
			// -
			//-----------------------------------------------------------------------------------------------------------------------
			(transform.localEulerAngles)	= (rotation);
			(transform.localScale)			= (scale);

			//-----------------------------------------------------------------------------------------------------------------------
			// -
			//-----------------------------------------------------------------------------------------------------------------------
		}

		//---------------------------------------------------------------------------------------------------------------------------
		// -
		//---------------------------------------------------------------------------------------------------------------------------
		return (transform);
	}

	//-------------------------------------------------------------------------------------------------------------------------------
	// 모델을 생성하기 위한 함수
	//-------------------------------------------------------------------------------------------------------------------------------
	public static Transform Create( Transform parent, Vector3 position, GameObject sample, bool Local=(false) )
	{
		//---------------------------------------------------------------------------------------------------------------------------
		// -
		//---------------------------------------------------------------------------------------------------------------------------
//		if( (parent)==(null) ) return (null);	//(NULL)값을 허용함
		if( (sample)==(null) ) return (null);

		//---------------------------------------------------------------------------------------------------------------------------
		// -
		//---------------------------------------------------------------------------------------------------------------------------
		return Create( (parent), (position), new Vector3(), new Vector3(), (sample), (Local) );
	}

	//-------------------------------------------------------------------------------------------------------------------------------
	// 모델을 생성하기 위한 함수
	//-------------------------------------------------------------------------------------------------------------------------------
	public static Transform Create( Transform parent, GameObject sample )
	{
		//---------------------------------------------------------------------------------------------------------------------------
		// -
		//---------------------------------------------------------------------------------------------------------------------------
		if( (sample)==(null) ) return (null);

		//---------------------------------------------------------------------------------------------------------------------------
		// -
		//---------------------------------------------------------------------------------------------------------------------------
		return Create( (parent), new Vector3(), new Vector3(), new Vector3(), (sample) );
	}

	//-------------------------------------------------------------------------------------------------------------------------------
	// 쉐이더를 설정하기 위한 함수
	//-------------------------------------------------------------------------------------------------------------------------------
	public static void SetShader( Transform transform, Shader shader )
	{
		//---------------------------------------------------------------------------------------------------------------------------
		// -
		//---------------------------------------------------------------------------------------------------------------------------
		if( (transform)==(null) ) return;
		if( (shader)==(null) ) return;

		//---------------------------------------------------------------------------------------------------------------------------
		// -
		//---------------------------------------------------------------------------------------------------------------------------
		Renderer	renderer	= (transform.GetComponentInChildren(typeof(Renderer)) as Renderer);
		if( (renderer)!=(null) )
		{
			(renderer.material.shader)	= (shader);
		}

		//---------------------------------------------------------------------------------------------------------------------------
		// -
		//---------------------------------------------------------------------------------------------------------------------------
	}

	//-------------------------------------------------------------------------------------------------------------------------------
	// 오브젝트를 활성화 하기 위한 함수
	//-------------------------------------------------------------------------------------------------------------------------------
	public static void Active( GameObject obj )
	{
		//---------------------------------------------------------------------------------------------------------------------------
		// -
		//---------------------------------------------------------------------------------------------------------------------------
		if( (obj)==(null) ) return;

		//---------------------------------------------------------------------------------------------------------------------------
		// -
		//---------------------------------------------------------------------------------------------------------------------------
		objEnable	enable	= (obj.GetComponent(typeof(objEnable)) as objEnable);
		if( (enable)!=(null) )
		{
			(enable.Enabled)	= (true);
			(enable.enabled)	= (false);
			Component.Destroy( enable );
		}

		//---------------------------------------------------------------------------------------------------------------------------
		// -
		//---------------------------------------------------------------------------------------------------------------------------
		if( !(obj.activeSelf) )
		{
			obj.SetActive( true );
		}

		//---------------------------------------------------------------------------------------------------------------------------
		// -
		//---------------------------------------------------------------------------------------------------------------------------
	}

	//-------------------------------------------------------------------------------------------------------------------------------
	// 오브젝트를 비활성화 하기 위한 함수
	//-------------------------------------------------------------------------------------------------------------------------------
	public static void Inactive( GameObject obj )
	{
		//---------------------------------------------------------------------------------------------------------------------------
		// -
		//---------------------------------------------------------------------------------------------------------------------------
		if( (obj)==(null) ) return;

		//---------------------------------------------------------------------------------------------------------------------------
		// -
		//---------------------------------------------------------------------------------------------------------------------------
		if( obj.activeSelf )
		{
			obj.SetActive( false );
		}

		//---------------------------------------------------------------------------------------------------------------------------
		// -
		//---------------------------------------------------------------------------------------------------------------------------
	}

	//-------------------------------------------------------------------------------------------------------------------------------
	// 컴바인 인스턴스를 생성하기 위한 함수
	//-------------------------------------------------------------------------------------------------------------------------------
	public static CombineInstance CombineInstance( Mesh mesh, int subMeshIndex=(0), Matrix4x4 matrix=new Matrix4x4() )
	{
		//---------------------------------------------------------------------------------------------------------------------------
		// -
		//---------------------------------------------------------------------------------------------------------------------------
		if( (mesh)==(null) ) return new CombineInstance();

		//---------------------------------------------------------------------------------------------------------------------------
		// -
		//---------------------------------------------------------------------------------------------------------------------------
		CombineInstance		combineInstance		= new CombineInstance();
		(combineInstance.mesh)			= (mesh);
		(combineInstance.subMeshIndex)	= (subMeshIndex);
		(combineInstance.transform)		= (matrix);

		//---------------------------------------------------------------------------------------------------------------------------
		// -
		//---------------------------------------------------------------------------------------------------------------------------
		return (combineInstance);
	}

	//-------------------------------------------------------------------------------------------------------------------------------
	// 코드의 문자열을 얻기 위한 함수
	//-------------------------------------------------------------------------------------------------------------------------------
	public static string Code( string[] Codes, int index )
	{
		//---------------------------------------------------------------------------------------------------------------------------
		// -
		//---------------------------------------------------------------------------------------------------------------------------
		if( (Codes)==(null) ) return (null);
		if( (index)<(0) || (index)>=(Codes.Length) ) return (null);

		//---------------------------------------------------------------------------------------------------------------------------
		// -
		//---------------------------------------------------------------------------------------------------------------------------
		return (Codes[index]);
	}
	
	//-------------------------------------------------------------------------------------------------------------------------------
	// 문자열을 확인하기 위한 함수
	//-------------------------------------------------------------------------------------------------------------------------------
	public static string CH( string text1, string text2 )
	{
		//---------------------------------------------------------------------------------------------------------------------------
		// -
		//---------------------------------------------------------------------------------------------------------------------------
		if( (text1)==(null) ) return "(NOTHING)";
		if( (text2)==(null) ) return "(NOTHING)";

		//---------------------------------------------------------------------------------------------------------------------------
		// -
		//---------------------------------------------------------------------------------------------------------------------------
		if( Library.Is(text2) )
		{
			return (text2);
		}

		//---------------------------------------------------------------------------------------------------------------------------
		// -
		//---------------------------------------------------------------------------------------------------------------------------
		if( !Library.Is(text1) )
		{
			return "(NOTHING)";
		}

		//---------------------------------------------------------------------------------------------------------------------------
		// -
		//---------------------------------------------------------------------------------------------------------------------------
		return (text1);
	}

	//-------------------------------------------------------------------------------------------------------------------------------
	// 파일 크기를 얻기 위한 하뭇
	//-------------------------------------------------------------------------------------------------------------------------------
	public static string GetFileSize( int size )
	{
		//---------------------------------------------------------------------------------------------------------------------------
		// -
		//---------------------------------------------------------------------------------------------------------------------------
		if( (size)>=(1024*1024*1024) )
		{
			return Func.NumberFormat((size)/(1024*1024*1024))+" GB";
		}
		else
		//---------------------------------------------------------------------------------------------------------------------------
		// -
		//---------------------------------------------------------------------------------------------------------------------------
		if( (size)>=(1024*1024) )
		{
			return Func.NumberFormat((size)/(1024*1024))+" MB";
		}
		else
		//---------------------------------------------------------------------------------------------------------------------------
		// -
		//---------------------------------------------------------------------------------------------------------------------------
		if( (size)>=(1024) )
		{
			return Func.NumberFormat(size/1024)+" KB";
		}

		//---------------------------------------------------------------------------------------------------------------------------
		// -
		//---------------------------------------------------------------------------------------------------------------------------
		return Func.NumberFormat(size)+" byte";
	}

	//-------------------------------------------------------------------------------------------------------------------------------
	// -
	//-------------------------------------------------------------------------------------------------------------------------------
	public static string NumberStringFormat( int number )
	{
		//---------------------------------------------------------------------------------------------------------------------------
		// -
		//---------------------------------------------------------------------------------------------------------------------------
		string	text	= (null);

		//---------------------------------------------------------------------------------------------------------------------------
		// 억
		//---------------------------------------------------------------------------------------------------------------------------
		if( (number)>=(10000*10000) )
		{
			if( Library.Is(text) ) (text)	+= " ";
			(text)	+= (number)/(10000*10000)+"억";
		}

		//---------------------------------------------------------------------------------------------------------------------------
		// 만
		//---------------------------------------------------------------------------------------------------------------------------
		if( (number)>=(10000) )
		{
			if( Library.Is(text) ) (text)	+= " ";
			(text)	+= (number)/(10000)+"만";
		}

		//---------------------------------------------------------------------------------------------------------------------------
		// -
		//---------------------------------------------------------------------------------------------------------------------------
		if( (number)%(10000)>(0) )
		{
			if( Library.Is(text) ) (text)	+= " ";
			(text)	+= (number)%(10000);
		}

		//---------------------------------------------------------------------------------------------------------------------------
		// -
		//---------------------------------------------------------------------------------------------------------------------------
		return (text);
	}

	//-------------------------------------------------------------------------------------------------------------------------------
	// -
	//-------------------------------------------------------------------------------------------------------------------------------
	public static string Get( string[] strArray, object index )
	{
		//---------------------------------------------------------------------------------------------------------------------------
		// -
		//---------------------------------------------------------------------------------------------------------------------------
		if( (strArray)==(null) ) return (null);

		//---------------------------------------------------------------------------------------------------------------------------
		// -
		//---------------------------------------------------------------------------------------------------------------------------
		int		nIndex		= (int)(index);

		//---------------------------------------------------------------------------------------------------------------------------
		// -
		//---------------------------------------------------------------------------------------------------------------------------
		if( (nIndex)<(0) || (nIndex)>=(strArray.Length) )
		{
			return (null);
		}

		//---------------------------------------------------------------------------------------------------------------------------
		// -
		//---------------------------------------------------------------------------------------------------------------------------
		return (strArray[nIndex]);
	}

	//-------------------------------------------------------------------------------------------------------------------------------
	// -
	//-------------------------------------------------------------------------------------------------------------------------------
	public static int GetInt( string[] strArray, object index )
	{
		//---------------------------------------------------------------------------------------------------------------------------
		// -
		//---------------------------------------------------------------------------------------------------------------------------
		if( (strArray)==(null) ) return (0);

		//---------------------------------------------------------------------------------------------------------------------------
		// -
		//---------------------------------------------------------------------------------------------------------------------------
		string	value	= Get( (strArray), (index) );
		if( Library.Is(value) )
		{
			return int.Parse(value);
		}

		//---------------------------------------------------------------------------------------------------------------------------
		// -
		//---------------------------------------------------------------------------------------------------------------------------
		return (0);
	}

	//-------------------------------------------------------------------------------------------------------------------------------
	// -
	//-------------------------------------------------------------------------------------------------------------------------------
	public static List<string> GetList( string[] strArray, object index, char token='/' )
	{
		//---------------------------------------------------------------------------------------------------------------------------
		// -
		//---------------------------------------------------------------------------------------------------------------------------
		if( (strArray)==(null) ) return (null);
		if( (token)==(0) ) return (null);

		//---------------------------------------------------------------------------------------------------------------------------
		// -
		//---------------------------------------------------------------------------------------------------------------------------
		List<string>	list	= new List<string>();

		//---------------------------------------------------------------------------------------------------------------------------
		// -
		//---------------------------------------------------------------------------------------------------------------------------
		string	value	= Get( (strArray), (index) );
		if( Library.Is(value) )
		{
			string[]		valueArray	= value.Split(token);
			foreach( string value0 in valueArray )
			{
				list.Add(value0);
			}
		}

		//---------------------------------------------------------------------------------------------------------------------------
		// -
		//---------------------------------------------------------------------------------------------------------------------------
		return (list);
	}

	public static string PostPosition( string value, string postposition )
	{
		if( !Library.Is(value) ) return postposition;
		if( !Library.Is(postposition) ) return null;

        return value+PostPosition_( value, postposition );
    }

	public static string PostPosition_( string value, string postposition )
	{
		if( !Library.Is(value) ) return postposition;
		if( !Library.Is(postposition) ) return null;

		int code = 0;
		int temp = 0;
		int T = 0;
		int V = 0;
		int L = 0;

		string char1 = null;
		string char2 = null;
		string char3 = null;
		string return1 = null;
		string return2 = null;
		string return3 = null;

		string[] LCetable = {"ㄱ","ㄲ","ㄴ","ㄷ","ㄸ","ㄹ","ㅁ","ㅂ","ㅃ","ㅅ","ㅆ","ㅇ","ㅈ","ㅉ","ㅊ","ㅋ","ㅌ","ㅍ","ㅎ"};
		string[] MVetable = {"ㅏ","ㅐ","ㅑ","ㅒ","ㅓ","ㅔ","ㅕ","ㅖ","ㅗ","ㅘ","ㅙ","ㅚ","ㅛ","ㅜ","ㅝ","ㅞ","ㅟ","ㅠ","ㅡ","ㅢ","ㅣ"};
		string[] TCetable = {"","ㄱ","ㄲ","ㄳ","ㄴ","ㄵ","ㄶ","ㄷ","ㄹ","ㄺ","ㄻ","ㄼ","ㄽ","ㄾ","ㄿ","ㅀ","ㅁ","ㅂ","ㅄ","ㅅ","ㅆ","ㅇ","ㅈ","ㅊ","ㅋ","ㅌ","ㅍ","ㅎ"};

		byte[] buffer = System.Text.Encoding.Convert( System.Text.Encoding.UTF8, System.Text.Encoding.Unicode, System.Text.Encoding.UTF8.GetBytes(value) );
		value = System.Text.Encoding.Unicode.GetString(buffer);

		byte[] bytes = null;
		int val = 0;

		int length = value.Length;

		for( int i=length-1; i>=0; i-- )
		{
			bytes = System.Text.Encoding.Unicode.GetBytes( value.Substring(i,1) );
            val = bytes[1] * 256 + bytes[0];

			if( val>=44032 && val<=55203 )
			{
				code = 0;
				temp = 0;
				code = val;
				temp = code-44032;
				T = (int)(temp%28);
				temp /= 28;
				V = (int)(temp%21);
				temp /= 21;
				L = (int)temp;

				char1 = LCetable[L];
				char2 = MVetable[V];
				char3 = TCetable[T];

				break;
			}
			else
			{
				char3 = "alphabet";
				i = -1; //Warning 때문에 break 대신 for문을 종료함 //break;
			}
		}

		switch( postposition )
		{
			//로/으로
			case"로":
			case"으로":
				return1 = "(으)로";
				return2 = "으로";
				return3 = "로";
				break;

			//을/를
			case"을":
			case"를":
				return1 = "(을)를";
				return2 = "을";
				return3 = "를";
				break;

			//이/가
			case"이":
			case"가":
				return1 = "(이)가";
				return2 = "이";
				return3 = "가";
				break;

			//은/는
			case"은":
			case"는":
				return1 = "(은)는";
				return2 = "은";
				return3 = "는";
				break;

			//과/와
			case"과":
			case"와":
				return1 = "(와)과";
				return2 = "과";
				return3 = "와";
				break;

			//과/와
			case"야":
				return1 = "(이)야";
				return2 = "이야";
				return3 = "야";
				break;

			default:
				return postposition;
		}

		if( char3=="alphabet" )
		{
			return return1;
		}
		else
		if( char3.Length>0 && char3!="ㄹ" )
		{
			return return2;
		}

        return return3;
	}

	public static void Material( GameObject gameObject, Material mtrlsample, bool TextureChange=(false) )
	{
		//---------------------------------------------------------------------------------------------------------------------------
		// -
		//---------------------------------------------------------------------------------------------------------------------------
		if( (gameObject)==(null) ) return;
		if( (mtrlsample)==(null) ) return;

		//---------------------------------------------------------------------------------------------------------------------------
		// -
		//---------------------------------------------------------------------------------------------------------------------------
		int				i;

		Texture			texture;

		//---------------------------------------------------------------------------------------------------------------------------
		// -
		//---------------------------------------------------------------------------------------------------------------------------
		Component[]		comArray		= gameObject.GetComponentsInChildren(typeof(Renderer));
		foreach( Renderer renderer in comArray )
		{
			for( i=0; i<(renderer.materials.Length); i++ )
			{
				if( TextureChange )
				{
					(texture)	= (renderer.materials[i].mainTexture);
					renderer.materials[i].CopyPropertiesFromMaterial(mtrlsample);
					(renderer.materials[i].shader)			= (mtrlsample.shader);
					(renderer.materials[i].mainTexture)		= (texture);
				}
				else
				{
					renderer.materials[i].CopyPropertiesFromMaterial(mtrlsample);
					(renderer.materials[i].shader)			= (mtrlsample.shader);
				}
			}
		}

		//---------------------------------------------------------------------------------------------------------------------------
		// -
		//---------------------------------------------------------------------------------------------------------------------------
	}

	//-------------------------------------------------------------------------------------------------------------------------------
	// 시간을 얻기 위한 함수
	//-------------------------------------------------------------------------------------------------------------------------------
	public static long GetTime()
	{
		//---------------------------------------------------------------------------------------------------------------------------
		// -
		//---------------------------------------------------------------------------------------------------------------------------
		return (DateTime.Now.Ticks);

		//---------------------------------------------------------------------------------------------------------------------------
		// -
		//---------------------------------------------------------------------------------------------------------------------------
	}

	//-------------------------------------------------------------------------------------------------------------------------------
	// 현재 시간을 얻기 위한 함수
	//-------------------------------------------------------------------------------------------------------------------------------
	public static DateTime Now()
	{
		//---------------------------------------------------------------------------------------------------------------------------
		// -
		//---------------------------------------------------------------------------------------------------------------------------
		return (DateTime.Now);

		//---------------------------------------------------------------------------------------------------------------------------
		// -
		//---------------------------------------------------------------------------------------------------------------------------
	}

	//-------------------------------------------------------------------------------------------------------------------------------
	// 메인 에셋을 얻기 위한 함수
	//-------------------------------------------------------------------------------------------------------------------------------
	public static GameObject GetMainAsset( tagAssetBundle assetBundle )
	{
        //---------------------------------------------------------------------------------------------------------------------------
	    // -
		//---------------------------------------------------------------------------------------------------------------------------
		if( (assetBundle)==(null) ) return (null);

        //---------------------------------------------------------------------------------------------------------------------------
	    // -
		//---------------------------------------------------------------------------------------------------------------------------
		return Func.GetMainAsset(assetBundle.bundle);
	}

	//메인 에셋을 얻기 위한 함수
	public static GameObject GetMainAsset( AssetBundle bundle )
	{
		if( bundle==null ) return null;

		string[] Names = bundle.GetAllAssetNames();
		foreach( string path in Names )
		{
			if( Library.Ext(path)=="prefab" )
			{
				return bundle.LoadAsset( path, typeof(GameObject) ) as GameObject;
			}
		}

//		return (bundle.mainAsset as GameObject);
		return null;
	}

	//-------------------------------------------------------------------------------------------------------------------------------
	// 애셋번들 버전을 확인하기 위한 함수
	//-------------------------------------------------------------------------------------------------------------------------------
	public static bool IsAssetBundleVersion( tagAssetBundle assetBundle )
	{
        //---------------------------------------------------------------------------------------------------------------------------
	    // -
		//---------------------------------------------------------------------------------------------------------------------------
		if( (assetBundle)==(null) ) return false;

        //---------------------------------------------------------------------------------------------------------------------------
	    // -
		//---------------------------------------------------------------------------------------------------------------------------
		if( assetBundle.IsVersion() )
		{
			return true;
		}

        //---------------------------------------------------------------------------------------------------------------------------
	    // -
		//---------------------------------------------------------------------------------------------------------------------------
		return false;
	}

	//-------------------------------------------------------------------------------------------------------------------------------
	// 경로를 확인하기 위한 함수
	//-------------------------------------------------------------------------------------------------------------------------------
	public static bool IsDir( string path )
	{
        //---------------------------------------------------------------------------------------------------------------------------
	    // -
		//---------------------------------------------------------------------------------------------------------------------------
		if( (path)==(null) ) return false;

        //---------------------------------------------------------------------------------------------------------------------------
	    // -
		//---------------------------------------------------------------------------------------------------------------------------
		return Directory.Exists(path);
	}

	//-------------------------------------------------------------------------------------------------------------------------------
	// 쉬프트 연산을 처리하기 위한 함수
	//-------------------------------------------------------------------------------------------------------------------------------
	public static int Shift( int index ) 
	{
        //---------------------------------------------------------------------------------------------------------------------------
	    // -
		//---------------------------------------------------------------------------------------------------------------------------
		return (1<<index);

        //---------------------------------------------------------------------------------------------------------------------------
	    // -
		//---------------------------------------------------------------------------------------------------------------------------
	}

	//-------------------------------------------------------------------------------------------------------------------------------
    // 콜백 함수를 호출하기 위한 함수
	//-------------------------------------------------------------------------------------------------------------------------------
	public static void Call( tagCallback function )
	{
		//---------------------------------------------------------------------------------------------------------------------------
		// -
		//---------------------------------------------------------------------------------------------------------------------------
		if( (function)==(null) ) return;

		//---------------------------------------------------------------------------------------------------------------------------
		// -
		//---------------------------------------------------------------------------------------------------------------------------
//		CApp.This.MessageQueue.ON( (function.func), (function.wParam), (function.lParam) );
		function.Call();

		//---------------------------------------------------------------------------------------------------------------------------
		// -
		//---------------------------------------------------------------------------------------------------------------------------
	}

	//-------------------------------------------------------------------------------------------------------------------------------
	// 장면 설정을 활성화 하기 위한 함수
	//-------------------------------------------------------------------------------------------------------------------------------
	public static void funcActiveScene( object wParam=(null), object lParam=(null) )
	{
		//---------------------------------------------------------------------------------------------------------------------------
		// -
		//---------------------------------------------------------------------------------------------------------------------------
		Scene	scene;

		//---------------------------------------------------------------------------------------------------------------------------
		// -
		//---------------------------------------------------------------------------------------------------------------------------
		if( ( (wParam)==(null) || wParam.GetType()!=typeof(SceneLevel) ) && Library.Is((string)(lParam)) ) 
		{
			//-----------------------------------------------------------------------------------------------------------------------
			// -
			//-----------------------------------------------------------------------------------------------------------------------
			ActiveScene( GetScene((string)(lParam)) );

			//-----------------------------------------------------------------------------------------------------------------------
			// -
			//-----------------------------------------------------------------------------------------------------------------------
		}
		else
		if( (wParam)!=(null) && wParam.GetType()==typeof(Scene) )
		{
			//-----------------------------------------------------------------------------------------------------------------------
			// -
			//-----------------------------------------------------------------------------------------------------------------------
			ActiveScene( (Scene)(wParam) );

			//-----------------------------------------------------------------------------------------------------------------------
			// -
			//-----------------------------------------------------------------------------------------------------------------------
			return;
		}

		//---------------------------------------------------------------------------------------------------------------------------
		// -
		//---------------------------------------------------------------------------------------------------------------------------
		if( (wParam)==(null) || wParam.GetType()!=typeof(SceneLevel) ) return;

		//---------------------------------------------------------------------------------------------------------------------------
		// -
		//---------------------------------------------------------------------------------------------------------------------------
		(scene)	= Func.GetScene((int)(wParam));
		if( (scene)!=(null) && (scene.isLoaded) )
		{
			ActiveScene( scene );
		}

		//---------------------------------------------------------------------------------------------------------------------------
		// -
		//---------------------------------------------------------------------------------------------------------------------------
	}

	//-------------------------------------------------------------------------------------------------------------------------------
	// 장면 설정을 활성화 하기 위한 함수
	//-------------------------------------------------------------------------------------------------------------------------------
	public static void ActiveScene( Scene scene )
	{
		//---------------------------------------------------------------------------------------------------------------------------
		// -
		//---------------------------------------------------------------------------------------------------------------------------
		if( (scene)==(null) ) return;
		if( !(scene.isLoaded) ) return;

		//---------------------------------------------------------------------------------------------------------------------------
		// -
		//---------------------------------------------------------------------------------------------------------------------------
		SceneManager.SetActiveScene( scene );

		//---------------------------------------------------------------------------------------------------------------------------
		// -
		//---------------------------------------------------------------------------------------------------------------------------
	}

	//-------------------------------------------------------------------------------------------------------------------------------
	// -
	//-------------------------------------------------------------------------------------------------------------------------------
	public static string Highlight( string text )
	{
		//---------------------------------------------------------------------------------------------------------------------------
		// -
		//---------------------------------------------------------------------------------------------------------------------------
		if( (text)==(null) ) return (null);

		//---------------------------------------------------------------------------------------------------------------------------
		// -
		//---------------------------------------------------------------------------------------------------------------------------
        return "<color="+(TEXT.HIGHLIGHT_COLOR)+">"+(text)+"</color>";
    }

	//-------------------------------------------------------------------------------------------------------------------------------
	// -
	//-------------------------------------------------------------------------------------------------------------------------------
	public static string Highlight( int value )
	{
		//---------------------------------------------------------------------------------------------------------------------------
		// -
		//---------------------------------------------------------------------------------------------------------------------------
        return Highlight(value.ToString());

		//---------------------------------------------------------------------------------------------------------------------------
		// -
		//---------------------------------------------------------------------------------------------------------------------------
    }

	//-------------------------------------------------------------------------------------------------------------------------------
	// -
	//-------------------------------------------------------------------------------------------------------------------------------
	public static string HighlightAlert( string text )
	{
		//---------------------------------------------------------------------------------------------------------------------------
		// -
		//---------------------------------------------------------------------------------------------------------------------------
		if( (text)==(null) ) return (null);

		//---------------------------------------------------------------------------------------------------------------------------
		// -
		//---------------------------------------------------------------------------------------------------------------------------
        return "<color=yellow>"+(text)+"</color>";
    }

	//-------------------------------------------------------------------------------------------------------------------------------
	// -
	//-------------------------------------------------------------------------------------------------------------------------------
	public static string HighlightConfirm( string text )
	{
		//---------------------------------------------------------------------------------------------------------------------------
		// -
		//---------------------------------------------------------------------------------------------------------------------------
		if( (text)==(null) ) return (null);

		//---------------------------------------------------------------------------------------------------------------------------
		// -
		//---------------------------------------------------------------------------------------------------------------------------
        return "<color=green>"+(text)+"</color>";
    }

	//-------------------------------------------------------------------------------------------------------------------------------
	// -
	//-------------------------------------------------------------------------------------------------------------------------------
	public static void SceneClear()
	{
		//---------------------------------------------------------------------------------------------------------------------------
		// -
		//---------------------------------------------------------------------------------------------------------------------------
		if( (SceneManager.sceneCount)>(1) )
		{
			for( int i=(SceneManager.sceneCount-1); i>(0); i-- )
			{
				Scene	scene	= SceneManager.GetSceneAt(i);
				if( (scene.buildIndex)!=(int)(SceneLevel.Startup) )
				{
					SceneManager.UnloadSceneAsync(scene.buildIndex);
				}
			}
		}

		//---------------------------------------------------------------------------------------------------------------------------
		// -
		//---------------------------------------------------------------------------------------------------------------------------
	}

	//-------------------------------------------------------------------------------------------------------------------------------
	// -
	//-------------------------------------------------------------------------------------------------------------------------------
	public static void ComponentDestroy( Component component )
	{
		//---------------------------------------------------------------------------------------------------------------------------
		// -
		//---------------------------------------------------------------------------------------------------------------------------
		if( (component)==(null) ) return;

		//---------------------------------------------------------------------------------------------------------------------------
		// -
		//---------------------------------------------------------------------------------------------------------------------------
		Component.Destroy(component);

		//---------------------------------------------------------------------------------------------------------------------------
		// -
		//---------------------------------------------------------------------------------------------------------------------------
	}

	//-------------------------------------------------------------------------------------------------------------------------------
	// -
	//-------------------------------------------------------------------------------------------------------------------------------
	public static void UnloadAllScene()
	{
		//---------------------------------------------------------------------------------------------------------------------------
		// -
		//---------------------------------------------------------------------------------------------------------------------------
		Scene	scene	= new Scene();

		//---------------------------------------------------------------------------------------------------------------------------
		// -
		//---------------------------------------------------------------------------------------------------------------------------
		if( (SceneManager.sceneCount)>(1) )
		{
			for( int i=(SceneManager.sceneCount-1); i>(0); i-- )
			{
				(scene)	= SceneManager.GetSceneAt(i);
				if( (scene.buildIndex)!=(int)(SceneLevel.Startup) )
				{
					SceneManager.UnloadSceneAsync(scene.name);
				}
			}
		}

		//---------------------------------------------------------------------------------------------------------------------------
		// -
		//---------------------------------------------------------------------------------------------------------------------------
	}

	//-------------------------------------------------------------------------------------------------------------------------------
	// 파일을 확인하기 위한 함수
	//-------------------------------------------------------------------------------------------------------------------------------
	public static bool IsFile( string filepath )
	{
		//---------------------------------------------------------------------------------------------------------------------------
		// -
		//---------------------------------------------------------------------------------------------------------------------------
		if( (filepath)==(null) ) return false;

		//---------------------------------------------------------------------------------------------------------------------------
		// -
		//---------------------------------------------------------------------------------------------------------------------------
		if( File.Exists(filepath) ) 
		{
			return true;
		}

		//---------------------------------------------------------------------------------------------------------------------------
		// -
		//---------------------------------------------------------------------------------------------------------------------------
		return false;
	}

	//-------------------------------------------------------------------------------------------------------------------------------
	// 사운드 파일인지 확인하기 위한 함수
	//-------------------------------------------------------------------------------------------------------------------------------
	public static bool IsSoundFile( string filepath )
	{
		//---------------------------------------------------------------------------------------------------------------------------
		// -
		//---------------------------------------------------------------------------------------------------------------------------
		if( (filepath)==(null) ) return false;

		//---------------------------------------------------------------------------------------------------------------------------
		// -
		//---------------------------------------------------------------------------------------------------------------------------
		string		ext		= Ext(filepath);

		//---------------------------------------------------------------------------------------------------------------------------
		// -
		//---------------------------------------------------------------------------------------------------------------------------
		if( (ext)=="wav" || (ext)=="ogg" || (ext)=="mp3" )
		{
			return true;
		}

		//---------------------------------------------------------------------------------------------------------------------------
		// -
		//---------------------------------------------------------------------------------------------------------------------------
		return false;
	}

	//-------------------------------------------------------------------------------------------------------------------------------
	// 영문과 숫자만 포함된 문자열인지 확인하기 위한 함수
	//-------------------------------------------------------------------------------------------------------------------------------
	public static bool IsAlNum( string text )
	{
		//---------------------------------------------------------------------------------------------------------------------------
		// -
		//---------------------------------------------------------------------------------------------------------------------------
		if( (text)==(null) ) return false;

		//---------------------------------------------------------------------------------------------------------------------------
		// -
		//---------------------------------------------------------------------------------------------------------------------------
		if( Regex.IsMatch( (text), @"^[a-zA-Z0-9.]+$") )
		{
			return true;
		}

		//---------------------------------------------------------------------------------------------------------------------------
		// -
		//---------------------------------------------------------------------------------------------------------------------------
		return false;
	}

	//-------------------------------------------------------------------------------------------------------------------------------
	// 캔버스 상 월드 좌표를 얻기 위한 함수
	//-------------------------------------------------------------------------------------------------------------------------------
	public static Vector3 GetCanvasPoint( objCanvas canvas, Transform transform )
	{
		//---------------------------------------------------------------------------------------------------------------------------
		// -
		//---------------------------------------------------------------------------------------------------------------------------
		if( (canvas)==(null) ) return new Vector3();
		if( (transform)==(null) ) return new Vector3();

		//---------------------------------------------------------------------------------------------------------------------------
		// -
		//---------------------------------------------------------------------------------------------------------------------------
		Vector3		vResult		= new Vector3();

		//---------------------------------------------------------------------------------------------------------------------------
		// -
		//---------------------------------------------------------------------------------------------------------------------------
		(vResult.x)		= Func.Divide( (transform.position.x), (canvas.Transform().localScale.x) );
		(vResult.y)		= Func.Divide( (transform.position.y), (canvas.Transform().localScale.y) );
		(vResult.z)		= Func.Divide( (transform.position.z), (canvas.Transform().localScale.z) );

		//---------------------------------------------------------------------------------------------------------------------------
		// -
		//---------------------------------------------------------------------------------------------------------------------------
		return (vResult);
	}

	//-------------------------------------------------------------------------------------------------------------------------------
	// 캔버스 상 월드 좌표를 얻기 위한 함수
	//-------------------------------------------------------------------------------------------------------------------------------
	public static Vector2 GetCanvasSize( objCanvas canvas, RectTransform transform )
	{
		//---------------------------------------------------------------------------------------------------------------------------
		// -
		//---------------------------------------------------------------------------------------------------------------------------
		if( (canvas)==(null) ) return new Vector2();
		if( (transform)==(null) ) return new Vector2();

		//---------------------------------------------------------------------------------------------------------------------------
		// -
		//---------------------------------------------------------------------------------------------------------------------------
		Vector2		vResult		= new Vector2();

		//---------------------------------------------------------------------------------------------------------------------------
		// -
		//---------------------------------------------------------------------------------------------------------------------------
		(vResult.x)		= Func.Divide( (transform.sizeDelta.x) * (transform.lossyScale.x), (canvas.Transform().localScale.x) );
		(vResult.y)		= Func.Divide( (transform.sizeDelta.y) * (transform.lossyScale.y), (canvas.Transform().localScale.y) );
		
		//---------------------------------------------------------------------------------------------------------------------------
		// -
		//---------------------------------------------------------------------------------------------------------------------------
		return (vResult);
	}

	//-------------------------------------------------------------------------------------------------------------------------------
	// 백분율을 처리하기 위한 함수
	//-------------------------------------------------------------------------------------------------------------------------------
	public static float Percentage( float value, int nDecimal=(0) )
	{
        //---------------------------------------------------------------------------------------------------------------------------
	    // -
		//---------------------------------------------------------------------------------------------------------------------------
		float	fDecimal	= Mathf.Pow( (10), (nDecimal) );

        //---------------------------------------------------------------------------------------------------------------------------
	    // -
		//---------------------------------------------------------------------------------------------------------------------------
		return ((int)(value*100*fDecimal)) / (fDecimal);
	}

	//-------------------------------------------------------------------------------------------------------------------------------
	// 알파벳과 숫자인지 확인하기 위한 함수 
	//-------------------------------------------------------------------------------------------------------------------------------
	public static bool IsAlphabetAndNumber( string letter )
	{
		//---------------------------------------------------------------------------------------------------------------------------
		// -
		//---------------------------------------------------------------------------------------------------------------------------
		if( (letter)==(null) ) return false;

		//---------------------------------------------------------------------------------------------------------------------------
		// -
		//---------------------------------------------------------------------------------------------------------------------------
		Regex regex = new Regex(@"[^a-zA-Z0-9 ]");

		//---------------------------------------------------------------------------------------------------------------------------
		// -
		//---------------------------------------------------------------------------------------------------------------------------
		if( !regex.IsMatch(letter) )
		{
			return true;
		}

		//---------------------------------------------------------------------------------------------------------------------------
		// -
		//---------------------------------------------------------------------------------------------------------------------------
		return false;
	}

	//-------------------------------------------------------------------------------------------------------------------------------
	// 숫자인지 확인하기 위한 함수
	//-------------------------------------------------------------------------------------------------------------------------------
	public static bool IsNumber( string text )
	{
		//---------------------------------------------------------------------------------------------------------------------------
		// -
		//---------------------------------------------------------------------------------------------------------------------------
		if( (text)==(null) ) return false;

		//---------------------------------------------------------------------------------------------------------------------------
		// -
		//---------------------------------------------------------------------------------------------------------------------------
		int		numChk		= (0);
		if( int.TryParse( (text), out numChk ) )
		{
			return true;
		}

		//---------------------------------------------------------------------------------------------------------------------------
		// -
		//---------------------------------------------------------------------------------------------------------------------------
		return false;
	}

	//-------------------------------------------------------------------------------------------------------------------------------
	// 실수인지 확인하기 위한 함수 
	//-------------------------------------------------------------------------------------------------------------------------------
	public static bool IsSingle( string letter )
	{
		//---------------------------------------------------------------------------------------------------------------------------
		// -
		//---------------------------------------------------------------------------------------------------------------------------
		if( !Library.Is(letter) ) return false;

		//---------------------------------------------------------------------------------------------------------------------------
		// -
		//---------------------------------------------------------------------------------------------------------------------------
		/*
		float	numChk		= (0);
		if( float.TryParse( (letter), out numChk ) )
		{
			return true;
		}
		*/

		//---------------------------------------------------------------------------------------------------------------------------
		// -
		//---------------------------------------------------------------------------------------------------------------------------
		Regex regex = new Regex(@"[^0-9\.\-]");

		//---------------------------------------------------------------------------------------------------------------------------
		// -
		//---------------------------------------------------------------------------------------------------------------------------
		if( regex.IsMatch(letter) )
		{
			//숫자, 음수, 콤마 외에 다른 문자가 포함되었을 경우, FALSE
			return false;
		}

		//---------------------------------------------------------------------------------------------------------------------------
		// -
		//---------------------------------------------------------------------------------------------------------------------------
		if( (letter.Split('.').Length)>(2) )
		{
			//실수 콤마가 여러개 사용되었을 경우, FALSE
			return false;
		}

		//---------------------------------------------------------------------------------------------------------------------------
		// -
		//---------------------------------------------------------------------------------------------------------------------------
		if( letter.IndexOf('-')>(0) )
		{
			//음수 표기가 맨 앞에 있지 않으면, FALSE
			return false;
		}

		//---------------------------------------------------------------------------------------------------------------------------
		// -
		//---------------------------------------------------------------------------------------------------------------------------
		return true;
	}

	//-------------------------------------------------------------------------------------------------------------------------------
	// 특수문자가 포함되었는지 확인하기 위한 함수
	//-------------------------------------------------------------------------------------------------------------------------------
	public static bool IsSpecialChar( string letter )
	{
		//---------------------------------------------------------------------------------------------------------------------------
		// -
		//---------------------------------------------------------------------------------------------------------------------------
		if( (letter)==(null) ) return false;

		//---------------------------------------------------------------------------------------------------------------------------
		// -
		//---------------------------------------------------------------------------------------------------------------------------
		Regex regex = new Regex(@"[^a-zA-Z0-9가-힣 ]");

		//---------------------------------------------------------------------------------------------------------------------------
		// -
		//---------------------------------------------------------------------------------------------------------------------------
		if( regex.IsMatch(letter) )
		{
			return true;
		}

		//---------------------------------------------------------------------------------------------------------------------------
		// -
		//---------------------------------------------------------------------------------------------------------------------------
		return false;
	}

	//-------------------------------------------------------------------------------------------------------------------------------
	// 데이타베이스 쿼리용으로 인코딩된 문자열을 삭제하기 위한 함수
	//-------------------------------------------------------------------------------------------------------------------------------
	public static string StripSlashes( string InputTxt )
	{
        //---------------------------------------------------------------------------------------------------------------------------
	    // -
		//---------------------------------------------------------------------------------------------------------------------------
		if( (InputTxt)==(null) ) return (null);

        //---------------------------------------------------------------------------------------------------------------------------
	    // -
		//---------------------------------------------------------------------------------------------------------------------------
		string	Result	= (InputTxt);

        //---------------------------------------------------------------------------------------------------------------------------
	    // -
		//---------------------------------------------------------------------------------------------------------------------------
		try
		{
			(Result)	= System.Text.RegularExpressions.Regex.Replace( (InputTxt), @"(\\)([\000\010\011\012\015\032\042\047\134\140])", "$2" );
		}
		catch( Exception Ex )
		{
			Console.WriteLine(Ex.Message);
		}

        //---------------------------------------------------------------------------------------------------------------------------
	    // -
		//---------------------------------------------------------------------------------------------------------------------------
		return (Result);
	}

	//-------------------------------------------------------------------------------------------------------------------------------
	// -
	//-------------------------------------------------------------------------------------------------------------------------------
	public static string Script( string text, string var0=(null), string var1=(null), string var2=(null), string var3=(null) )
	{
        //---------------------------------------------------------------------------------------------------------------------------
	    // -
		//---------------------------------------------------------------------------------------------------------------------------
		if( (text)==(null) ) return (text);
//		if( (var0)==(null) ) return (text);		//(NULL)값을 허용함
//		if( (var1)==(null) ) return (text);		//(NULL)값을 허용함
//		if( (var2)==(null) ) return (text);		//(NULL)값을 허용함
//		if( (var3)==(null) ) return (text);		//(NULL)값을 허용함

        //---------------------------------------------------------------------------------------------------------------------------
	    // -
		//---------------------------------------------------------------------------------------------------------------------------
		int			End				= (text.Length);
		int			nStart			= (0);
		string		result			= (null);
		bool		inBracket		= (false);
		string		temp			= (null);

        //---------------------------------------------------------------------------------------------------------------------------
	    // -
		//---------------------------------------------------------------------------------------------------------------------------
		for( int i=0; i<(End); i++ )
		{
			//-----------------------------------------------------------------------------------------------------------------------
		    // -
			//-----------------------------------------------------------------------------------------------------------------------
			(temp)	= text.Substring(i, 1);

			//-----------------------------------------------------------------------------------------------------------------------
		    // -
			//-----------------------------------------------------------------------------------------------------------------------
			if( (inBracket) && (temp)=="}" )
			{
				(result)		+= Script_( text.Substring( (nStart+1), (i)-(nStart)-(1) ), (var0), (var1), (var2), (var3) );
				(inBracket)		= (false);
				(nStart)		= (i)+(1);
			}
			else
			if( (temp)=="{" )
			{
				(result)		+= text.Substring( (nStart), (i)-(nStart) );
				(inBracket)		= (true);
				(nStart)		= (i);
			}

			//-----------------------------------------------------------------------------------------------------------------------
		    // -
			//-----------------------------------------------------------------------------------------------------------------------
		}

        //---------------------------------------------------------------------------------------------------------------------------
	    // -
		//---------------------------------------------------------------------------------------------------------------------------
		if( (nStart)<(text.Length) )
		{
			(result)	+= text.Substring( (nStart), (End)-(nStart) );
		}

        //---------------------------------------------------------------------------------------------------------------------------
	    // -
		//---------------------------------------------------------------------------------------------------------------------------
		//Debug.Log( text.Substring( (0), (nStart) ) );

        //---------------------------------------------------------------------------------------------------------------------------
	    // -
		//---------------------------------------------------------------------------------------------------------------------------
		return (result);
	}

	//-------------------------------------------------------------------------------------------------------------------------------
	// -
	//-------------------------------------------------------------------------------------------------------------------------------
	public static string Script_( string text, string var0=(null), string var1=(null), string var2=(null), string var3=(null) )
	{
        //---------------------------------------------------------------------------------------------------------------------------
	    // -
		//---------------------------------------------------------------------------------------------------------------------------
		if( (text)==(null) ) return (text);
//		if( (var0)==(null) ) return (text);		//(NULL)값을 허용함
//		if( (var1)==(null) ) return (text);		//(NULL)값을 허용함
//		if( (var2)==(null) ) return (text);		//(NULL)값을 허용함
//		if( (var3)==(null) ) return (text);		//(NULL)값을 허용함

        //---------------------------------------------------------------------------------------------------------------------------
	    // -
		//---------------------------------------------------------------------------------------------------------------------------
		string[]	textArray		= text.Split(':');

		string		subject			= (null);

		string		postposition	= (null);

		bool		highlight		= (false);

		bool		alert			= (false);
		
		string		result			= (null);

        //---------------------------------------------------------------------------------------------------------------------------
	    // -
		//---------------------------------------------------------------------------------------------------------------------------
		for( int i=0; i<(textArray.Length); i++ )
		{
			if( (i)==(0) )
			{
				if( (textArray[i])=="0" )
				{
					(subject)	= (var0);
				}
				else
				if( (textArray[i])=="1" )
				{
					(subject)	= (var1);
				}
				else
				if( (textArray[i])=="2" )
				{
					(subject)	= (var2);
				}
				else
				if( (textArray[i])=="3" )
				{
					(subject)	= (var3);
				}
				else
				{
					(subject)	= (textArray[i]);
				}
			}
			else
			if( (i)==(1) )
			{
				(postposition)	= (textArray[i]);
			}
			else
			{
				if( textArray[i].ToLower()=="highlight" )
				{
					(highlight)		= (true);
				}
				else
				if( textArray[i].ToLower()=="alert" )
				{
					(alert)			= (true);
				}
			}
		}

        //---------------------------------------------------------------------------------------------------------------------------
	    // -
		//---------------------------------------------------------------------------------------------------------------------------
		if( highlight )
		{
			(result)	= Func.Highlight(subject);
		}
		else
		if( alert )
		{
			(result)	= Func.HighlightAlert(subject);
		}
		else
		{
			(result)	= (subject);
		}

        //---------------------------------------------------------------------------------------------------------------------------
	    // -
		//---------------------------------------------------------------------------------------------------------------------------
		(result)	+= Func.PostPosition_( (subject), (postposition) );

        //---------------------------------------------------------------------------------------------------------------------------
	    // -
		//---------------------------------------------------------------------------------------------------------------------------
		return (result);
	}

	//-------------------------------------------------------------------------------------------------------------------------------
	// 터치된 게임 오브젝트를 얻기 위한 함수
	//-------------------------------------------------------------------------------------------------------------------------------
	public static GameObject GetTouchGameObject()
	{
        //---------------------------------------------------------------------------------------------------------------------------
	    // -
		//---------------------------------------------------------------------------------------------------------------------------
		return (UnityEngine.EventSystems.EventSystem.current.currentSelectedGameObject);

        //---------------------------------------------------------------------------------------------------------------------------
	    // -
		//---------------------------------------------------------------------------------------------------------------------------
	}

	//-------------------------------------------------------------------------------------------------------------------------------
	// -
	//-------------------------------------------------------------------------------------------------------------------------------
	public static void Break( object log=(null), UnityEngine.Object obj=(null) )
	{
        //---------------------------------------------------------------------------------------------------------------------------
	    // -
		//---------------------------------------------------------------------------------------------------------------------------
		if( (log)==(null) )
		{
			(log)	= "Break";
		}

        //---------------------------------------------------------------------------------------------------------------------------
	    // -
		//---------------------------------------------------------------------------------------------------------------------------
		Debug.Log( (log), (obj) );
		Debug.Break();

        //---------------------------------------------------------------------------------------------------------------------------
	    // -
		//---------------------------------------------------------------------------------------------------------------------------
	}

	//-------------------------------------------------------------------------------------------------------------------------------
	// 논리형 변수를 정수로 변환하기 위한 함수
	//-------------------------------------------------------------------------------------------------------------------------------
	public static int BooleanToInt( bool value )
	{
        //---------------------------------------------------------------------------------------------------------------------------
	    // -
		//---------------------------------------------------------------------------------------------------------------------------
		if( value )
		{
			return (1);
		}

        //---------------------------------------------------------------------------------------------------------------------------
	    // -
		//---------------------------------------------------------------------------------------------------------------------------
		return (0);
	}

	//-------------------------------------------------------------------------------------------------------------------------------
	// 정수를 논리형 변수로 변환하기 위한 함수
	//-------------------------------------------------------------------------------------------------------------------------------
	public static bool IntToBoolean( int value )
	{
        //---------------------------------------------------------------------------------------------------------------------------
	    // -
		//---------------------------------------------------------------------------------------------------------------------------
		if( (value)!=(0) )
		{
			return true;
		}

        //---------------------------------------------------------------------------------------------------------------------------
	    // -
		//---------------------------------------------------------------------------------------------------------------------------
		return false;
	}

	//-------------------------------------------------------------------------------------------------------------------------------
	// -
	//-------------------------------------------------------------------------------------------------------------------------------
	public static string BeforeTime( int value )
	{
        //---------------------------------------------------------------------------------------------------------------------------
	    // -
		//---------------------------------------------------------------------------------------------------------------------------
		if( (value)<(5) )
		{
			return CApp.This.Language.Get(TEXT.방금);
		}
		else
		if( (value)<(60) )
		{
			return Func.Script( CApp.This.Language.Get(TEXT.__초_전), value.ToString() );
		}
		else
		if( (value)<(60*60) )
		{
			return Func.Script( CApp.This.Language.Get(TEXT.__분_전), ((value)/(60)).ToString() );
		}
		else
		if( (value)<(60*60*24) )
		{
			return Func.Script( CApp.This.Language.Get(TEXT.__시간_전), ((value)/(60*60)).ToString() );
		}
		else
		if( (value)<(60*60*24*30) )
		{
			return Func.Script( CApp.This.Language.Get(TEXT.__일_전), ((value)/(60*60*24)).ToString() );
		}
		else
		if( (value)<(60*60*24*365) )
		{
			return Func.Script( CApp.This.Language.Get(TEXT.__개월_전), ((value)/(60*60*24*30)).ToString() );
		}

        //---------------------------------------------------------------------------------------------------------------------------
	    // -
		//---------------------------------------------------------------------------------------------------------------------------
		return Func.Script( CApp.This.Language.Get(TEXT.__개월_전), ((value)/(60*60*24*365)).ToString() );
	}

	//-------------------------------------------------------------------------------------------------------------------------------
	// -
	//-------------------------------------------------------------------------------------------------------------------------------
	public static bool Toggle( ref bool value )
	{
        //---------------------------------------------------------------------------------------------------------------------------
	    // -
		//---------------------------------------------------------------------------------------------------------------------------
		(value)		= !(value);

        //---------------------------------------------------------------------------------------------------------------------------
	    // -
		//---------------------------------------------------------------------------------------------------------------------------
		return (value);
	}

	//-------------------------------------------------------------------------------------------------------------------------------
	// -
	//-------------------------------------------------------------------------------------------------------------------------------
	public static float Floor( float value, int nDecimal )
	{
        //---------------------------------------------------------------------------------------------------------------------------
	    // -
		//---------------------------------------------------------------------------------------------------------------------------
		if( (nDecimal)>(0) )
		{
			//-----------------------------------------------------------------------------------------------------------------------
			// -
			//-----------------------------------------------------------------------------------------------------------------------
			(nDecimal)	= (int)Mathf.Pow( (10), (nDecimal) );

			//-----------------------------------------------------------------------------------------------------------------------
			// -
			//-----------------------------------------------------------------------------------------------------------------------
			return Mathf.Floor( (value)*(nDecimal) ) / (nDecimal);
		}

        //---------------------------------------------------------------------------------------------------------------------------
	    // -
		//---------------------------------------------------------------------------------------------------------------------------
		return Mathf.Floor(value);
	}

	//-------------------------------------------------------------------------------------------------------------------------------
	// -
	//-------------------------------------------------------------------------------------------------------------------------------
	public static float Decimal( float value )
	{
        //---------------------------------------------------------------------------------------------------------------------------
	    // -
		//---------------------------------------------------------------------------------------------------------------------------
		return (value) - Mathf.FloorToInt(value);

        //---------------------------------------------------------------------------------------------------------------------------
	    // -
		//---------------------------------------------------------------------------------------------------------------------------
	}

	//-------------------------------------------------------------------------------------------------------------------------------
	// -
	//-------------------------------------------------------------------------------------------------------------------------------
	public static Vector3 RandRange( float min, float max )
	{
        //---------------------------------------------------------------------------------------------------------------------------
	    // -
		//---------------------------------------------------------------------------------------------------------------------------
		Vector3		vector		= new Vector3( Func.Random( (min), (max) ), (0), Func.Random( (min), (max) ) );

        //---------------------------------------------------------------------------------------------------------------------------
	    // -
		//---------------------------------------------------------------------------------------------------------------------------
		if( Random(50) )
		{
			(vector.x)	*= (-1);
		}

        //---------------------------------------------------------------------------------------------------------------------------
	    // -
		//---------------------------------------------------------------------------------------------------------------------------
		if( Random(50) )
		{
			(vector.z)	*= (-1);
		}

        //---------------------------------------------------------------------------------------------------------------------------
	    // -
		//---------------------------------------------------------------------------------------------------------------------------
		return (vector);
	}

	//-------------------------------------------------------------------------------------------------------------------------------
	// URL을 인코딩하기 위한 함수
	//-------------------------------------------------------------------------------------------------------------------------------
	public static string Urlencode( string value )
	{
        //---------------------------------------------------------------------------------------------------------------------------
	    // -
		//---------------------------------------------------------------------------------------------------------------------------
		if( (value)==(null) ) return (null);

        //---------------------------------------------------------------------------------------------------------------------------
	    // -
		//---------------------------------------------------------------------------------------------------------------------------
		return UnityEngine.Networking.UnityWebRequest.EscapeURL( value );
	}

	//-------------------------------------------------------------------------------------------------------------------------------
	// URL을 디코딩하기 위한 함수
	//-------------------------------------------------------------------------------------------------------------------------------
	public static string Urldecode( string value )
	{
        //---------------------------------------------------------------------------------------------------------------------------
	    // -
		//---------------------------------------------------------------------------------------------------------------------------
		if( (value)==(null) ) return (null);

        //---------------------------------------------------------------------------------------------------------------------------
	    // -
		//---------------------------------------------------------------------------------------------------------------------------
		return UnityEngine.Networking.UnityWebRequest.UnEscapeURL( value );
	}

	//-------------------------------------------------------------------------------------------------------------------------------
	// 문자열 길이를 얻기 위한 함수
	//-------------------------------------------------------------------------------------------------------------------------------
	public static int Length( string text )
	{
        //---------------------------------------------------------------------------------------------------------------------------
	    // -
		//---------------------------------------------------------------------------------------------------------------------------
		if( (text)==(null) ) return (0);

        //---------------------------------------------------------------------------------------------------------------------------
	    // -
		//---------------------------------------------------------------------------------------------------------------------------
		return (text.Length);
	}

	//-------------------------------------------------------------------------------------------------------------------------------
	// -
	//-------------------------------------------------------------------------------------------------------------------------------
	static float fAndroidOSVersion = (-1);
	public static float GetAndroidOSVersion()
	{
		//---------------------------------------------------------------------------------------------------------------------------
		// -
		//---------------------------------------------------------------------------------------------------------------------------
		if( Platform.IsAndroid() && (fAndroidOSVersion)==(-1) )
		{
			if( (SystemInfo.operatingSystem.Length)>=("Android OS 00".Length) )
			{
				string Version = SystemInfo.operatingSystem.Substring( ("Android OS ".Length), (2) );
				if( Library.IsNumber(Version) )
				{
					(fAndroidOSVersion)	= int.Parse(Version);
				}
				else
				{
					(fAndroidOSVersion)	= (0);
				}
			}
			else
			{
				(fAndroidOSVersion)	= (0);
			}
		}

		//---------------------------------------------------------------------------------------------------------------------------
		// -
		//---------------------------------------------------------------------------------------------------------------------------
		return (fAndroidOSVersion);
	}

	//-------------------------------------------------------------------------------------------------------------------------------
	// -
	//-------------------------------------------------------------------------------------------------------------------------------
	public static bool IsAndroid10Upper()
	{
		//---------------------------------------------------------------------------------------------------------------------------
		// -
		//---------------------------------------------------------------------------------------------------------------------------
		float fVersion = GetAndroidOSVersion();
		if( (fVersion)>=(10) )
		{
			return true;
		}
		else
		if( (fVersion)<=(0) )
		{
			Debug.LogWarning("안드로이드 버전을 확인할 수 없습니다. : "+(fVersion));
		}

		//---------------------------------------------------------------------------------------------------------------------------
		// -
		//---------------------------------------------------------------------------------------------------------------------------
		return false;
	}

	//-------------------------------------------------------------------------------------------------------------------------------
	// -
	//-------------------------------------------------------------------------------------------------------------------------------
	public static bool IsAndroid10UpperImagePickError()
	{
		//---------------------------------------------------------------------------------------------------------------------------
		// 안드로이드 10 이상에서 이미지 선택 플러그인이 올바르게 동작하지 않음
		//---------------------------------------------------------------------------------------------------------------------------
		if( IsAndroid10Upper() )
		{
			return true;
		}

		//---------------------------------------------------------------------------------------------------------------------------
		// -
		//---------------------------------------------------------------------------------------------------------------------------
		return false;
	}

	//-------------------------------------------------------------------------------------------------------------------------------
	// 문자열 길이를 얻기 위한 함수
	//-------------------------------------------------------------------------------------------------------------------------------
	public static int GetLength( string text )
	{
        //---------------------------------------------------------------------------------------------------------------------------
        // -
        //---------------------------------------------------------------------------------------------------------------------------
		if( (text)==(null) ) return (0);

        //---------------------------------------------------------------------------------------------------------------------------
        // -
        //---------------------------------------------------------------------------------------------------------------------------
		string	letter		= (null);
		int		length		= (0);

        //---------------------------------------------------------------------------------------------------------------------------
        // -
        //---------------------------------------------------------------------------------------------------------------------------
		for( int i=0; i<(text.Length); i++ )
		{
			//-----------------------------------------------------------------------------------------------------------------------
		    // -
	        //-----------------------------------------------------------------------------------------------------------------------
			(letter)	= text[i].ToString();

			//-----------------------------------------------------------------------------------------------------------------------
		    // -
	        //-----------------------------------------------------------------------------------------------------------------------
			if( Func.IsAlphabetAndNumber(letter) )
			{
				(length)	+= (1);
			}
			else
			{
				(length)	+= (2);
			}

			//-----------------------------------------------------------------------------------------------------------------------
		    // -
	        //-----------------------------------------------------------------------------------------------------------------------
		}

        //---------------------------------------------------------------------------------------------------------------------------
        // -
        //---------------------------------------------------------------------------------------------------------------------------
		return (length);
	}

	//-------------------------------------------------------------------------------------------------------------------------------
	// -
	//-------------------------------------------------------------------------------------------------------------------------------
	public static void SetAsLastSibling( Transform transform )
	{
        //---------------------------------------------------------------------------------------------------------------------------
        // -
        //---------------------------------------------------------------------------------------------------------------------------
		if( (transform)==(null) ) return;

        //---------------------------------------------------------------------------------------------------------------------------
        // -
        //---------------------------------------------------------------------------------------------------------------------------
//		Debug.Log(transform, transform);
		transform.SetAsLastSibling();

        //---------------------------------------------------------------------------------------------------------------------------
        // -
        //---------------------------------------------------------------------------------------------------------------------------
	}

	//-------------------------------------------------------------------------------------------------------------------------------
	// 텍스트 가로 너비를 맞추기 위한 함수
	//-------------------------------------------------------------------------------------------------------------------------------
	public static void TextWidthPerfect( Text text )
	{
        //---------------------------------------------------------------------------------------------------------------------------
        // -
        //---------------------------------------------------------------------------------------------------------------------------
		if( (text)==(null) ) return;

        //---------------------------------------------------------------------------------------------------------------------------
        // -
        //---------------------------------------------------------------------------------------------------------------------------
		RectTransform rectTransform = (text.rectTransform);
		if( (rectTransform)!=(null) )
		{
			(rectTransform.sizeDelta)	= new Vector2( (text.preferredWidth), (rectTransform.sizeDelta.y) );
		}

        //---------------------------------------------------------------------------------------------------------------------------
        // -
        //---------------------------------------------------------------------------------------------------------------------------
	}

	//-------------------------------------------------------------------------------------------------------------------------------
	// 활성화를 확인하기 위한 함수
	//-------------------------------------------------------------------------------------------------------------------------------
	public static bool IsActive( GameObject gameObject )
	{
		//---------------------------------------------------------------------------------------------------------------------------
		// -
		//---------------------------------------------------------------------------------------------------------------------------
		if( (gameObject)==(null) ) return false;

		//---------------------------------------------------------------------------------------------------------------------------
		// -
		//---------------------------------------------------------------------------------------------------------------------------
		if( gameObject.activeInHierarchy )
		{
			return true;
		}

		//---------------------------------------------------------------------------------------------------------------------------
		// -
		//---------------------------------------------------------------------------------------------------------------------------
		return false;
	}

	//-------------------------------------------------------------------------------------------------------------------------------
	// 파일 수정 시간을 얻기 위한 함수
	//-------------------------------------------------------------------------------------------------------------------------------
	public static ulong GetFileModifyTime( string filepath )
	{
		//---------------------------------------------------------------------------------------------------------------------------
		// -
		//---------------------------------------------------------------------------------------------------------------------------
		if( !IsFile(filepath) ) return (0);

		//---------------------------------------------------------------------------------------------------------------------------
		// -
		//---------------------------------------------------------------------------------------------------------------------------
		DateTime utcTime = new DateTime( (1970), (1), (1), (0), (0), (0), (0), (DateTimeKind.Utc) );

		//---------------------------------------------------------------------------------------------------------------------------
		// -
		//---------------------------------------------------------------------------------------------------------------------------
		TimeSpan timeSpan = File.GetLastWriteTimeUtc(filepath) - (utcTime);

		//---------------------------------------------------------------------------------------------------------------------------
		// -
		//---------------------------------------------------------------------------------------------------------------------------
		return (ulong)timeSpan.TotalSeconds;
	}

	//-------------------------------------------------------------------------------------------------------------------------------
	// -
	//-------------------------------------------------------------------------------------------------------------------------------
}

//-----------------------------------------------------------------------------------------------------------------------------------
// -
//-----------------------------------------------------------------------------------------------------------------------------------