using UnityEngine;
using UnityEngine.Networking;
using System.Collections;
using System.Collections.Generic;
using System;
#if AUP
	using UnityEngine.SceneManagement;
	using Gigadrillgames.AUP.Common;
#endif

//어플리케이션 정보를 처리하기 위한 클래스
public class CEngine : FrameworkBehaviour
{
#if AUP
	private UtilsPlugin utilsPlugin;
#endif

	void Start()
	{
#if AUP
		if( data.utilsPlugin==null )
		{
			data.utilsPlugin = UtilsPlugin.GetInstance();

			data.utilsPlugin.SetDebug(0);
			data.utilsPlugin.Init();
		}
#endif
	}

	//어플리케이션 정보를 불러오기 위한 함수
	public void _Load()
	{
//		app.CharacterAnimation._Load();
//		app.Purchase.Download( PURCHASE.부활의_깃털 );
		app.SoundStatic.Download( RESOURCE.인터페이스 );
	}

    //장면을 설정하기 위한 함수
	public void Scene( SCENE Scene )
	{
		OFF( play.Scene, Scene );

		if( play.Scene!=Scene )
		{
			play.Time	= 0;
			play.Scene	= Scene;
			play.View	= VIEW.NOTHING;
		}

		ON( Scene );
	}

    //장면을 설정하기 위한 함수
	public void ON( SCENE nScene )
	{
		switch( nScene )
		{
			//안전 교실 (SAFE_CLASS)
			case SCENE.SAFE_CLASS:
				app.SafeClass.ON();
				break;

			//플레이 (PLAY)
			case SCENE.PLAY:
				app.Game.ON();
				break;

			default:
				foreach( SceneFramework sceneframework in SceneFramework.SceneFrameworks )
				{
					if( sceneframework.nScene==nScene )
					{
						sceneframework.ON();
						break;
					}
				}
				break;
		}
	}

    //장면을 설정하기 위한 함수
	public void OFF( SCENE nScene, SCENE nextScene )
	{
		switch( nScene )
		{
			//안전 교실 (SAFE_CLASS)
			case SCENE.SAFE_CLASS:
				app.SafeClass.OFF();
				break;

			//플레이 (PLAY)
			case SCENE.PLAY:
				app.Game.OFF();
				break;

			default:
				foreach( SceneFramework sceneframework in SceneFramework.SceneFrameworks )
				{
					if( sceneframework.nScene==nScene )
					{
						sceneframework.OFF();
						break;
					}
				}
				break;
		}
	}

	//-------------------------------------------------------------------------------------------------------------------------------
    // 인터페이스를 설정하기 위한 함수
	//-------------------------------------------------------------------------------------------------------------------------------
	public void View( VIEW View )
	{
        //---------------------------------------------------------------------------------------------------------------------------
        // -
	    //---------------------------------------------------------------------------------------------------------------------------
		OFF( View );

        //---------------------------------------------------------------------------------------------------------------------------
        // -
	    //---------------------------------------------------------------------------------------------------------------------------
		(play.View)		= (View);

        //---------------------------------------------------------------------------------------------------------------------------
        // -
	    //---------------------------------------------------------------------------------------------------------------------------
		ON( View );

        //---------------------------------------------------------------------------------------------------------------------------
        // -
	    //---------------------------------------------------------------------------------------------------------------------------
	}

	//-------------------------------------------------------------------------------------------------------------------------------
    // 인터페이스를 설정하기 위한 함수
	//-------------------------------------------------------------------------------------------------------------------------------
	public void OFF( VIEW View )
	{
        //---------------------------------------------------------------------------------------------------------------------------
        // -
	    //---------------------------------------------------------------------------------------------------------------------------
	}

	//-------------------------------------------------------------------------------------------------------------------------------
    // 인터페이스를 설정하기 위한 함수
	//-------------------------------------------------------------------------------------------------------------------------------
	public void ON( VIEW View )
	{
        //---------------------------------------------------------------------------------------------------------------------------
        // -
	    //---------------------------------------------------------------------------------------------------------------------------
	}

	//-------------------------------------------------------------------------------------------------------------------------------
    // 코루틴을 실행하기 위한 함수
	//-------------------------------------------------------------------------------------------------------------------------------
	public void Coroutine( YieldInstruction yieldInstruction, Action<object, object> func, object wParam=(null), object lParam=(null) )
	{
        //---------------------------------------------------------------------------------------------------------------------------
        // -
	    //---------------------------------------------------------------------------------------------------------------------------
		if( (yieldInstruction)==(null) ) return;

        //---------------------------------------------------------------------------------------------------------------------------
        // -
	    //---------------------------------------------------------------------------------------------------------------------------
		StartCoroutine( Coroutine_( (yieldInstruction), (func), (wParam), (lParam) ) );

        //---------------------------------------------------------------------------------------------------------------------------
        // -
	    //---------------------------------------------------------------------------------------------------------------------------
	}

	//-------------------------------------------------------------------------------------------------------------------------------
    // 코루틴을 실행하기 위한 함수
	//-------------------------------------------------------------------------------------------------------------------------------
	public IEnumerator Coroutine_( YieldInstruction yieldInstruction, Action<object, object> func, object wParam=(null), object lParam=(null) )
	{
        //---------------------------------------------------------------------------------------------------------------------------
        // -
	    //---------------------------------------------------------------------------------------------------------------------------
		if( (yieldInstruction)==(null) ) yield break;

        //---------------------------------------------------------------------------------------------------------------------------
        // -
	    //---------------------------------------------------------------------------------------------------------------------------
		yield return (yieldInstruction);

        //---------------------------------------------------------------------------------------------------------------------------
        // -
	    //---------------------------------------------------------------------------------------------------------------------------
		if( (func)!=(null) )
		{
			func( (wParam), (lParam) );
		}

        //---------------------------------------------------------------------------------------------------------------------------
        // -
	    //---------------------------------------------------------------------------------------------------------------------------
	}

    //루트 경로를 얻기 위한 함수
    public static string GetPath()
    {
        return Application.persistentDataPath;
    }

	//-------------------------------------------------------------------------------------------------------------------------------
	// 스트리밍 경로를 얻기 위한 함수
	//-------------------------------------------------------------------------------------------------------------------------------
	public static string GetStreamingPath()
	{
        //---------------------------------------------------------------------------------------------------------------------------
        // -
	    //---------------------------------------------------------------------------------------------------------------------------
		return (Application.streamingAssetsPath);

        //---------------------------------------------------------------------------------------------------------------------------
        // -
	    //---------------------------------------------------------------------------------------------------------------------------
	}

	//-------------------------------------------------------------------------------------------------------------------------------
	// 스트리밍 경로를 얻기 위한 함수
	//-------------------------------------------------------------------------------------------------------------------------------
	public static string GetStreamingPath( string url, bool downloadUrl=(true), bool includeFileName=(true) )
	{
	    //---------------------------------------------------------------------------------------------------------------------------
        // -
	    //---------------------------------------------------------------------------------------------------------------------------
		if( (url)==(null) ) return (null);

	    //---------------------------------------------------------------------------------------------------------------------------
        // -
	    //---------------------------------------------------------------------------------------------------------------------------
#if !UNITY_EDITOR && UNITY_ANDROID
		(downloadUrl)	= (false);
#endif

	    //---------------------------------------------------------------------------------------------------------------------------
        // -
	    //---------------------------------------------------------------------------------------------------------------------------
		string	path	= (null);

	    //---------------------------------------------------------------------------------------------------------------------------
        // -
	    //---------------------------------------------------------------------------------------------------------------------------
		if( (downloadUrl) && Platform.IsEditor() )
		{
			(path)	= "file://"+(Application.streamingAssetsPath);
		}
		else
		{
			(path)	= (Application.streamingAssetsPath);
		}

	    //---------------------------------------------------------------------------------------------------------------------------
        // -
	    //---------------------------------------------------------------------------------------------------------------------------
		string Ext = Library.Ext(url);
		if( Ext=="unity3d" || Ext=="asset" )
		{
			//-----------------------------------------------------------------------------------------------------------------------
			// -
			//-----------------------------------------------------------------------------------------------------------------------
#if UNITY_ANDROID
			(path)	+= "/Android";
#elif UNITY_IOS
			(path)	+= "/IOS";
#elif UNITY_STANDALONE
			(path)	+= "/Windows";
#endif

			//-----------------------------------------------------------------------------------------------------------------------
			// -
			//-----------------------------------------------------------------------------------------------------------------------
			if( includeFileName )
			{
				path += "/"+Library.GetFileName(url)+".asset";
			}

			//-----------------------------------------------------------------------------------------------------------------------
			// -
			//-----------------------------------------------------------------------------------------------------------------------
		}
		else
		if( (Ext)=="png" || (Ext)=="tga" || (Ext)=="jpg" || (Ext)=="jpeg" || (Ext)=="texture" )
		{
			//-----------------------------------------------------------------------------------------------------------------------
			// -
			//-----------------------------------------------------------------------------------------------------------------------
			(path)	+= "/Textures";

			//-----------------------------------------------------------------------------------------------------------------------
			// -
			//-----------------------------------------------------------------------------------------------------------------------
			if( includeFileName )
			{
				(path)	+= "/"+Library.GetFileName(url)+".texture";
			}

			//-----------------------------------------------------------------------------------------------------------------------
			// -
			//-----------------------------------------------------------------------------------------------------------------------
		}
		else
		if( (Ext)=="wav" || (Ext)=="ogg" || (Ext)=="mp3" )
		{
			//-----------------------------------------------------------------------------------------------------------------------
			// -
			//-----------------------------------------------------------------------------------------------------------------------
			(path)	+= "/Sounds";

			//-----------------------------------------------------------------------------------------------------------------------
			// -
			//-----------------------------------------------------------------------------------------------------------------------
			if( includeFileName )
			{
				(path)	+= "/"+Library.GetFileNameExt(url);
			}

			//-----------------------------------------------------------------------------------------------------------------------
			// -
			//-----------------------------------------------------------------------------------------------------------------------
		}
		else
		{
			//-----------------------------------------------------------------------------------------------------------------------
			// -
			//-----------------------------------------------------------------------------------------------------------------------
			if( includeFileName )
			{
				(path)	+= (url);
			}

			//-----------------------------------------------------------------------------------------------------------------------
			// -
			//-----------------------------------------------------------------------------------------------------------------------
		}

	    //---------------------------------------------------------------------------------------------------------------------------
        // -
	    //---------------------------------------------------------------------------------------------------------------------------
		return (path);
	}

	//-------------------------------------------------------------------------------------------------------------------------------
    // 캐시 경로를 얻기 위한 함수
	//-------------------------------------------------------------------------------------------------------------------------------
	public static string GetCachePath()
	{
		//---------------------------------------------------------------------------------------------------------------------------
		// -
		//---------------------------------------------------------------------------------------------------------------------------
		return CEngine.GetPath()+"/Cache";

		//---------------------------------------------------------------------------------------------------------------------------
		// -
		//---------------------------------------------------------------------------------------------------------------------------
	}

    //캐시 경로를 얻기 위한 함수
	public static string GetCachePath( string filepath )
	{
		if( !Library.Is(filepath) ) return null;

		if( Library.IsTexture(filepath) )
		{
			return GetCachePath()+"/"+Library.GetFileName(filepath)+".texture";
		}
		else
		if( Library.IsAssetBundle(filepath) )
		{
			return GetCachePath()+"/"+Library.GetFileName(filepath)+".asset";
		}

		return null;
	}

	public tagProgress EncodeAsync( DownloadProtocol http )
	{
		if( http==null ) return null;

		tagProgress progress = app.Progress.ON( "암호화를 해제하는 중입니다." );
		if( progress!=null )
		{
			StartCoroutine( EncodeAsync_( http, progress ) );
		}

		return progress;
	}

	public IEnumerator EncodeAsync_( DownloadProtocol http, tagProgress progress )
	{
		if( http.Bytes()==null || http.Bytes().Length<=0 ) yield break;
		if( progress==null ) yield break;

		byte[]	bytes		= http.Bytes();
		int[]	EncodeBit   = AppsFunc.EncodeBit;
		long	preTicks	= DateTime.Now.Ticks;

		//헤더 암호화
		int End = Mathf.Min( 64, bytes.Length );
        for( int i=0; i<End; i+=2 )
        {
            bytes[i] = AppsFunc.encode( bytes[i], i );
		}

        for( int i=0; i<bytes.Length; i+=SYSTEM.TEXTURE_ENCODE_DENSITY )
        {
            bytes[i] = AppsFunc.encode( bytes[i], i );

			if( (DateTime.Now.Ticks-preTicks)/10000000f>=1f/30f )
			{
				progress.value	= Library.Divide( i, bytes.Length );
				preTicks		= DateTime.Now.Ticks;
				yield return new WaitForEndOfFrame();
			}
        }

		AssetBundleCreateRequest request = AssetBundle.LoadFromMemoryAsync( bytes );
		progress.operation = request;
		while( !request.isDone && request.progress<1f )
		{
			if( (DateTime.Now.Ticks-preTicks)/10000000f>=1f/30f )
			{
				progress.value = request.progress;
				preTicks = DateTime.Now.Ticks;
				yield return new WaitForEndOfFrame();
			}
		}

		yield return request;

		if( http.download!=null && http.download.assetBundle!=null )
		{
			http.download.assetBundle.bundle = request.assetBundle;
			http.download.assetBundle.Update = false;
		}

		app.Download.Complete( http );
		progress.value = 1f;
	}

	public void OnLoadEnd()
	{
		if( play.LoadEnd ) return;

		_Load();
		Apps.AppsItemListenersInitialize();

		app.Download.SetCallback( funcLoadEnd );
		play.LoadEnd = true;
	}

	public void funcLoadEnd( object wParam=null, object lParam=null )
	{
		if( Apps.IsConnect() && !Apps.IsLogin() )
		{
			funcLogin();
		}

		app.ViewLoading.OFF( app );
	}

	//로그인을 처리하기 위한 함수
	public void funcLogin( object wParam=null, object lParam=null )
	{
		if( !Apps.IsConnect() )
		{
			Debug.Log("서버에 연결되어 있지 않습니다.");
		}
		else
		if( Apps.IsLogin() )
		{
			Debug.Log("이미 로그인이 되어 있습니다.");
		}
		else
		if( app.Download.Is() )
		{
			app.Download.SetCallback( funcLogin );
		}
		/*
		else
		if( app.Facebook.IsLogin() )
		{
//			Apps.Login( (APPS_LINKAGE.FACEBOOK), app.Facebook.ID(), app.Facebook.Name() );
		}
		*/
		else
		{
			Apps.LocalizeLogin();
		}
	}

	public void funcQuit( object wParam=null, object lParam=null )
	{
		bool commit = true;

		UnityEngine.Object[] objArray = Component.FindObjectsOfType(typeof(Camera));
		foreach( Camera camera in objArray )
		{
			if( camera.enabled )
			{
				camera.enabled	= false;
				commit			= false;
			}
		}

		if( commit )
		{
			Application.Quit();
		}
		else
		{
			app.MessageQueue.ON( (funcQuit), (0.2f) );
		}
	}

	public void funcRestart( object wParam=null, object lParam=null )
	{
#if UNITY_EDITOR
		Debug.Log("에디터에서는 어플리케이션을 재시작할 수 없습니다.");
#else
        using( AndroidJavaClass unityPlayer = new AndroidJavaClass("com.unity3d.player.UnityPlayer") )
        {
            AndroidJavaObject currentActivity = unityPlayer.GetStatic<AndroidJavaObject>("currentActivity");

            AndroidJavaObject pm = currentActivity.Call<AndroidJavaObject>("getPackageManager");
            AndroidJavaObject intent = pm.Call<AndroidJavaObject>("getLaunchIntentForPackage", Application.identifier);
            intent.Call<AndroidJavaObject>("setFlags", 0x20000000);//Intent.FLAG_ACTIVITY_SINGLE_TOP

            AndroidJavaClass pendingIntent = new AndroidJavaClass("android.app.PendingIntent");
            AndroidJavaObject contentIntent = pendingIntent.CallStatic<AndroidJavaObject>("getActivity", currentActivity, 0, intent, 0x8000000); //PendingIntent.FLAG_UPDATE_CURRENT = 134217728 [0x8000000]
            AndroidJavaObject alarmManager = currentActivity.Call<AndroidJavaObject>("getSystemService", "alarm");
            AndroidJavaClass system = new AndroidJavaClass("java.lang.System");
            long currentTime = system.CallStatic<long>("currentTimeMillis");
            alarmManager.Call("set", 1, currentTime + 1000, contentIntent); // android.app.AlarmManager.RTC = 1 [0x1]

            Debug.LogError("alarm_manager set time " + currentTime + 1000);
            currentActivity.Call("finish");

            AndroidJavaClass process = new AndroidJavaClass("android.os.Process");
            int pid = process.CallStatic<int>("myPid");
            process.CallStatic("killProcess", pid);
        }
#endif
	}

	//-------------------------------------------------------------------------------------------------------------------------------
    // 객체 정보를 얻기 위한 함수
	//-------------------------------------------------------------------------------------------------------------------------------
	public tagAppsItem GetAppsItem( object obj )
	{
		//---------------------------------------------------------------------------------------------------------------------------
		// -
		//---------------------------------------------------------------------------------------------------------------------------
		if( (obj)==(null) ) return (null);

		/*
		//---------------------------------------------------------------------------------------------------------------------------
		// -
		//---------------------------------------------------------------------------------------------------------------------------
		objCharacter	character	= (obj as objCharacter);
		if( (character)!=(null) )
		{
			return character.AppsItem();
		}
		*/

		//---------------------------------------------------------------------------------------------------------------------------
		// -
		//---------------------------------------------------------------------------------------------------------------------------
		return (null);
	}

	public tagFocus GetTouch( TOUCH_INDEX touchIndex )
	{
		return TouchInterface.Touches()[(int)touchIndex];
	}

	//-------------------------------------------------------------------------------------------------------------------------------
    // 다운로드 설명을 얻기 위한 함수
	//-------------------------------------------------------------------------------------------------------------------------------
	public string GetDownloadDescription( tagAppsItem appsitem )
	{
		//---------------------------------------------------------------------------------------------------------------------------
		// -
		//---------------------------------------------------------------------------------------------------------------------------
		if( (appsitem)==(null) ) return (null);

		//---------------------------------------------------------------------------------------------------------------------------
		// -
		//---------------------------------------------------------------------------------------------------------------------------
		return appsitem.Name();
	}

	//-------------------------------------------------------------------------------------------------------------------------------
    // 텍스쳐를 불러오기 위한 함수
	//-------------------------------------------------------------------------------------------------------------------------------
	public Texture Load( tagTexture texture, string DownloadDescription=(null) )
	{
		//---------------------------------------------------------------------------------------------------------------------------
		// -
		//---------------------------------------------------------------------------------------------------------------------------
		if( (texture)==(null) ) return (null);
//		if( (DownloadDescription)==(null) ) return (null);	//(NULL)값을 허용함

		//---------------------------------------------------------------------------------------------------------------------------
		// -
		//---------------------------------------------------------------------------------------------------------------------------
		if( texture.Is() && !texture.IsLoad() )
		{
			app.Download.ON( (DownloadDescription), (texture) );
		}

		//---------------------------------------------------------------------------------------------------------------------------
		// -
		//---------------------------------------------------------------------------------------------------------------------------
		return (texture.texture);
	}

	//-------------------------------------------------------------------------------------------------------------------------------
    // 현재 위치 좌표를 설정하기 위한 함수
	//-------------------------------------------------------------------------------------------------------------------------------
	public void SetGeolocation( float lat, float lng )
	{
		//---------------------------------------------------------------------------------------------------------------------------
		// -
		//---------------------------------------------------------------------------------------------------------------------------	
//		Debug.Log( "SetGeolocation => "+(lat)+","+(lng) );

		//---------------------------------------------------------------------------------------------------------------------------
		// -
		//---------------------------------------------------------------------------------------------------------------------------
//		play.Geolocation.Set( (lat), (lng) );

		//---------------------------------------------------------------------------------------------------------------------------
		// -
		//---------------------------------------------------------------------------------------------------------------------------
	}

	//-------------------------------------------------------------------------------------------------------------------------------
    // 위도를 얻기 위한 함수
	//-------------------------------------------------------------------------------------------------------------------------------
	public float Lat()
	{
		//---------------------------------------------------------------------------------------------------------------------------
		// -
		//---------------------------------------------------------------------------------------------------------------------------
//		return (play.Geolocation.lat);
		return 0f;

		//---------------------------------------------------------------------------------------------------------------------------
		// -
		//---------------------------------------------------------------------------------------------------------------------------
	}

	//-------------------------------------------------------------------------------------------------------------------------------
    // 경도를 얻기 위한 함수
	//-------------------------------------------------------------------------------------------------------------------------------
	public float Lng()
	{
		//---------------------------------------------------------------------------------------------------------------------------
		// -
		//---------------------------------------------------------------------------------------------------------------------------
//		return (play.Geolocation.lng);
		return 0f;

		//---------------------------------------------------------------------------------------------------------------------------
		// -
		//---------------------------------------------------------------------------------------------------------------------------
	}

	//-------------------------------------------------------------------------------------------------------------------------------
    // -
	//-------------------------------------------------------------------------------------------------------------------------------
	public void TimeUpdate()
	{
		//---------------------------------------------------------------------------------------------------------------------------
		// -
		//---------------------------------------------------------------------------------------------------------------------------
		(play.Time)		+= (Time.deltaTime);

		//---------------------------------------------------------------------------------------------------------------------------
		// 표준시를 계산함
		//---------------------------------------------------------------------------------------------------------------------------
		if( (play.utcTime.Ticks)!=(0) )
		{
			//-----------------------------------------------------------------------------------------------------------------------
			// -
			//-----------------------------------------------------------------------------------------------------------------------
			if( (play.preDateTime.Ticks)!=(0) )
			{
				//-------------------------------------------------------------------------------------------------------------------
				// -
				//-------------------------------------------------------------------------------------------------------------------
				TimeSpan	span		= (DateTime.Now) - (play.preDateTime);

				//-------------------------------------------------------------------------------------------------------------------
				// -
				//-------------------------------------------------------------------------------------------------------------------
				(play.deltaTime)		= (span.Milliseconds/1000f);
				(play.fServerTime)		+= (play.deltaTime);
				if( (play.fServerTime)>=(1) )
				{
					int		nSecond		= (int)(play.fServerTime);
					(play.serverTime)	+= (nSecond);
					(play.fServerTime)	-= (nSecond);
				}

				//-------------------------------------------------------------------------------------------------------------------
				// -
				//-------------------------------------------------------------------------------------------------------------------
				(play.utcTime)	+= (span);

				//-------------------------------------------------------------------------------------------------------------------
				// -
				//-------------------------------------------------------------------------------------------------------------------
				(play.Hour)		= (play.utcTime.Hour) + ((play.utcTime.Minute)/(60f)) + ((play.utcTime.Second)/(60f*60f)) + (Lng()/(180f)*(12f));

				//-------------------------------------------------------------------------------------------------------------------
				// -
				//-------------------------------------------------------------------------------------------------------------------
			}

			//-----------------------------------------------------------------------------------------------------------------------
			// -
			//-----------------------------------------------------------------------------------------------------------------------
			(play.preDateTime)	= (DateTime.Now);

			//-----------------------------------------------------------------------------------------------------------------------
			// -
			//-----------------------------------------------------------------------------------------------------------------------
		}

		//---------------------------------------------------------------------------------------------------------------------------
		// -
		//---------------------------------------------------------------------------------------------------------------------------
	}
	
	//-------------------------------------------------------------------------------------------------------------------------------
    // 오브젝트를 검색하기 위한 함수
	//-------------------------------------------------------------------------------------------------------------------------------
	public void LoadPlaces( float lat, float lng, bool PlaceSearch=(false) )
	{
		//---------------------------------------------------------------------------------------------------------------------------
		// -
		//---------------------------------------------------------------------------------------------------------------------------
//		RPGLifeHash.LoadPlaces( (lat), (lng) );

		//---------------------------------------------------------------------------------------------------------------------------
		// -
		//---------------------------------------------------------------------------------------------------------------------------
		if( (PlaceSearch) || Platform.IsEditor() )
		{
			//-----------------------------------------------------------------------------------------------------------------------
			// 고속버스터미널, 파리바게뜨, 버거킹, 롯데리아, 파파이스, 맥도널드, 경찰서, 파출소, 소방서
			//-----------------------------------------------------------------------------------------------------------------------
//			RPGLifeHash.PlaceSearch( (lat), (lng) );
//			RPGLifeHash.PlaceSearch( (lat), (lng), "transit_station" );					//대중 교통
//			RPGLifeHash.PlaceSearch( (lat), (lng), "supermarket" );						//슈퍼마켓
//			RPGLifeHash.PlaceSearch( (lat), (lng), "school" );							//학교
//			RPGLifeHash.PlaceSearch( (lat), (lng), "local_government_office" );
//			RPGLifeHash.PlaceSearch( (lat), (lng), "park" );							//공원
//			RPGLifeHash.PlaceSearch( (lat), (lng), "bank" );							//은행
//			RPGLifeHash.PlaceSearch( (lat), (lng), "post_office" );						//우체국
//			RPGLifeHash.PlaceSearch( (lat), (lng), "church" );							//교회, 성당
//			RPGLifeHash.PlaceSearch( (lat), (lng), "embassy" );							//대사관
//			RPGLifeHash.PlaceSearch( (lat), (lng), "doctor" );							//병원
//			RPGLifeHash.PlaceSearch( (lat), (lng), "pharmacy" );						//약국
//			RPGLifeHash.PlaceSearch( (lat), (lng), "lodging" );							//호텔
//			RPGLifeHash.PlaceSearch( (lat), (lng), "movie_theater" );					//영화관

			/*
			//-----------------------------------------------------------------------------------------------------------------------
			// 낚시터
			//-----------------------------------------------------------------------------------------------------------------------
			RPGLifeHash.PlaceSearch( (lat), (lng), "fish", "다리" );
			RPGLifeHash.PlaceSearch( (lat), (lng), "fish", "대교" );
			RPGLifeHash.PlaceSearch( (lat), (lng), "fish", "횟집" );
			RPGLifeHash.PlaceSearch( (lat), (lng), "fish", "아쿠아리움" );
			RPGLifeHash.PlaceSearch( (lat), (lng), "fish", "수족관" );
			RPGLifeHash.PlaceSearch( (lat), (lng), "fish", "한강공원" );
			RPGLifeHash.PlaceSearch( (lat), (lng), "fish", "호수" );
			RPGLifeHash.PlaceSearch( (lat), (lng), "fish", "계곡" );
			RPGLifeHash.PlaceSearch( (lat), (lng), "fish", "생태공원" );
			*/

			//-----------------------------------------------------------------------------------------------------------------------
			// -
			//-----------------------------------------------------------------------------------------------------------------------
		}

		/*
		//---------------------------------------------------------------------------------------------------------------------------
		// -
		//---------------------------------------------------------------------------------------------------------------------------
		if( app.ViewLoading.Is() && !app.ViewLoading.Is(app.Structure) )
		{
			app.ViewLoading.ON( app.Structure );
		}
		*/

		//---------------------------------------------------------------------------------------------------------------------------
		// -
		//---------------------------------------------------------------------------------------------------------------------------
	}

	//-------------------------------------------------------------------------------------------------------------------------------
    // -
	//-------------------------------------------------------------------------------------------------------------------------------
	public void funcScene( object wParam=(null), object lParam=(null) )
	{
		//---------------------------------------------------------------------------------------------------------------------------
		// -
		//---------------------------------------------------------------------------------------------------------------------------
		if( (wParam)==(null) ) return;

		//---------------------------------------------------------------------------------------------------------------------------
		// -
		//---------------------------------------------------------------------------------------------------------------------------
		Scene( (SCENE)(wParam) );

		//---------------------------------------------------------------------------------------------------------------------------
		// -
		//---------------------------------------------------------------------------------------------------------------------------
	}

	//-------------------------------------------------------------------------------------------------------------------------------
    // 클라이언트 메세지를 처리하기 위한 함수
	//-------------------------------------------------------------------------------------------------------------------------------
	public void ClientMessage( string ClientMessage )
	{
		//---------------------------------------------------------------------------------------------------------------------------
		// -
		//---------------------------------------------------------------------------------------------------------------------------
//		if( (ClientMessage)==(null) ) return;	//(NULL)값을 허용함

		//---------------------------------------------------------------------------------------------------------------------------
		// -
		//---------------------------------------------------------------------------------------------------------------------------
		switch( ClientMessage )
		{
			//-----------------------------------------------------------------------------------------------------------------------
			// -
			//-----------------------------------------------------------------------------------------------------------------------
			case "ALREADY_PARTY":
//				app.Confirm.ON( app.Language.Get(TEXT.이미_파티에_가입되어_있는_플레이업니다) );
				break;

			//-----------------------------------------------------------------------------------------------------------------------
			// -
			//-----------------------------------------------------------------------------------------------------------------------
			default:
				app.Confirm.ON( ClientMessage );
				break;

			//-----------------------------------------------------------------------------------------------------------------------
			// -
			//-----------------------------------------------------------------------------------------------------------------------
		}

		//---------------------------------------------------------------------------------------------------------------------------
		// -
		//---------------------------------------------------------------------------------------------------------------------------
	}

	//-------------------------------------------------------------------------------------------------------------------------------
    // -
	//-------------------------------------------------------------------------------------------------------------------------------
	public static void funcOpenUrl( object wParam=(null), object lParam=(null) )
	{
		//---------------------------------------------------------------------------------------------------------------------------
		// -
		//---------------------------------------------------------------------------------------------------------------------------
		if( (wParam)==(null) || (string)(wParam)==(null) ) return;

		//---------------------------------------------------------------------------------------------------------------------------
		// -
		//---------------------------------------------------------------------------------------------------------------------------
		string		url		= (string)(wParam);

		//---------------------------------------------------------------------------------------------------------------------------
		// -
		//---------------------------------------------------------------------------------------------------------------------------
		Application.OpenURL( url );

		//---------------------------------------------------------------------------------------------------------------------------
		// -
		//---------------------------------------------------------------------------------------------------------------------------
	}

	//-------------------------------------------------------------------------------------------------------------------------------
    // -
	//-------------------------------------------------------------------------------------------------------------------------------
	public string GetName( object obj )
	{
		//---------------------------------------------------------------------------------------------------------------------------
		// -
		//---------------------------------------------------------------------------------------------------------------------------
		if( (obj)==(null) ) return (null);

		/*
		//---------------------------------------------------------------------------------------------------------------------------
		// -
		//---------------------------------------------------------------------------------------------------------------------------
		objCharacter	character	= (obj as objCharacter);
		if( (character)!=(null) )
		{
			return character.Name();
		}
		*/

		//---------------------------------------------------------------------------------------------------------------------------
		// -
		//---------------------------------------------------------------------------------------------------------------------------
		return (null);
	}

	//-------------------------------------------------------------------------------------------------------------------------------
    // 드래그 거리를 확인하기 위한 함수 
	//-------------------------------------------------------------------------------------------------------------------------------
	public bool IsDragDistance()
	{
		//---------------------------------------------------------------------------------------------------------------------------
		// -
		//---------------------------------------------------------------------------------------------------------------------------
		if( (TouchInterface.Push().length)>Func.GetDragDistance() )
		{
			return true;
		}

		//---------------------------------------------------------------------------------------------------------------------------
		// -
		//---------------------------------------------------------------------------------------------------------------------------
		return false;
	}

	public void funcFirstScene( object wParam=(null), object lParam=(null) )
	{
//		app.ViewLoading.ON( app.ViewApplicationContract );
//		app.ViewIndigator.ON( app.ViewApplicationContract );

//		RPGLifeHash.ApplicationContract();
	}

	public void ApplicationContractAgree()
	{
		funcStart();
	}

	public void funcStart( object wParam=null, object lParam=null )
	{
		app.Engine.Scene( SCENE.SAFE_CLASS );
	}

	public void funcNotice( object wParam=null, object lParam=null )
	{
//		RPGLifeHash.Notice( PlayerPrefs.GetInt(PREFS.NoticeLatest) );
	}

	public void NativeIndigator( string description=null, bool allowCancel=false )
	{
//		if( !Library.Is(description) ) reeturn;	//(NULL)값을 허용함

#if AUP
		if( data.utilsPlugin!=null )
		{
			//Native Indigator는 취소시 반응할 수 없는 콜백 함수가 지원되지 않음
			data.utilsPlugin.ShowNativeLoading( description, allowCancel );
		}
#endif
	}

	public void NativeIndigatorInactive()
	{
#if AUP
		if( data.utilsPlugin!=null )
		{
			data.utilsPlugin.HideNativeLoading();
		}
#endif
	}
	
	//-------------------------------------------------------------------------------------------------------------------------------
    // 위치를 얻기 위한 함수
	//-------------------------------------------------------------------------------------------------------------------------------
	public Vector3 GetPosition( object obj )
	{
		/*
        //---------------------------------------------------------------------------------------------------------------------------
        // -
        //---------------------------------------------------------------------------------------------------------------------------
		if( (obj)==(null) ) return (Vector3.zero);

        //---------------------------------------------------------------------------------------------------------------------------
        // -
        //---------------------------------------------------------------------------------------------------------------------------
		if( (obj as objStatic)!=(null) )
		{
			return (obj as objStatic).GetPosition();
		}

        //---------------------------------------------------------------------------------------------------------------------------
        // -
        //---------------------------------------------------------------------------------------------------------------------------
		*/
		return (Vector3.zero);
	}

	//-------------------------------------------------------------------------------------------------------------------------------
	// 유저 인터페이스가 대기중인지 확인하기 위한 함수
	//-------------------------------------------------------------------------------------------------------------------------------
	public bool IsInterfaceWait()
	{
		//---------------------------------------------------------------------------------------------------------------------------
		// -
		//---------------------------------------------------------------------------------------------------------------------------
//		if( app.ViewCommand.Is() ) return true;
//		if( app.ViewProgress.Is() ) return true;
//		if( app.ViewBuildEdit.Is() ) return true;
		if( app.Panel.IsForeBack() ) return true;
		if( app.ViewIndigator.Is() ) return true;
		if( app.ViewLoading.Is() ) return true;
//		if( app.ViewGameOver.Is() ) return true;
		if( app.Confirm.Is() ) return true;

		//---------------------------------------------------------------------------------------------------------------------------
		// -
		//---------------------------------------------------------------------------------------------------------------------------
		return false;
	}

	//-------------------------------------------------------------------------------------------------------------------------------
    // -
	//-------------------------------------------------------------------------------------------------------------------------------
	public objCanvas GetGlobalUICanvas()
	{
		//---------------------------------------------------------------------------------------------------------------------------
		// -
		//---------------------------------------------------------------------------------------------------------------------------
		if( (app.ViewBottom.Transform().parent)==play.forwardCanvas.Transform() )
		{
			return (play.forwardCanvas);
		}

		//---------------------------------------------------------------------------------------------------------------------------
		// -
		//---------------------------------------------------------------------------------------------------------------------------
		return (play.uiCanvas);
	}

	//-------------------------------------------------------------------------------------------------------------------------------
	// -
	//-------------------------------------------------------------------------------------------------------------------------------
	static float	fRefreshTime	= (0);
	void OnApplicationPause( bool pause )
	{
		//---------------------------------------------------------------------------------------------------------------------------
		// -
		//---------------------------------------------------------------------------------------------------------------------------
		if( !(pause) )
		{
			//-----------------------------------------------------------------------------------------------------------------------
			// -
			//-----------------------------------------------------------------------------------------------------------------------
			while( (NativeScreen.ScreenOutputStep)<(0) && (NativeScreen.UnFullScreenHeight)>(0) && (Screen.height)!=(NativeScreen.UnFullScreenHeight) )
			{
				//-------------------------------------------------------------------------------------------------------------------
				// -
				//-------------------------------------------------------------------------------------------------------------------
//				if( app.ViewProfileCorver.Is() ) break;

				//-------------------------------------------------------------------------------------------------------------------
				// -
				//-------------------------------------------------------------------------------------------------------------------
				app.ViewNavigationBar.ON( NativeScreen.NavigationBarHeight );

				//-------------------------------------------------------------------------------------------------------------------
				// -
				//-------------------------------------------------------------------------------------------------------------------
				break;
			}

			//-----------------------------------------------------------------------------------------------------------------------
			// -
			//-----------------------------------------------------------------------------------------------------------------------
			if( Apps.IsLogin() && (Time.realtimeSinceStartup)-(fRefreshTime)>(60) )
			{
//				RPGLifeHash.Refresh();
				(fRefreshTime)	= (Time.realtimeSinceStartup);
			}

			//-----------------------------------------------------------------------------------------------------------------------
			// -
			//-----------------------------------------------------------------------------------------------------------------------
		}

		//---------------------------------------------------------------------------------------------------------------------------
		// -
		//---------------------------------------------------------------------------------------------------------------------------
	}

	//-------------------------------------------------------------------------------------------------------------------------------
    // -
	//-------------------------------------------------------------------------------------------------------------------------------
	public objConfirm ChargeConfirm()
	{
		//---------------------------------------------------------------------------------------------------------------------------
		// -
		//---------------------------------------------------------------------------------------------------------------------------
//		return app.Confirm.ON( app.Language.Get(TEXT.큐브가_부족합니다), (CONFIRM.YESNO), (app.ViewCharge.funcOnAndDownload) );
		return null;

		//---------------------------------------------------------------------------------------------------------------------------
		// -
		//---------------------------------------------------------------------------------------------------------------------------
	}

	//-------------------------------------------------------------------------------------------------------------------------------
    // -
	//-------------------------------------------------------------------------------------------------------------------------------
}

//-----------------------------------------------------------------------------------------------------------------------------------
// -
//-----------------------------------------------------------------------------------------------------------------------------------