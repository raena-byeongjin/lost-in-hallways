using System.Collections;
using System.Collections.Generic;
using UnityEngine.EventSystems;
using UnityEngine;

//-----------------------------------------------------------------------------------------------------------------------------------
// 캔버스 정보를 처리하기 위한 클래스
//-----------------------------------------------------------------------------------------------------------------------------------
public class CCanvas : MonoBehaviour
{
	//-------------------------------------------------------------------------------------------------------------------------------
	// -
	//-------------------------------------------------------------------------------------------------------------------------------
	[System.Serializable]
	public class tagData
	{
        //---------------------------------------------------------------------------------------------------------------------------
        // -
        //---------------------------------------------------------------------------------------------------------------------------
		public List<objCanvas>		Canvases	= new List<objCanvas>();

        //---------------------------------------------------------------------------------------------------------------------------
        // -
        //---------------------------------------------------------------------------------------------------------------------------
	}
	public tagData		data		= new tagData();

	//-------------------------------------------------------------------------------------------------------------------------------
	// -
	//-------------------------------------------------------------------------------------------------------------------------------
	protected CApp		app			= (null);
	protected CPlay		play		= (null);

	//-------------------------------------------------------------------------------------------------------------------------------
	// -
	//-------------------------------------------------------------------------------------------------------------------------------
	void OnEnable()
	{
		(this.app)		= (CApp.This);
		(this.play)		= (CPlay.This);
	}

    //캔버스 정보를 등록하기 위한 함수
	public objCanvas Create( float depth )
	{
		objCanvas canvas = Func.Create( play._UIRoot, Resources.Load("ApplicationLoader/Objects/Canvas") as GameObject ).GetComponent(typeof(objCanvas)) as objCanvas;
		if( canvas!=null )
		{
			canvas.Camera().Get().depth = depth;
		}

		return canvas;
	}

	//-------------------------------------------------------------------------------------------------------------------------------
    // 캔버스 정보를 등록하기 위한 함수
	//-------------------------------------------------------------------------------------------------------------------------------
	public void Register( objCanvas canvas )
	{
        //---------------------------------------------------------------------------------------------------------------------------
        // -
        //---------------------------------------------------------------------------------------------------------------------------
		if( (canvas)==(null) ) return;

        //---------------------------------------------------------------------------------------------------------------------------
        // -
        //---------------------------------------------------------------------------------------------------------------------------
		if( !data.Canvases.Contains(canvas) )
		{
			data.Canvases.Add( canvas );
			Sort();
		}

        //---------------------------------------------------------------------------------------------------------------------------
        // -
        //---------------------------------------------------------------------------------------------------------------------------
	}

	//-------------------------------------------------------------------------------------------------------------------------------
    // 캔버스 정보를 삭제하기 위한 함수
	//-------------------------------------------------------------------------------------------------------------------------------
	public void Release( objCanvas canvas )
	{
        //---------------------------------------------------------------------------------------------------------------------------
        // -
        //---------------------------------------------------------------------------------------------------------------------------
		if( (canvas)==(null) ) return;

        //---------------------------------------------------------------------------------------------------------------------------
        // -
        //---------------------------------------------------------------------------------------------------------------------------
		data.Canvases.Remove( canvas );

        //---------------------------------------------------------------------------------------------------------------------------
        // -
        //---------------------------------------------------------------------------------------------------------------------------
	}

	//-------------------------------------------------------------------------------------------------------------------------------
    // -
	//-------------------------------------------------------------------------------------------------------------------------------
	public void Release( ViewPanel component )
	{
        //---------------------------------------------------------------------------------------------------------------------------
        // -
        //---------------------------------------------------------------------------------------------------------------------------
		foreach( objCanvas canvas in data.Canvases )
		{
			if( canvas.ForeBack()!=(null) )
			{
				canvas.ForeBack().OFF( component.Panel() );
			}
		}

        //---------------------------------------------------------------------------------------------------------------------------
        // -
        //---------------------------------------------------------------------------------------------------------------------------
	}

	//-------------------------------------------------------------------------------------------------------------------------------
	// 마우스 왼쪽 버튼을 눌렀을 때 반응하기 위한 함수
	//-------------------------------------------------------------------------------------------------------------------------------
	public GameObject Pick( Vector3 point )
	{
        //---------------------------------------------------------------------------------------------------------------------------
        // -
        //---------------------------------------------------------------------------------------------------------------------------
		List<RaycastResult> results = new List<RaycastResult>();

		PointerEventData	pointerEventData	= new PointerEventData(null);
		(pointerEventData.position)	= (point);

        //---------------------------------------------------------------------------------------------------------------------------
        // -
        //---------------------------------------------------------------------------------------------------------------------------
		foreach( objCanvas canvas in data.Canvases )
		{
			//-----------------------------------------------------------------------------------------------------------------------
			// -
			//-----------------------------------------------------------------------------------------------------------------------
			canvas.GraphicRaycaster().Raycast( (pointerEventData), (results) );

			//-----------------------------------------------------------------------------------------------------------------------
			// -
			//-----------------------------------------------------------------------------------------------------------------------
			foreach( RaycastResult r in results )
			{
				return (r.gameObject);
			}

			//-----------------------------------------------------------------------------------------------------------------------
			// -
			//-----------------------------------------------------------------------------------------------------------------------
		}

        //---------------------------------------------------------------------------------------------------------------------------
        // -
        //---------------------------------------------------------------------------------------------------------------------------
		return (null);
	}

	//-------------------------------------------------------------------------------------------------------------------------------
    // -
	//-------------------------------------------------------------------------------------------------------------------------------
	public void Sort()
	{
        //---------------------------------------------------------------------------------------------------------------------------
        // -
        //---------------------------------------------------------------------------------------------------------------------------
		objCanvas	temp	= (null);

        //---------------------------------------------------------------------------------------------------------------------------
        // -
        //---------------------------------------------------------------------------------------------------------------------------
		for( int i=0; i<(data.Canvases.Count-1); i++ )
		{
	        //-----------------------------------------------------------------------------------------------------------------------
		    // -
			//-----------------------------------------------------------------------------------------------------------------------
			if( data.Canvases[i].Camera()==(null) ) continue;

	        //-----------------------------------------------------------------------------------------------------------------------
		    // -
			//-----------------------------------------------------------------------------------------------------------------------
			for( int j=(i); j<(data.Canvases.Count); j++ )
			{
				//-------------------------------------------------------------------------------------------------------------------
				// -
				//-------------------------------------------------------------------------------------------------------------------
				if( data.Canvases[j].Camera()==(null) ) continue;

				//-------------------------------------------------------------------------------------------------------------------
				// -
				//-------------------------------------------------------------------------------------------------------------------
				if( (data.Canvases[i].Camera().Get().depth)>(data.Canvases[i].Camera().Get().depth) )
				{
					(temp)	= (data.Canvases[i]);
					(data.Canvases[i])	= (data.Canvases[j]);
					(data.Canvases[j])	= (temp);
				}

				//-------------------------------------------------------------------------------------------------------------------
				// -
				//-------------------------------------------------------------------------------------------------------------------
			}

	        //-----------------------------------------------------------------------------------------------------------------------
		    // -
			//-----------------------------------------------------------------------------------------------------------------------
		}

        //---------------------------------------------------------------------------------------------------------------------------
        // -
        //---------------------------------------------------------------------------------------------------------------------------
	}

	//-------------------------------------------------------------------------------------------------------------------------------
	// 모든 캔버스를 비활성화 하기 위한 함수
	//-------------------------------------------------------------------------------------------------------------------------------
	public void Disable()
	{
        //---------------------------------------------------------------------------------------------------------------------------
        // -
        //---------------------------------------------------------------------------------------------------------------------------
		foreach( objCanvas canvas in data.Canvases )
		{
			canvas._GameObject().SetActive( false );
		}

        //---------------------------------------------------------------------------------------------------------------------------
        // -
        //---------------------------------------------------------------------------------------------------------------------------
	}

	//-------------------------------------------------------------------------------------------------------------------------------
    // -
	//-------------------------------------------------------------------------------------------------------------------------------
	public void Proc()
	{
        //---------------------------------------------------------------------------------------------------------------------------
        // -
        //---------------------------------------------------------------------------------------------------------------------------
		if( (play.mousePosition)!=(Input.mousePosition) )
		{
			//-----------------------------------------------------------------------------------------------------------------------
			// -
			//-----------------------------------------------------------------------------------------------------------------------
			if( TouchInterface.Push().Is() && Input.GetMouseButton(0) )
			{
				//-------------------------------------------------------------------------------------------------------------------
				// -
				//-------------------------------------------------------------------------------------------------------------------
				app.Panel.ONDRAG( (Input.mousePosition), (TOUCH_INDEX.FIRST) );

				/*
				//-------------------------------------------------------------------------------------------------------------------
				// -
				//-------------------------------------------------------------------------------------------------------------------
				(play.Push.length)	+= Vector3.Distance( (play.Push.point), (Input.mousePosition) );
				(play.Push.point)	= (Input.mousePosition);
				*/

				//-------------------------------------------------------------------------------------------------------------------
				// -
				//-------------------------------------------------------------------------------------------------------------------
			}

			//-----------------------------------------------------------------------------------------------------------------------
			// -
			//-----------------------------------------------------------------------------------------------------------------------
			(play.mousePosition)	= (Input.mousePosition);

			//-----------------------------------------------------------------------------------------------------------------------
			// -
			//-----------------------------------------------------------------------------------------------------------------------
		}

        //---------------------------------------------------------------------------------------------------------------------------
        // -
        //---------------------------------------------------------------------------------------------------------------------------
	}

	//-------------------------------------------------------------------------------------------------------------------------------
    // 전체 화면을 사용하는 스크롤 뷰의 크기를 설정하기 위한 함수
	//-------------------------------------------------------------------------------------------------------------------------------
	public void FullscreenScrollViewInit( RectTransform rectTransform, int padding=(0), bool allowBottomHeight=(true), float addHeight=(0), bool useTopHeight=(false) )
	{
        //---------------------------------------------------------------------------------------------------------------------------
        // -
        //---------------------------------------------------------------------------------------------------------------------------
		if( (rectTransform)==(null) ) return;

        //---------------------------------------------------------------------------------------------------------------------------
        // -
        //---------------------------------------------------------------------------------------------------------------------------
		float	fBottomHeight	= (addHeight);
		if( allowBottomHeight )
		{
			(fBottomHeight)		+= app.ViewBottom.Height();
		}

        //---------------------------------------------------------------------------------------------------------------------------
        // -
        //---------------------------------------------------------------------------------------------------------------------------
		float	fTopHeight		= app.ViewNavigation.Height();
		if( useTopHeight )
		{
			(fTopHeight)		= app.ViewTop.Height();
		}

        //---------------------------------------------------------------------------------------------------------------------------
        // -
        //---------------------------------------------------------------------------------------------------------------------------
		(rectTransform.sizeDelta)		= new Vector2( tagSystem.GetScreenWidth()-(padding*2), tagSystem.GetScreenHeight()-(fTopHeight)-(fBottomHeight)-(padding*2) );
		(rectTransform.localPosition)	= new Vector3( (0), -(fTopHeight)/(2)+(fBottomHeight)/(2), (0) );

        //---------------------------------------------------------------------------------------------------------------------------
        // -
        //---------------------------------------------------------------------------------------------------------------------------
	}

	//-------------------------------------------------------------------------------------------------------------------------------
    // 캔버스 리스트를 얻기 위한 함수
	//-------------------------------------------------------------------------------------------------------------------------------
	public List<objCanvas> GetList()
	{
        //---------------------------------------------------------------------------------------------------------------------------
        // -
        //---------------------------------------------------------------------------------------------------------------------------
		return (data.Canvases);

        //---------------------------------------------------------------------------------------------------------------------------
        // -
        //---------------------------------------------------------------------------------------------------------------------------
	}

	//-------------------------------------------------------------------------------------------------------------------------------
    // -
	//-------------------------------------------------------------------------------------------------------------------------------
}

//-----------------------------------------------------------------------------------------------------------------------------------
// -
//-----------------------------------------------------------------------------------------------------------------------------------