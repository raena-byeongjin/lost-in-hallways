using System.Collections.Generic;
using System;
using UnityEngine.UI;
using UnityEngine;

public class CViewLoading : ViewPanel
{
	[System.Serializable]
	public class tagData : _tagData
	{
		public Text							description					= null;
		public ValueBehaviour				progress					= null;
		public RectTransform				LoadingRectTransform		= null;
		public GameObject					title						= null;
		public GameObject					rating						= null;

		public List<tagLoadingInstance>		Instances					= new List<tagLoadingInstance>();
		public List<tagCallback>			OnGUICalls					= new List<tagCallback>();
		public List<tagLoadingTask>			Tasks						= new List<tagLoadingTask>();

		public float						downloadValue;

		public Transform					particle					= null;
	};
	public tagData data = new tagData();

	//-------------------------------------------------------------------------------------------------------------------------------
	// 인터페이스를 활성화 하기 위한 함수
	//-------------------------------------------------------------------------------------------------------------------------------
	public bool ON( Component component, string description=(null) )
	{
		//---------------------------------------------------------------------------------------------------------------------------
		// -
		//---------------------------------------------------------------------------------------------------------------------------
		if( (component)==(null) ) return false;
//		if( (description)==(null) ) return false;	//(NULL)값을 허용함
//		Debug.Log( "Loading-ON => "+(description)+" : "+(component) );

		//---------------------------------------------------------------------------------------------------------------------------
		// -
		//---------------------------------------------------------------------------------------------------------------------------
		if( base.ON(data) )
		{
			/*
			//-----------------------------------------------------------------------------------------------------------------------
			// 컨텐츠 등급
			//-----------------------------------------------------------------------------------------------------------------------
			if( Apps.IsLogin() )
			{
				Func.Active( data.title );
				Func.Inactive( data.rating );
			}
			else
			{
				Func.Inactive( data.title );
				Func.Active( data.rating );
			}
			*/

			//-----------------------------------------------------------------------------------------------------------------------
			// -
			//-----------------------------------------------------------------------------------------------------------------------
			data.progress.ON( 0f );

			//-----------------------------------------------------------------------------------------------------------------------
			// -
			//-----------------------------------------------------------------------------------------------------------------------
			(Description().text)	= (null);

			//-----------------------------------------------------------------------------------------------------------------------
			// -
			//-----------------------------------------------------------------------------------------------------------------------
		}

		//---------------------------------------------------------------------------------------------------------------------------
		// -
		//---------------------------------------------------------------------------------------------------------------------------
		tagLoadingInstance	instance	= Find(component);
		if( (instance)!=(null) )
		{
			(instance.description)		= (description);
		}
		else
		{
			Register( (component), (description) );
		}

		//---------------------------------------------------------------------------------------------------------------------------
		// -
		//---------------------------------------------------------------------------------------------------------------------------
		if( !IsTask(component) )
		{
			Task( component );
		}

		//---------------------------------------------------------------------------------------------------------------------------
		// -
		//---------------------------------------------------------------------------------------------------------------------------
		return true;
	}

	//-------------------------------------------------------------------------------------------------------------------------------
	// 인터페이스를 비활성화 하기 위한 함수
	//-------------------------------------------------------------------------------------------------------------------------------
	public override void ONFORE()
	{
		//---------------------------------------------------------------------------------------------------------------------------
		// -
		//---------------------------------------------------------------------------------------------------------------------------
		if( app.ViewNavigationBar.Is() )
		{
			app.ViewNavigationBar.Fore();
		}

		//---------------------------------------------------------------------------------------------------------------------------
		// -
		//---------------------------------------------------------------------------------------------------------------------------
	}

	//-------------------------------------------------------------------------------------------------------------------------------
	// 인터페이스를 비활성화 하기 위한 함수
	//-------------------------------------------------------------------------------------------------------------------------------
	public override bool OFF()
	{
		//---------------------------------------------------------------------------------------------------------------------------
		// -
		//---------------------------------------------------------------------------------------------------------------------------
		if( Is() )
		{
			//-----------------------------------------------------------------------------------------------------------------------
			// 보류했던 다운로드 완료 리스트를 초기화 함
			//-----------------------------------------------------------------------------------------------------------------------
			if( !app.Download.Is() ) //완료 항목은 제외된 확인
			{
				app.Download.Reset();
			}

			//-----------------------------------------------------------------------------------------------------------------------
			// -
			//-----------------------------------------------------------------------------------------------------------------------
			if( true )
			{
				//-------------------------------------------------------------------------------------------------------------------
				// -
				//-------------------------------------------------------------------------------------------------------------------
				foreach( tagLoadingTask task in data.Tasks )
				{
					if( (task.progress)<(1) )
					{
						Debug.LogWarning("진행률을 다 채우지 않고 종료되는 Task가 있음 : "+(task.progress)+" => "+(task.component), (task.component) );
					}
				}

				//-------------------------------------------------------------------------------------------------------------------
				// -
				//-------------------------------------------------------------------------------------------------------------------
				data.Tasks.Clear();

				//-------------------------------------------------------------------------------------------------------------------
				// -
				//-------------------------------------------------------------------------------------------------------------------
			}

			//-----------------------------------------------------------------------------------------------------------------------
			// -
			//-----------------------------------------------------------------------------------------------------------------------
			if( (data.particle)!=(null) )
			{
				GameObject.Destroy( data.particle.gameObject );
				(data.particle) = (null);
			}

			//-----------------------------------------------------------------------------------------------------------------------
			// -
			//-----------------------------------------------------------------------------------------------------------------------
		}

		//---------------------------------------------------------------------------------------------------------------------------
		// -
		//---------------------------------------------------------------------------------------------------------------------------
		return base.OFF();
	}

	//인터페이스를 비활성화 하기 위한 함수
	public bool OFF( Component component )
	{
//		if( component==null )return false; //(NULL)값을 허용함

		if( component!=null )
		{
			Release( component );
		}
#if UNITY_EDITOR
		else
		{
			Debug.Log( "로딩 화면을 OFF하려면 인자값에 점유된 Component객체의 레퍼런스가 입력되어야 합니다. : "+(component), (component) );
		}
#endif

		if( !app.Download.IsTask(component) || GetTaskProgress(component)>=(1) )
		{
			TaskProgress( component, 1f );
		}
#if UNITY_EDITOR
		else
		{
			Debug.Log( "다운로드 TASK로 설정되어 있기 때문에 Progress 수치를 입력할 수 없습니다. : "+component, component );
		}
#endif

		if( Instances().Count==1 && Is(app.Download) )
		{
			//다운로드 객체가 점유되어 있지만 실제로는 아무 다운로드가 일어나고 있지 않을 경우
			//다운로드 프로세스를 활성화 시킴
			if( !app.Download.Is() && !app.Download.IsActive() )
			{
				app.Download.Enable( true );
			}
		}

		if( Instances().Count<=0 && !app.MessageQueue.Is(funcOFFDelay) )
		{
			app.MessageQueue.ON( funcOFFDelay, 1f );
		}

		return false;
	}

	//인터페이스를 비활성화 하기 위한 함수
	public void funcOFF( object wParam=null, object lParam=null )
	{
		if( Instances().Count>0 )
		{
			if( wParam!=null )
			{
				OFF( wParam as Component );
			}
#if UNITY_EDITOR
			else
			{
				foreach( tagLoadingInstance instance in Instances() )
				{
					Debug.Log( instance.component+" => "+instance.description );
				}
			}
#endif
		}
		else
		{
			OFF();
		}
	}

	void Update()
	{
		string description = GetDescription();
		if( Library.Is(description) && Description().text!=description )
		{
			Description().text = description;
		}

		data.progress.ON( Func.Divide( GetTaskProgress(), data.Tasks.Count ) );

		Vector3 vParticle = Library.CanvasToWorldPoint( play.foreCanvas, play.foreCanvas.Camera(), GetLoadingBarPosition() );
		if( data.particle==null ) data.particle = Func.Create( play._Scene, vParticle, new Vector3(), new Vector3(), (Resources.Load("Particles/Loading/LoadingParticle") as GameObject) );
		if( data.particle!=null )
		{
			data.particle.localPosition = vParticle;
		}
	}

	void OnGUI()
	{
		if( data.OnGUICalls.Count>0 )
		{
			foreach( tagCallback callback in data.OnGUICalls )
			{
				callback.Call();
			}

			data.OnGUICalls.Clear();
		}
	}

	public void OnGUICall( Action<object, object> func, object wParam=null, object lParam=null )
	{
		if( func==null ) return;
		data.OnGUICalls.Add( new tagCallback( func, wParam, lParam ) );
	}

	//인스턴스를 등록하기 위한 함수
	public tagLoadingInstance Register( Component component, string description )
	{
		if( component==null ) return null;
		if(  !Library.Is(description) ) return null;

		tagLoadingInstance instance = new tagLoadingInstance();
		instance.component		= component;
		instance.description	= description;

		Instances().Add( instance );
		return instance;
	}

	//-------------------------------------------------------------------------------------------------------------------------------
	// 인스턴스를 등록하기 위한 함수
	//-------------------------------------------------------------------------------------------------------------------------------
	public tagLoadingTask Task( Component component )
	{
		//---------------------------------------------------------------------------------------------------------------------------
		// -
		//---------------------------------------------------------------------------------------------------------------------------
		if( (component)==(null) ) return (null);

		//---------------------------------------------------------------------------------------------------------------------------
		// -
		//---------------------------------------------------------------------------------------------------------------------------
		tagLoadingTask		task		= new tagLoadingTask();

		//---------------------------------------------------------------------------------------------------------------------------
		// -
		//---------------------------------------------------------------------------------------------------------------------------
		(task.component)	= (component);

		//---------------------------------------------------------------------------------------------------------------------------
		// -
		//---------------------------------------------------------------------------------------------------------------------------
		data.Tasks.Add( task );

		//---------------------------------------------------------------------------------------------------------------------------
		// -
		//---------------------------------------------------------------------------------------------------------------------------
		return (task);
	}

	//-------------------------------------------------------------------------------------------------------------------------------
	// 로딩 Task를 검색하기 위한 함수
	//-------------------------------------------------------------------------------------------------------------------------------
	public tagLoadingTask FindTask( Component component )
	{
		//---------------------------------------------------------------------------------------------------------------------------
		// -
		//---------------------------------------------------------------------------------------------------------------------------
		if( (component)==(null) ) return (null);

		//---------------------------------------------------------------------------------------------------------------------------
		// -
		//---------------------------------------------------------------------------------------------------------------------------
		foreach( tagLoadingTask task in data.Tasks )
		{
			if( (task.component)==(component) )
			{
				return (task);
			}
		}

		//---------------------------------------------------------------------------------------------------------------------------
		// -
		//---------------------------------------------------------------------------------------------------------------------------
		return (null);
	}

	//-------------------------------------------------------------------------------------------------------------------------------
	// 인스턴스를 등록하기 위한 함수
	//-------------------------------------------------------------------------------------------------------------------------------
	bool IsTask( Component component )
	{
		//---------------------------------------------------------------------------------------------------------------------------
		// -
		//---------------------------------------------------------------------------------------------------------------------------
		if( (component)==(null) ) return false;

		//---------------------------------------------------------------------------------------------------------------------------
		// -
		//---------------------------------------------------------------------------------------------------------------------------
		if( FindTask(component)!=(null) )
		{
			return true;
		}

		//---------------------------------------------------------------------------------------------------------------------------
		// -
		//---------------------------------------------------------------------------------------------------------------------------
		return false;
	}

	//-------------------------------------------------------------------------------------------------------------------------------
	// TASK 진행률을 입력하기 위한 함수
	//-------------------------------------------------------------------------------------------------------------------------------
	public void TaskProgress( Component component, float progress )
	{
		//---------------------------------------------------------------------------------------------------------------------------
		// -
		//---------------------------------------------------------------------------------------------------------------------------
		if( (component)==(null) ) return;

		//---------------------------------------------------------------------------------------------------------------------------
		// -
		//---------------------------------------------------------------------------------------------------------------------------
		tagLoadingTask		task	= FindTask(component);
		if( (task)!=(null) && (task.Downloads.Count)<=(0) )
		{
			(task.progress)		= (progress);
		}

		//---------------------------------------------------------------------------------------------------------------------------
		// -
		//---------------------------------------------------------------------------------------------------------------------------
	}

	//-------------------------------------------------------------------------------------------------------------------------------
	// TASK 진행률을 얻기 위한 함수
	//-------------------------------------------------------------------------------------------------------------------------------
	float GetTaskProgress( Component component )
	{
		//---------------------------------------------------------------------------------------------------------------------------
		// -
		//---------------------------------------------------------------------------------------------------------------------------
		if( (component)==(null) ) return (0);

		//---------------------------------------------------------------------------------------------------------------------------
		// -
		//---------------------------------------------------------------------------------------------------------------------------
		foreach( tagLoadingTask task in data.Tasks )
		{
			if( (task.component)==(component) )
			{
				return (task.progress);
			}
		}

		//---------------------------------------------------------------------------------------------------------------------------
		// -
		//---------------------------------------------------------------------------------------------------------------------------
		return (0);
	}

	//-------------------------------------------------------------------------------------------------------------------------------
	// TASK 진행률을 얻기 위한 함수
	//-------------------------------------------------------------------------------------------------------------------------------
	float GetTaskProgress()
	{
		//---------------------------------------------------------------------------------------------------------------------------
		// -
		//---------------------------------------------------------------------------------------------------------------------------
		float	progress	= (0);

		//---------------------------------------------------------------------------------------------------------------------------
		// -
		//---------------------------------------------------------------------------------------------------------------------------
		foreach( tagLoadingTask task in data.Tasks )
		{
			(progress)	+= (task.progress);
		}

		//---------------------------------------------------------------------------------------------------------------------------
		// -
		//---------------------------------------------------------------------------------------------------------------------------
		return (progress);
	}

	//-------------------------------------------------------------------------------------------------------------------------------
	// 리스트를 얻기 위한 함수
	//-------------------------------------------------------------------------------------------------------------------------------
	public List<tagLoadingInstance> Instances()
	{
		//---------------------------------------------------------------------------------------------------------------------------
		// -
		//---------------------------------------------------------------------------------------------------------------------------
		return (data.Instances);

		//---------------------------------------------------------------------------------------------------------------------------
		// -
		//---------------------------------------------------------------------------------------------------------------------------
	}

	//-------------------------------------------------------------------------------------------------------------------------------
	// 인스턴스를 등록하기 위한 함수
	//-------------------------------------------------------------------------------------------------------------------------------
	public tagLoadingInstance Find( Component component )
	{
		//---------------------------------------------------------------------------------------------------------------------------
		// -
		//---------------------------------------------------------------------------------------------------------------------------
		if( (component)==(null) ) return (null);

		//---------------------------------------------------------------------------------------------------------------------------
		// -
		//---------------------------------------------------------------------------------------------------------------------------
		foreach( tagLoadingInstance instance in Instances() )
		{
			if( (instance.component)==(component) )
			{
				return (instance);
			}
		}

		//---------------------------------------------------------------------------------------------------------------------------
		// -
		//---------------------------------------------------------------------------------------------------------------------------
		return (null);
	}

	//-------------------------------------------------------------------------------------------------------------------------------
	// 인스턴스를 등록하기 위한 함수
	//-------------------------------------------------------------------------------------------------------------------------------
	public void Release( Component component )
	{
		//---------------------------------------------------------------------------------------------------------------------------
		// -
		//---------------------------------------------------------------------------------------------------------------------------
		if( (component)==(null) ) return;

		//---------------------------------------------------------------------------------------------------------------------------
		// -
		//---------------------------------------------------------------------------------------------------------------------------
		tagLoadingInstance	instance	= Find(component);
		if( (instance)!=(null) )
		{
//			Debug.Log( component+" => "+instance.description );
			Instances().Remove( instance );
		}

		//---------------------------------------------------------------------------------------------------------------------------
		// -
		//---------------------------------------------------------------------------------------------------------------------------
	}

	//-------------------------------------------------------------------------------------------------------------------------------
	// 인터페이스가 활성화 되어 있는지 확인하기 위한 함수
	//-------------------------------------------------------------------------------------------------------------------------------
	public bool Is( Component component )
	{
		//---------------------------------------------------------------------------------------------------------------------------
		// -
		//---------------------------------------------------------------------------------------------------------------------------
		if( (component)==(null) ) return false;

		//---------------------------------------------------------------------------------------------------------------------------
		// -
		//---------------------------------------------------------------------------------------------------------------------------
		if( Find(component)!=(null) )
		{
			return true;
		}

		//---------------------------------------------------------------------------------------------------------------------------
		// -
		//---------------------------------------------------------------------------------------------------------------------------
		return false;
	}

	//-------------------------------------------------------------------------------------------------------------------------------
	// DESCRIPTION을 얻기 위한 함수
	//-------------------------------------------------------------------------------------------------------------------------------
	public string GetDescription()
	{
		//---------------------------------------------------------------------------------------------------------------------------
		// -
		//---------------------------------------------------------------------------------------------------------------------------
		foreach( tagLoadingInstance instance in Instances() )
		{
			if( Library.Is(instance.description) )
			{
				return (instance.description);
			}
		}

		//---------------------------------------------------------------------------------------------------------------------------
		// -
		//---------------------------------------------------------------------------------------------------------------------------
		return (null);
	}

	//-------------------------------------------------------------------------------------------------------------------------------
	// DESCRIPTION 객체를 얻기 위한 함수
	//-------------------------------------------------------------------------------------------------------------------------------
	public Text Description()
	{
		//---------------------------------------------------------------------------------------------------------------------------
		// -
		//---------------------------------------------------------------------------------------------------------------------------
		return (data.description);

		//---------------------------------------------------------------------------------------------------------------------------
		// -
		//---------------------------------------------------------------------------------------------------------------------------
	}

	//-------------------------------------------------------------------------------------------------------------------------------
	// 로딩 바 위치를 얻기 위한 함수
	//-------------------------------------------------------------------------------------------------------------------------------
	public Vector3 GetLoadingBarPosition()
	{
		//---------------------------------------------------------------------------------------------------------------------------
		// -
		//---------------------------------------------------------------------------------------------------------------------------
		float Value = (data.LoadingRectTransform.localPosition.x) - (data.LoadingRectTransform.sizeDelta.x)/(2);
		(Value)	+= (data.LoadingRectTransform.sizeDelta.x) * data.progress.Get();

		//---------------------------------------------------------------------------------------------------------------------------
		// -
		//---------------------------------------------------------------------------------------------------------------------------
		return new Vector3( (Value), (data.LoadingRectTransform.localPosition.y), (data.LoadingRectTransform.localPosition.z) );
	}

	public void funcOFFDelay( object wParam=null, object lParam=null )
	{
		OnGUICall( funcOFF, wParam, lParam );
	}

	/*
	//-------------------------------------------------------------------------------------------------------------------------------
	// 취소 입력에 반응하기 위한 함수
	//-------------------------------------------------------------------------------------------------------------------------------
	public override bool ONLBUTTONUP( Vector2 point,TOUCH_INDEX touchIndex )
	{
		//---------------------------------------------------------------------------------------------------------------------------
		// -
		//---------------------------------------------------------------------------------------------------------------------------
		if( Is() && Since()>(1f) )
		{
			foreach( tagLoadingInstance instance in Instances() )
			{
				app.Confirm.ON( instance.component.ToString() );
			}
		}

		//---------------------------------------------------------------------------------------------------------------------------
		// -
		//---------------------------------------------------------------------------------------------------------------------------
		return base.ONLBUTTONUP(point,touchIndex);
	}
	*/

	//-------------------------------------------------------------------------------------------------------------------------------
	// 취소 입력에 반응하기 위한 함수
	//-------------------------------------------------------------------------------------------------------------------------------
	public override bool ONCANCEL( CANCEL Cancel )
	{
		//---------------------------------------------------------------------------------------------------------------------------
		// -
		//---------------------------------------------------------------------------------------------------------------------------
		return true;	//취소 입력이 차단되야 하므로, TRUE를 반환해서 모든 프로세스를 중단함
	}

	//-------------------------------------------------------------------------------------------------------------------------------
	// 인터페이스를 활성화 하기 위한 함수
	//-------------------------------------------------------------------------------------------------------------------------------
	public override bool ONCONTROL( objControl control, CONTROL_ACTION Action, tagFocus focus )
	{
		//---------------------------------------------------------------------------------------------------------------------------
		// -
		//---------------------------------------------------------------------------------------------------------------------------
		if( (control)==(null) ) return false;

		//---------------------------------------------------------------------------------------------------------------------------
		// -
		//---------------------------------------------------------------------------------------------------------------------------
		return false;
	}

	//메모리를 초기화 하기 위한 함수
	public override void Unloader()
	{
		data.description			= null;
		data.progress				= null;
		data.LoadingRectTransform	= null;
		data.title					= null;
		data.rating					= null;
	}

	//인터페이스를 불러오기 위한 함수
	public override void Loader()
	{
		base.Loader( Resources.Load("Loading"), play.foreCanvas );

		data.description			= Func.Get( Transform(), "Description" ).GetComponent(typeof(Text)) as Text;
		data.progress				= Func.Get( Transform(), "Loading" ).GetComponentInChildren(typeof(ValueBehaviour)) as ValueBehaviour;
		data.LoadingRectTransform	= Func.Get( Transform(), "Loading" ) as RectTransform;
		data.title					= Func.Get( Transform(), "Title" ).gameObject;
		data.rating					= Func.Get( Transform(), "Rating" ).gameObject;
	}
}